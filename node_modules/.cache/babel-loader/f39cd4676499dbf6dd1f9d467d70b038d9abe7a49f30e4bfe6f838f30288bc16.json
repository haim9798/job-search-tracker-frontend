{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PositionStatus } from '../types';\nexport const usePositionFilters = () => {\n  _s();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filters, setFiltersState] = useState(() => {\n    // Initialize filters from URL on first render\n    const urlFilters = {};\n    const status = searchParams.get('status');\n    const company = searchParams.get('company');\n    const search = searchParams.get('search');\n    const dateFrom = searchParams.get('date_from');\n    const dateTo = searchParams.get('date_to');\n    if (status && Object.values(PositionStatus).includes(status)) {\n      urlFilters.status = status;\n    }\n    if (company) {\n      urlFilters.company = company;\n    }\n    if (search) {\n      urlFilters.search = search;\n    }\n    if (dateFrom) {\n      urlFilters.date_from = dateFrom;\n    }\n    if (dateTo) {\n      urlFilters.date_to = dateTo;\n    }\n    return urlFilters;\n  });\n  const isUpdatingFromURL = useRef(false);\n\n  // Update URL when filters change\n  const updateURL = useCallback(newFilters => {\n    if (isUpdatingFromURL.current) return;\n    const params = new URLSearchParams();\n    Object.entries(newFilters).forEach(([key, value]) => {\n      if (value !== undefined && value !== '') {\n        params.set(key, value);\n      }\n    });\n    isUpdatingFromURL.current = true;\n    setSearchParams(params, {\n      replace: true\n    });\n    setTimeout(() => {\n      isUpdatingFromURL.current = false;\n    }, 0);\n  }, [setSearchParams]);\n\n  // Set filters and update URL\n  const setFilters = useCallback(newFilters => {\n    setFiltersState(newFilters);\n    updateURL(newFilters);\n  }, [updateURL]);\n\n  // Update a single filter\n  const updateFilter = useCallback((key, value) => {\n    const newFilters = {\n      ...filters,\n      [key]: value || undefined\n    };\n\n    // Remove undefined values\n    Object.keys(newFilters).forEach(k => {\n      if (newFilters[k] === undefined) {\n        delete newFilters[k];\n      }\n    });\n    setFilters(newFilters);\n  }, [filters, setFilters]);\n\n  // Clear all filters\n  const clearFilters = useCallback(() => {\n    setFiltersState({});\n    setSearchParams({}, {\n      replace: true\n    });\n  }, [setSearchParams]);\n\n  // Check if any filters are active\n  const hasActiveFilters = Object.values(filters).some(value => value !== undefined && value !== '');\n\n  // Count active filters\n  const activeFilterCount = Object.values(filters).filter(value => value !== undefined && value !== '').length;\n  return {\n    filters,\n    setFilters,\n    updateFilter,\n    clearFilters,\n    hasActiveFilters,\n    activeFilterCount\n  };\n};\n_s(usePositionFilters, \"+xk/76jChLa7k4yD/ecS9rZbTQg=\", false, function () {\n  return [useSearchParams];\n});\nexport default usePositionFilters;","map":{"version":3,"names":["useState","useCallback","useRef","useSearchParams","PositionStatus","usePositionFilters","_s","searchParams","setSearchParams","filters","setFiltersState","urlFilters","status","get","company","search","dateFrom","dateTo","Object","values","includes","date_from","date_to","isUpdatingFromURL","updateURL","newFilters","current","params","URLSearchParams","entries","forEach","key","value","undefined","set","replace","setTimeout","setFilters","updateFilter","keys","k","clearFilters","hasActiveFilters","some","activeFilterCount","filter","length"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/hooks/usePositionFilters.ts"],"sourcesContent":["import { useState, useCallback, useEffect, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PositionFilters, PositionStatus } from '../types';\n\ninterface UsePositionFiltersReturn {\n  filters: PositionFilters;\n  setFilters: (filters: PositionFilters) => void;\n  updateFilter: (key: keyof PositionFilters, value: string | undefined) => void;\n  clearFilters: () => void;\n  hasActiveFilters: boolean;\n  activeFilterCount: number;\n}\n\nexport const usePositionFilters = (): UsePositionFiltersReturn => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filters, setFiltersState] = useState<PositionFilters>(() => {\n    // Initialize filters from URL on first render\n    const urlFilters: PositionFilters = {};\n    \n    const status = searchParams.get('status');\n    const company = searchParams.get('company');\n    const search = searchParams.get('search');\n    const dateFrom = searchParams.get('date_from');\n    const dateTo = searchParams.get('date_to');\n\n    if (status && Object.values(PositionStatus).includes(status as PositionStatus)) {\n      urlFilters.status = status as PositionStatus;\n    }\n    if (company) { urlFilters.company = company; }\n    if (search) { urlFilters.search = search; }\n    if (dateFrom) { urlFilters.date_from = dateFrom; }\n    if (dateTo) { urlFilters.date_to = dateTo; }\n\n    return urlFilters;\n  });\n  \n  const isUpdatingFromURL = useRef(false);\n\n  // Update URL when filters change\n  const updateURL = useCallback((newFilters: PositionFilters) => {\n    if (isUpdatingFromURL.current) return;\n    \n    const params = new URLSearchParams();\n    \n    Object.entries(newFilters).forEach(([key, value]) => {\n      if (value !== undefined && value !== '') {\n        params.set(key, value);\n      }\n    });\n\n    isUpdatingFromURL.current = true;\n    setSearchParams(params, { replace: true });\n    setTimeout(() => {\n      isUpdatingFromURL.current = false;\n    }, 0);\n  }, [setSearchParams]);\n\n  // Set filters and update URL\n  const setFilters = useCallback((newFilters: PositionFilters) => {\n    setFiltersState(newFilters);\n    updateURL(newFilters);\n  }, [updateURL]);\n\n  // Update a single filter\n  const updateFilter = useCallback((key: keyof PositionFilters, value: string | undefined) => {\n    const newFilters = {\n      ...filters,\n      [key]: value || undefined,\n    };\n    \n    // Remove undefined values\n    Object.keys(newFilters).forEach(k => {\n      if (newFilters[k as keyof PositionFilters] === undefined) {\n        delete newFilters[k as keyof PositionFilters];\n      }\n    });\n    \n    setFilters(newFilters);\n  }, [filters, setFilters]);\n\n  // Clear all filters\n  const clearFilters = useCallback(() => {\n    setFiltersState({});\n    setSearchParams({}, { replace: true });\n  }, [setSearchParams]);\n\n  // Check if any filters are active\n  const hasActiveFilters = Object.values(filters).some(value => \n    value !== undefined && value !== ''\n  );\n\n  // Count active filters\n  const activeFilterCount = Object.values(filters).filter(value => \n    value !== undefined && value !== ''\n  ).length;\n\n  return {\n    filters,\n    setFilters,\n    updateFilter,\n    clearFilters,\n    hasActiveFilters,\n    activeFilterCount,\n  };\n};\n\nexport default usePositionFilters;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}