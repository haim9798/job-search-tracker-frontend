{"ast":null,"code":"import{useQuery}from'@tanstack/react-query';import{statisticsService}from'../services';import{queryKeys}from'../lib/queryClient';// Query hooks\nexport const useStatisticsOverview=()=>{return useQuery({queryKey:queryKeys.statistics.overview(),queryFn:()=>statisticsService.getOverview(),staleTime:5*60*1000// 5 minutes\n});};export const usePositionStats=()=>{return useQuery({queryKey:queryKeys.statistics.positions(),queryFn:()=>statisticsService.getPositionStats(),staleTime:5*60*1000});};export const useInterviewStats=()=>{return useQuery({queryKey:queryKeys.statistics.interviews(),queryFn:()=>statisticsService.getInterviewStats(),staleTime:5*60*1000});};export const useCompanyStats=()=>{return useQuery({queryKey:queryKeys.statistics.companies(),queryFn:()=>statisticsService.getCompanyStats(),staleTime:10*60*1000// 10 minutes for less frequently changing data\n});};export const useDashboardSummary=()=>{return useQuery({queryKey:queryKeys.statistics.dashboard(),queryFn:()=>statisticsService.getDashboardSummary(),staleTime:2*60*1000,// 2 minutes for dashboard data\nrefetchOnWindowFocus:true// Refetch when user returns to dashboard\n});};export const useStatsByDateRange=(dateFrom,dateTo)=>{return useQuery({queryKey:queryKeys.statistics.custom({dateFrom,dateTo}),queryFn:()=>statisticsService.getStatsByDateRange(dateFrom,dateTo),enabled:!!dateFrom&&!!dateTo,staleTime:5*60*1000});};export const useMonthlyStats=year=>{const currentYear=year||new Date().getFullYear();return useQuery({queryKey:queryKeys.statistics.monthly(currentYear),queryFn:()=>statisticsService.getMonthlyStats(currentYear),staleTime:10*60*1000});};export const useSuccessRates=()=>{return useQuery({queryKey:[...queryKeys.statistics.all,'success-rates'],queryFn:()=>statisticsService.getSuccessRates(),staleTime:10*60*1000});};export const useTimeStats=()=>{return useQuery({queryKey:[...queryKeys.statistics.all,'time-metrics'],queryFn:()=>statisticsService.getTimeStats(),staleTime:10*60*1000});};export const useInterviewTrends=()=>{return useQuery({queryKey:[...queryKeys.statistics.all,'interview-trends'],queryFn:()=>statisticsService.getInterviewTrends(),staleTime:10*60*1000});};export const useStatusProgression=()=>{return useQuery({queryKey:[...queryKeys.statistics.all,'status-progression'],queryFn:()=>statisticsService.getStatusProgression(),staleTime:15*60*1000// 15 minutes for analytical data\n});};export const useTopCompanies=function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;return useQuery({queryKey:[...queryKeys.statistics.all,'top-companies',limit],queryFn:()=>statisticsService.getTopCompanies(limit),staleTime:15*60*1000});};export const useInterviewTypeStats=()=>{return useQuery({queryKey:[...queryKeys.statistics.all,'interview-types'],queryFn:()=>statisticsService.getInterviewTypeStats(),staleTime:10*60*1000});};export const useWeeklyActivity=()=>{return useQuery({queryKey:[...queryKeys.statistics.all,'weekly-activity'],queryFn:()=>statisticsService.getWeeklyActivity(),staleTime:5*60*1000});};export const useApplicationSources=()=>{return useQuery({queryKey:[...queryKeys.statistics.all,'application-sources'],queryFn:()=>statisticsService.getApplicationSources(),staleTime:15*60*1000});};export const useSalaryStats=()=>{return useQuery({queryKey:[...queryKeys.statistics.all,'salary-analysis'],queryFn:()=>statisticsService.getSalaryStats(),staleTime:15*60*1000});};export const useLocationStats=()=>{return useQuery({queryKey:[...queryKeys.statistics.all,'locations'],queryFn:()=>statisticsService.getLocationStats(),staleTime:15*60*1000});};export const useCustomStats=filters=>{return useQuery({queryKey:queryKeys.statistics.custom(filters),queryFn:()=>statisticsService.getCustomStats(filters),enabled:Object.keys(filters).some(key=>filters[key]!==undefined),staleTime:5*60*1000});};// Combined hooks for dashboard and analytics\nexport const useAnalyticsDashboard=()=>{const overviewQuery=useStatisticsOverview();const successRatesQuery=useSuccessRates();const monthlyStatsQuery=useMonthlyStats();const topCompaniesQuery=useTopCompanies(5);return{overview:overviewQuery,successRates:successRatesQuery,monthlyStats:monthlyStatsQuery,topCompanies:topCompaniesQuery,isLoading:overviewQuery.isLoading||successRatesQuery.isLoading||monthlyStatsQuery.isLoading||topCompaniesQuery.isLoading,error:overviewQuery.error||successRatesQuery.error||monthlyStatsQuery.error||topCompaniesQuery.error};};export const useMainDashboard=()=>{const summaryQuery=useDashboardSummary();const weeklyActivityQuery=useWeeklyActivity();const interviewTrendsQuery=useInterviewTrends();return{summary:summaryQuery,weeklyActivity:weeklyActivityQuery,interviewTrends:interviewTrendsQuery,isLoading:summaryQuery.isLoading||weeklyActivityQuery.isLoading||interviewTrendsQuery.isLoading,error:summaryQuery.error||weeklyActivityQuery.error||interviewTrendsQuery.error};};export const usePerformanceMetrics=()=>{const successRatesQuery=useSuccessRates();const timeStatsQuery=useTimeStats();const statusProgressionQuery=useStatusProgression();const interviewTypeStatsQuery=useInterviewTypeStats();return{successRates:successRatesQuery,timeStats:timeStatsQuery,statusProgression:statusProgressionQuery,interviewTypeStats:interviewTypeStatsQuery,isLoading:successRatesQuery.isLoading||timeStatsQuery.isLoading||statusProgressionQuery.isLoading||interviewTypeStatsQuery.isLoading,error:successRatesQuery.error||timeStatsQuery.error||statusProgressionQuery.error||interviewTypeStatsQuery.error};};export const useCompanyAnalytics=()=>{const companyStatsQuery=useCompanyStats();const topCompaniesQuery=useTopCompanies();const locationStatsQuery=useLocationStats();return{companyStats:companyStatsQuery,topCompanies:topCompaniesQuery,locationStats:locationStatsQuery,isLoading:companyStatsQuery.isLoading||topCompaniesQuery.isLoading||locationStatsQuery.isLoading,error:companyStatsQuery.error||topCompaniesQuery.error||locationStatsQuery.error};};// Utility hooks for specific use cases\nexport const useStatisticsForDateRange=(startDate,endDate)=>{const dateFrom=startDate.toISOString().split('T')[0]||'';const dateTo=endDate.toISOString().split('T')[0]||'';return useStatsByDateRange(dateFrom,dateTo);};export const useCurrentMonthStats=()=>{const now=new Date();const startOfMonth=new Date(now.getFullYear(),now.getMonth(),1);const endOfMonth=new Date(now.getFullYear(),now.getMonth()+1,0);return useStatisticsForDateRange(startOfMonth,endOfMonth);};export const useCurrentYearStats=()=>{const currentYear=new Date().getFullYear();return useMonthlyStats(currentYear);};export const useLast30DaysStats=()=>{const endDate=new Date();const startDate=new Date();startDate.setDate(startDate.getDate()-30);return useStatisticsForDateRange(startDate,endDate);};export const useLast90DaysStats=()=>{const endDate=new Date();const startDate=new Date();startDate.setDate(startDate.getDate()-90);return useStatisticsForDateRange(startDate,endDate);};","map":{"version":3,"names":["useQuery","statisticsService","queryKeys","useStatisticsOverview","queryKey","statistics","overview","queryFn","getOverview","staleTime","usePositionStats","positions","getPositionStats","useInterviewStats","interviews","getInterviewStats","useCompanyStats","companies","getCompanyStats","useDashboardSummary","dashboard","getDashboardSummary","refetchOnWindowFocus","useStatsByDateRange","dateFrom","dateTo","custom","getStatsByDateRange","enabled","useMonthlyStats","year","currentYear","Date","getFullYear","monthly","getMonthlyStats","useSuccessRates","all","getSuccessRates","useTimeStats","getTimeStats","useInterviewTrends","getInterviewTrends","useStatusProgression","getStatusProgression","useTopCompanies","limit","arguments","length","undefined","getTopCompanies","useInterviewTypeStats","getInterviewTypeStats","useWeeklyActivity","getWeeklyActivity","useApplicationSources","getApplicationSources","useSalaryStats","getSalaryStats","useLocationStats","getLocationStats","useCustomStats","filters","getCustomStats","Object","keys","some","key","useAnalyticsDashboard","overviewQuery","successRatesQuery","monthlyStatsQuery","topCompaniesQuery","successRates","monthlyStats","topCompanies","isLoading","error","useMainDashboard","summaryQuery","weeklyActivityQuery","interviewTrendsQuery","summary","weeklyActivity","interviewTrends","usePerformanceMetrics","timeStatsQuery","statusProgressionQuery","interviewTypeStatsQuery","timeStats","statusProgression","interviewTypeStats","useCompanyAnalytics","companyStatsQuery","locationStatsQuery","companyStats","locationStats","useStatisticsForDateRange","startDate","endDate","toISOString","split","useCurrentMonthStats","now","startOfMonth","getMonth","endOfMonth","useCurrentYearStats","useLast30DaysStats","setDate","getDate","useLast90DaysStats"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/hooks/useStatistics.ts"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\nimport { statisticsService } from '../services';\nimport { queryKeys } from '../lib/queryClient';\n\n// Query hooks\nexport const useStatisticsOverview = () => {\n  return useQuery({\n    queryKey: queryKeys.statistics.overview(),\n    queryFn: () => statisticsService.getOverview(),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n};\n\nexport const usePositionStats = () => {\n  return useQuery({\n    queryKey: queryKeys.statistics.positions(),\n    queryFn: () => statisticsService.getPositionStats(),\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const useInterviewStats = () => {\n  return useQuery({\n    queryKey: queryKeys.statistics.interviews(),\n    queryFn: () => statisticsService.getInterviewStats(),\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const useCompanyStats = () => {\n  return useQuery({\n    queryKey: queryKeys.statistics.companies(),\n    queryFn: () => statisticsService.getCompanyStats(),\n    staleTime: 10 * 60 * 1000, // 10 minutes for less frequently changing data\n  });\n};\n\nexport const useDashboardSummary = () => {\n  return useQuery({\n    queryKey: queryKeys.statistics.dashboard(),\n    queryFn: () => statisticsService.getDashboardSummary(),\n    staleTime: 2 * 60 * 1000, // 2 minutes for dashboard data\n    refetchOnWindowFocus: true, // Refetch when user returns to dashboard\n  });\n};\n\nexport const useStatsByDateRange = (dateFrom: string, dateTo: string) => {\n  return useQuery({\n    queryKey: queryKeys.statistics.custom({ dateFrom, dateTo }),\n    queryFn: () => statisticsService.getStatsByDateRange(dateFrom, dateTo),\n    enabled: !!dateFrom && !!dateTo,\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const useMonthlyStats = (year?: number) => {\n  const currentYear = year || new Date().getFullYear();\n  \n  return useQuery({\n    queryKey: queryKeys.statistics.monthly(currentYear),\n    queryFn: () => statisticsService.getMonthlyStats(currentYear),\n    staleTime: 10 * 60 * 1000,\n  });\n};\n\nexport const useSuccessRates = () => {\n  return useQuery({\n    queryKey: [...queryKeys.statistics.all, 'success-rates'],\n    queryFn: () => statisticsService.getSuccessRates(),\n    staleTime: 10 * 60 * 1000,\n  });\n};\n\nexport const useTimeStats = () => {\n  return useQuery({\n    queryKey: [...queryKeys.statistics.all, 'time-metrics'],\n    queryFn: () => statisticsService.getTimeStats(),\n    staleTime: 10 * 60 * 1000,\n  });\n};\n\nexport const useInterviewTrends = () => {\n  return useQuery({\n    queryKey: [...queryKeys.statistics.all, 'interview-trends'],\n    queryFn: () => statisticsService.getInterviewTrends(),\n    staleTime: 10 * 60 * 1000,\n  });\n};\n\nexport const useStatusProgression = () => {\n  return useQuery({\n    queryKey: [...queryKeys.statistics.all, 'status-progression'],\n    queryFn: () => statisticsService.getStatusProgression(),\n    staleTime: 15 * 60 * 1000, // 15 minutes for analytical data\n  });\n};\n\nexport const useTopCompanies = (limit: number = 10) => {\n  return useQuery({\n    queryKey: [...queryKeys.statistics.all, 'top-companies', limit],\n    queryFn: () => statisticsService.getTopCompanies(limit),\n    staleTime: 15 * 60 * 1000,\n  });\n};\n\nexport const useInterviewTypeStats = () => {\n  return useQuery({\n    queryKey: [...queryKeys.statistics.all, 'interview-types'],\n    queryFn: () => statisticsService.getInterviewTypeStats(),\n    staleTime: 10 * 60 * 1000,\n  });\n};\n\nexport const useWeeklyActivity = () => {\n  return useQuery({\n    queryKey: [...queryKeys.statistics.all, 'weekly-activity'],\n    queryFn: () => statisticsService.getWeeklyActivity(),\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const useApplicationSources = () => {\n  return useQuery({\n    queryKey: [...queryKeys.statistics.all, 'application-sources'],\n    queryFn: () => statisticsService.getApplicationSources(),\n    staleTime: 15 * 60 * 1000,\n  });\n};\n\nexport const useSalaryStats = () => {\n  return useQuery({\n    queryKey: [...queryKeys.statistics.all, 'salary-analysis'],\n    queryFn: () => statisticsService.getSalaryStats(),\n    staleTime: 15 * 60 * 1000,\n  });\n};\n\nexport const useLocationStats = () => {\n  return useQuery({\n    queryKey: [...queryKeys.statistics.all, 'locations'],\n    queryFn: () => statisticsService.getLocationStats(),\n    staleTime: 15 * 60 * 1000,\n  });\n};\n\nexport const useCustomStats = (filters: {\n  dateFrom?: string;\n  dateTo?: string;\n  companies?: string[];\n  statuses?: string[];\n  locations?: string[];\n}) => {\n  return useQuery({\n    queryKey: queryKeys.statistics.custom(filters),\n    queryFn: () => statisticsService.getCustomStats(filters),\n    enabled: Object.keys(filters).some(key => filters[key as keyof typeof filters] !== undefined),\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\n// Combined hooks for dashboard and analytics\nexport const useAnalyticsDashboard = () => {\n  const overviewQuery = useStatisticsOverview();\n  const successRatesQuery = useSuccessRates();\n  const monthlyStatsQuery = useMonthlyStats();\n  const topCompaniesQuery = useTopCompanies(5);\n\n  return {\n    overview: overviewQuery,\n    successRates: successRatesQuery,\n    monthlyStats: monthlyStatsQuery,\n    topCompanies: topCompaniesQuery,\n    isLoading: overviewQuery.isLoading || successRatesQuery.isLoading || \n               monthlyStatsQuery.isLoading || topCompaniesQuery.isLoading,\n    error: overviewQuery.error || successRatesQuery.error || \n           monthlyStatsQuery.error || topCompaniesQuery.error,\n  };\n};\n\nexport const useMainDashboard = () => {\n  const summaryQuery = useDashboardSummary();\n  const weeklyActivityQuery = useWeeklyActivity();\n  const interviewTrendsQuery = useInterviewTrends();\n\n  return {\n    summary: summaryQuery,\n    weeklyActivity: weeklyActivityQuery,\n    interviewTrends: interviewTrendsQuery,\n    isLoading: summaryQuery.isLoading || weeklyActivityQuery.isLoading || interviewTrendsQuery.isLoading,\n    error: summaryQuery.error || weeklyActivityQuery.error || interviewTrendsQuery.error,\n  };\n};\n\nexport const usePerformanceMetrics = () => {\n  const successRatesQuery = useSuccessRates();\n  const timeStatsQuery = useTimeStats();\n  const statusProgressionQuery = useStatusProgression();\n  const interviewTypeStatsQuery = useInterviewTypeStats();\n\n  return {\n    successRates: successRatesQuery,\n    timeStats: timeStatsQuery,\n    statusProgression: statusProgressionQuery,\n    interviewTypeStats: interviewTypeStatsQuery,\n    isLoading: successRatesQuery.isLoading || timeStatsQuery.isLoading || \n               statusProgressionQuery.isLoading || interviewTypeStatsQuery.isLoading,\n    error: successRatesQuery.error || timeStatsQuery.error || \n           statusProgressionQuery.error || interviewTypeStatsQuery.error,\n  };\n};\n\nexport const useCompanyAnalytics = () => {\n  const companyStatsQuery = useCompanyStats();\n  const topCompaniesQuery = useTopCompanies();\n  const locationStatsQuery = useLocationStats();\n\n  return {\n    companyStats: companyStatsQuery,\n    topCompanies: topCompaniesQuery,\n    locationStats: locationStatsQuery,\n    isLoading: companyStatsQuery.isLoading || topCompaniesQuery.isLoading || locationStatsQuery.isLoading,\n    error: companyStatsQuery.error || topCompaniesQuery.error || locationStatsQuery.error,\n  };\n};\n\n// Utility hooks for specific use cases\nexport const useStatisticsForDateRange = (startDate: Date, endDate: Date) => {\n  const dateFrom = startDate.toISOString().split('T')[0] || '';\n  const dateTo = endDate.toISOString().split('T')[0] || '';\n  \n  return useStatsByDateRange(dateFrom, dateTo);\n};\n\nexport const useCurrentMonthStats = () => {\n  const now = new Date();\n  const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n  const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n  \n  return useStatisticsForDateRange(startOfMonth, endOfMonth);\n};\n\nexport const useCurrentYearStats = () => {\n  const currentYear = new Date().getFullYear();\n  return useMonthlyStats(currentYear);\n};\n\nexport const useLast30DaysStats = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return useStatisticsForDateRange(startDate, endDate);\n};\n\nexport const useLast90DaysStats = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 90);\n  \n  return useStatisticsForDateRange(startDate, endDate);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}