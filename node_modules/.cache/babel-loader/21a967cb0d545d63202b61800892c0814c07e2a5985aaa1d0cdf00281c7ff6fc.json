{"ast":null,"code":"import{apiRequest}from'./httpClient';class StatisticsService{/**\n   * Get comprehensive position and interview statistics\n   */async getOverview(){return apiRequest.get('/statistics');}/**\n   * Get position statistics only\n   */async getPositionStats(){return apiRequest.get('/statistics/positions');}/**\n   * Get interview statistics only\n   */async getInterviewStats(){return apiRequest.get('/statistics/interviews');}/**\n   * Get company-wise statistics\n   */async getCompanyStats(){return apiRequest.get('/statistics/companies');}/**\n   * Get statistics for a specific date range\n   */async getStatsByDateRange(dateFrom,dateTo){const params=new URLSearchParams({date_from:dateFrom,date_to:dateTo});return apiRequest.get(\"/statistics?\".concat(params.toString()));}/**\n   * Get monthly statistics for the current year\n   */async getMonthlyStats(year){const currentYear=year||new Date().getFullYear();return apiRequest.get(\"/statistics/monthly/\".concat(currentYear));}/**\n   * Get success rate statistics\n   */async getSuccessRates(){return apiRequest.get('/statistics/success-rates');}/**\n   * Get time-based statistics (how long processes take)\n   */async getTimeStats(){return apiRequest.get('/statistics/time-metrics');}/**\n   * Get interview outcome trends\n   */async getInterviewTrends(){return apiRequest.get('/statistics/interview-trends');}/**\n   * Get position status progression\n   */async getStatusProgression(){return apiRequest.get('/statistics/status-progression');}/**\n   * Get top performing companies (highest success rates)\n   */async getTopCompanies(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;return apiRequest.get(\"/statistics/top-companies?limit=\".concat(limit));}/**\n   * Get interview type effectiveness\n   */async getInterviewTypeStats(){return apiRequest.get('/statistics/interview-types');}/**\n   * Get weekly activity summary\n   */async getWeeklyActivity(){return apiRequest.get('/statistics/weekly-activity');}/**\n   * Get application source effectiveness (if tracking sources)\n   */async getApplicationSources(){return apiRequest.get('/statistics/application-sources');}/**\n   * Get salary range statistics\n   */async getSalaryStats(){return apiRequest.get('/statistics/salary-analysis');}/**\n   * Get location-based statistics\n   */async getLocationStats(){return apiRequest.get('/statistics/locations');}/**\n   * Get custom statistics with filters\n   */async getCustomStats(filters){var _filters$companies,_filters$statuses,_filters$locations;const params=new URLSearchParams();if(filters.dateFrom){params.append('date_from',filters.dateFrom);}if(filters.dateTo){params.append('date_to',filters.dateTo);}if((_filters$companies=filters.companies)!==null&&_filters$companies!==void 0&&_filters$companies.length){filters.companies.forEach(company=>params.append('companies',company));}if((_filters$statuses=filters.statuses)!==null&&_filters$statuses!==void 0&&_filters$statuses.length){filters.statuses.forEach(status=>params.append('statuses',status));}if((_filters$locations=filters.locations)!==null&&_filters$locations!==void 0&&_filters$locations.length){filters.locations.forEach(location=>params.append('locations',location));}const queryString=params.toString();const url=queryString?\"/statistics/custom?\".concat(queryString):'/statistics/custom';return apiRequest.get(url);}/**\n   * Export statistics data\n   */async exportStats(){let format=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'json';const response=await apiRequest.get(\"/statistics/export?format=\".concat(format),{responseType:'blob'});return response;}/**\n   * Get dashboard summary (key metrics for dashboard display)\n   */async getDashboardSummary(){return apiRequest.get('/statistics/dashboard');}}// Export singleton instance\nexport const statisticsService=new StatisticsService();export default statisticsService;","map":{"version":3,"names":["apiRequest","StatisticsService","getOverview","get","getPositionStats","getInterviewStats","getCompanyStats","getStatsByDateRange","dateFrom","dateTo","params","URLSearchParams","date_from","date_to","concat","toString","getMonthlyStats","year","currentYear","Date","getFullYear","getSuccessRates","getTimeStats","getInterviewTrends","getStatusProgression","getTopCompanies","limit","arguments","length","undefined","getInterviewTypeStats","getWeeklyActivity","getApplicationSources","getSalaryStats","getLocationStats","getCustomStats","filters","_filters$companies","_filters$statuses","_filters$locations","append","companies","forEach","company","statuses","status","locations","location","queryString","url","exportStats","format","response","responseType","getDashboardSummary","statisticsService"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/services/statisticsService.ts"],"sourcesContent":["import { apiRequest } from './httpClient';\nimport { PositionStatistics } from '../types';\n\nclass StatisticsService {\n  /**\n   * Get comprehensive position and interview statistics\n   */\n  async getOverview(): Promise<PositionStatistics> {\n    return apiRequest.get<PositionStatistics>('/statistics');\n  }\n\n  /**\n   * Get position statistics only\n   */\n  async getPositionStats(): Promise<{\n    total_positions: number;\n    positions_by_status: Record<string, number>;\n  }> {\n    return apiRequest.get('/statistics/positions');\n  }\n\n  /**\n   * Get interview statistics only\n   */\n  async getInterviewStats(): Promise<{\n    total_interviews: number;\n    interviews_by_outcome: Record<string, number>;\n    interviews_by_type: Record<string, number>;\n  }> {\n    return apiRequest.get('/statistics/interviews');\n  }\n\n  /**\n   * Get company-wise statistics\n   */\n  async getCompanyStats(): Promise<Array<{\n    name: string;\n    position_count: number;\n    interview_count: number;\n  }>> {\n    return apiRequest.get('/statistics/companies');\n  }\n\n  /**\n   * Get statistics for a specific date range\n   */\n  async getStatsByDateRange(dateFrom: string, dateTo: string): Promise<PositionStatistics> {\n    const params = new URLSearchParams({\n      date_from: dateFrom,\n      date_to: dateTo,\n    });\n    \n    return apiRequest.get<PositionStatistics>(`/statistics?${params.toString()}`);\n  }\n\n  /**\n   * Get monthly statistics for the current year\n   */\n  async getMonthlyStats(year?: number): Promise<Array<{\n    month: string;\n    positions_applied: number;\n    interviews_conducted: number;\n    offers_received: number;\n  }>> {\n    const currentYear = year || new Date().getFullYear();\n    return apiRequest.get(`/statistics/monthly/${currentYear}`);\n  }\n\n  /**\n   * Get success rate statistics\n   */\n  async getSuccessRates(): Promise<{\n    application_to_interview_rate: number;\n    interview_to_offer_rate: number;\n    overall_success_rate: number;\n    average_interviews_per_position: number;\n  }> {\n    return apiRequest.get('/statistics/success-rates');\n  }\n\n  /**\n   * Get time-based statistics (how long processes take)\n   */\n  async getTimeStats(): Promise<{\n    average_days_to_first_interview: number;\n    average_days_to_offer: number;\n    average_interview_process_duration: number;\n  }> {\n    return apiRequest.get('/statistics/time-metrics');\n  }\n\n  /**\n   * Get interview outcome trends\n   */\n  async getInterviewTrends(): Promise<Array<{\n    date: string;\n    passed: number;\n    failed: number;\n    pending: number;\n    cancelled: number;\n  }>> {\n    return apiRequest.get('/statistics/interview-trends');\n  }\n\n  /**\n   * Get position status progression\n   */\n  async getStatusProgression(): Promise<Array<{\n    from_status: string;\n    to_status: string;\n    count: number;\n    average_days: number;\n  }>> {\n    return apiRequest.get('/statistics/status-progression');\n  }\n\n  /**\n   * Get top performing companies (highest success rates)\n   */\n  async getTopCompanies(limit: number = 10): Promise<Array<{\n    company: string;\n    applications: number;\n    interviews: number;\n    offers: number;\n    success_rate: number;\n  }>> {\n    return apiRequest.get(`/statistics/top-companies?limit=${limit}`);\n  }\n\n  /**\n   * Get interview type effectiveness\n   */\n  async getInterviewTypeStats(): Promise<Array<{\n    type: string;\n    total_conducted: number;\n    pass_rate: number;\n    average_duration: number;\n  }>> {\n    return apiRequest.get('/statistics/interview-types');\n  }\n\n  /**\n   * Get weekly activity summary\n   */\n  async getWeeklyActivity(): Promise<Array<{\n    week_start: string;\n    positions_applied: number;\n    interviews_scheduled: number;\n    interviews_completed: number;\n    offers_received: number;\n  }>> {\n    return apiRequest.get('/statistics/weekly-activity');\n  }\n\n  /**\n   * Get application source effectiveness (if tracking sources)\n   */\n  async getApplicationSources(): Promise<Array<{\n    source: string;\n    applications: number;\n    success_rate: number;\n  }>> {\n    return apiRequest.get('/statistics/application-sources');\n  }\n\n  /**\n   * Get salary range statistics\n   */\n  async getSalaryStats(): Promise<{\n    average_salary_applied: number;\n    average_salary_offered: number;\n    salary_ranges: Array<{\n      range: string;\n      count: number;\n      success_rate: number;\n    }>;\n  }> {\n    return apiRequest.get('/statistics/salary-analysis');\n  }\n\n  /**\n   * Get location-based statistics\n   */\n  async getLocationStats(): Promise<Array<{\n    location: string;\n    applications: number;\n    success_rate: number;\n    average_salary: number;\n  }>> {\n    return apiRequest.get('/statistics/locations');\n  }\n\n  /**\n   * Get custom statistics with filters\n   */\n  async getCustomStats(filters: {\n    dateFrom?: string;\n    dateTo?: string;\n    companies?: string[];\n    statuses?: string[];\n    locations?: string[];\n  }): Promise<PositionStatistics> {\n    const params = new URLSearchParams();\n    \n    if (filters.dateFrom) {\n      params.append('date_from', filters.dateFrom);\n    }\n    if (filters.dateTo) {\n      params.append('date_to', filters.dateTo);\n    }\n    if (filters.companies?.length) {\n      filters.companies.forEach(company => params.append('companies', company));\n    }\n    if (filters.statuses?.length) {\n      filters.statuses.forEach(status => params.append('statuses', status));\n    }\n    if (filters.locations?.length) {\n      filters.locations.forEach(location => params.append('locations', location));\n    }\n    \n    const queryString = params.toString();\n    const url = queryString ? `/statistics/custom?${queryString}` : '/statistics/custom';\n    \n    return apiRequest.get<PositionStatistics>(url);\n  }\n\n  /**\n   * Export statistics data\n   */\n  async exportStats(format: 'csv' | 'json' = 'json'): Promise<Blob> {\n    const response = await apiRequest.get(`/statistics/export?format=${format}`, {\n      responseType: 'blob',\n    });\n    return response as Blob;\n  }\n\n  /**\n   * Get dashboard summary (key metrics for dashboard display)\n   */\n  async getDashboardSummary(): Promise<{\n    total_positions: number;\n    active_applications: number;\n    upcoming_interviews: number;\n    recent_offers: number;\n    this_week_activity: {\n      applications: number;\n      interviews: number;\n    };\n    success_rates: {\n      interview_rate: number;\n      offer_rate: number;\n    };\n  }> {\n    return apiRequest.get('/statistics/dashboard');\n  }\n}\n\n// Export singleton instance\nexport const statisticsService = new StatisticsService();\nexport default statisticsService;"],"mappings":"AAAA,OAASA,UAAU,KAAQ,cAAc,CAGzC,KAAM,CAAAC,iBAAkB,CACtB;AACF;AACA,KACE,KAAM,CAAAC,WAAWA,CAAA,CAAgC,CAC/C,MAAO,CAAAF,UAAU,CAACG,GAAG,CAAqB,aAAa,CAAC,CAC1D,CAEA;AACF;AACA,KACE,KAAM,CAAAC,gBAAgBA,CAAA,CAGnB,CACD,MAAO,CAAAJ,UAAU,CAACG,GAAG,CAAC,uBAAuB,CAAC,CAChD,CAEA;AACF;AACA,KACE,KAAM,CAAAE,iBAAiBA,CAAA,CAIpB,CACD,MAAO,CAAAL,UAAU,CAACG,GAAG,CAAC,wBAAwB,CAAC,CACjD,CAEA;AACF;AACA,KACE,KAAM,CAAAG,eAAeA,CAAA,CAIjB,CACF,MAAO,CAAAN,UAAU,CAACG,GAAG,CAAC,uBAAuB,CAAC,CAChD,CAEA;AACF;AACA,KACE,KAAM,CAAAI,mBAAmBA,CAACC,QAAgB,CAAEC,MAAc,CAA+B,CACvF,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,eAAe,CAAC,CACjCC,SAAS,CAAEJ,QAAQ,CACnBK,OAAO,CAAEJ,MACX,CAAC,CAAC,CAEF,MAAO,CAAAT,UAAU,CAACG,GAAG,gBAAAW,MAAA,CAAoCJ,MAAM,CAACK,QAAQ,CAAC,CAAC,CAAE,CAAC,CAC/E,CAEA;AACF;AACA,KACE,KAAM,CAAAC,eAAeA,CAACC,IAAa,CAK/B,CACF,KAAM,CAAAC,WAAW,CAAGD,IAAI,EAAI,GAAI,CAAAE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACpD,MAAO,CAAApB,UAAU,CAACG,GAAG,wBAAAW,MAAA,CAAwBI,WAAW,CAAE,CAAC,CAC7D,CAEA;AACF;AACA,KACE,KAAM,CAAAG,eAAeA,CAAA,CAKlB,CACD,MAAO,CAAArB,UAAU,CAACG,GAAG,CAAC,2BAA2B,CAAC,CACpD,CAEA;AACF;AACA,KACE,KAAM,CAAAmB,YAAYA,CAAA,CAIf,CACD,MAAO,CAAAtB,UAAU,CAACG,GAAG,CAAC,0BAA0B,CAAC,CACnD,CAEA;AACF;AACA,KACE,KAAM,CAAAoB,kBAAkBA,CAAA,CAMpB,CACF,MAAO,CAAAvB,UAAU,CAACG,GAAG,CAAC,8BAA8B,CAAC,CACvD,CAEA;AACF;AACA,KACE,KAAM,CAAAqB,oBAAoBA,CAAA,CAKtB,CACF,MAAO,CAAAxB,UAAU,CAACG,GAAG,CAAC,gCAAgC,CAAC,CACzD,CAEA;AACF;AACA,KACE,KAAM,CAAAsB,eAAeA,CAAA,CAMjB,IANkB,CAAAC,KAAa,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAOtC,MAAO,CAAA3B,UAAU,CAACG,GAAG,oCAAAW,MAAA,CAAoCY,KAAK,CAAE,CAAC,CACnE,CAEA;AACF;AACA,KACE,KAAM,CAAAI,qBAAqBA,CAAA,CAKvB,CACF,MAAO,CAAA9B,UAAU,CAACG,GAAG,CAAC,6BAA6B,CAAC,CACtD,CAEA;AACF;AACA,KACE,KAAM,CAAA4B,iBAAiBA,CAAA,CAMnB,CACF,MAAO,CAAA/B,UAAU,CAACG,GAAG,CAAC,6BAA6B,CAAC,CACtD,CAEA;AACF;AACA,KACE,KAAM,CAAA6B,qBAAqBA,CAAA,CAIvB,CACF,MAAO,CAAAhC,UAAU,CAACG,GAAG,CAAC,iCAAiC,CAAC,CAC1D,CAEA;AACF;AACA,KACE,KAAM,CAAA8B,cAAcA,CAAA,CAQjB,CACD,MAAO,CAAAjC,UAAU,CAACG,GAAG,CAAC,6BAA6B,CAAC,CACtD,CAEA;AACF;AACA,KACE,KAAM,CAAA+B,gBAAgBA,CAAA,CAKlB,CACF,MAAO,CAAAlC,UAAU,CAACG,GAAG,CAAC,uBAAuB,CAAC,CAChD,CAEA;AACF;AACA,KACE,KAAM,CAAAgC,cAAcA,CAACC,OAMpB,CAA+B,KAAAC,kBAAA,CAAAC,iBAAA,CAAAC,kBAAA,CAC9B,KAAM,CAAA7B,MAAM,CAAG,GAAI,CAAAC,eAAe,CAAC,CAAC,CAEpC,GAAIyB,OAAO,CAAC5B,QAAQ,CAAE,CACpBE,MAAM,CAAC8B,MAAM,CAAC,WAAW,CAAEJ,OAAO,CAAC5B,QAAQ,CAAC,CAC9C,CACA,GAAI4B,OAAO,CAAC3B,MAAM,CAAE,CAClBC,MAAM,CAAC8B,MAAM,CAAC,SAAS,CAAEJ,OAAO,CAAC3B,MAAM,CAAC,CAC1C,CACA,IAAA4B,kBAAA,CAAID,OAAO,CAACK,SAAS,UAAAJ,kBAAA,WAAjBA,kBAAA,CAAmBT,MAAM,CAAE,CAC7BQ,OAAO,CAACK,SAAS,CAACC,OAAO,CAACC,OAAO,EAAIjC,MAAM,CAAC8B,MAAM,CAAC,WAAW,CAAEG,OAAO,CAAC,CAAC,CAC3E,CACA,IAAAL,iBAAA,CAAIF,OAAO,CAACQ,QAAQ,UAAAN,iBAAA,WAAhBA,iBAAA,CAAkBV,MAAM,CAAE,CAC5BQ,OAAO,CAACQ,QAAQ,CAACF,OAAO,CAACG,MAAM,EAAInC,MAAM,CAAC8B,MAAM,CAAC,UAAU,CAAEK,MAAM,CAAC,CAAC,CACvE,CACA,IAAAN,kBAAA,CAAIH,OAAO,CAACU,SAAS,UAAAP,kBAAA,WAAjBA,kBAAA,CAAmBX,MAAM,CAAE,CAC7BQ,OAAO,CAACU,SAAS,CAACJ,OAAO,CAACK,QAAQ,EAAIrC,MAAM,CAAC8B,MAAM,CAAC,WAAW,CAAEO,QAAQ,CAAC,CAAC,CAC7E,CAEA,KAAM,CAAAC,WAAW,CAAGtC,MAAM,CAACK,QAAQ,CAAC,CAAC,CACrC,KAAM,CAAAkC,GAAG,CAAGD,WAAW,uBAAAlC,MAAA,CAAyBkC,WAAW,EAAK,oBAAoB,CAEpF,MAAO,CAAAhD,UAAU,CAACG,GAAG,CAAqB8C,GAAG,CAAC,CAChD,CAEA;AACF;AACA,KACE,KAAM,CAAAC,WAAWA,CAAA,CAAiD,IAAhD,CAAAC,MAAsB,CAAAxB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,CAC/C,KAAM,CAAAyB,QAAQ,CAAG,KAAM,CAAApD,UAAU,CAACG,GAAG,8BAAAW,MAAA,CAA8BqC,MAAM,EAAI,CAC3EE,YAAY,CAAE,MAChB,CAAC,CAAC,CACF,MAAO,CAAAD,QAAQ,CACjB,CAEA;AACF;AACA,KACE,KAAM,CAAAE,mBAAmBA,CAAA,CAatB,CACD,MAAO,CAAAtD,UAAU,CAACG,GAAG,CAAC,uBAAuB,CAAC,CAChD,CACF,CAEA;AACA,MAAO,MAAM,CAAAoD,iBAAiB,CAAG,GAAI,CAAAtD,iBAAiB,CAAC,CAAC,CACxD,cAAe,CAAAsD,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}