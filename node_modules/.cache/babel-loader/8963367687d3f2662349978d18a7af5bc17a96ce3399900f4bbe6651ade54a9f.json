{"ast":null,"code":"import _objectSpread from\"/home/haim/github/job-search-tracker-api/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useQuery,useMutation,useQueryClient}from'@tanstack/react-query';import{toast}from'react-hot-toast';import{positionService}from'../services';import{queryKeys,invalidateQueries,optimisticUpdates}from'../lib/queryClient';// Query hooks\nexport const usePositions=filters=>{return useQuery({queryKey:queryKeys.positions.list(filters),queryFn:()=>positionService.getPositions(filters),staleTime:2*60*1000,// 2 minutes for frequently updated data\nselect:data=>data});};export const usePosition=id=>{return useQuery({queryKey:queryKeys.positions.detail(id),queryFn:()=>positionService.getPosition(id),enabled:!!id,staleTime:5*60*1000// 5 minutes\n});};export const usePositionSummary=()=>{return useQuery({queryKey:queryKeys.positions.summary(),queryFn:()=>positionService.getPositionSummary(),staleTime:5*60*1000});};export const useRecentPositions=()=>{return useQuery({queryKey:queryKeys.positions.recent(),queryFn:()=>positionService.getRecentPositions(),staleTime:5*60*1000});};export const usePositionsByStatus=status=>{return useQuery({queryKey:queryKeys.positions.byStatus(status),queryFn:()=>positionService.getPositionsByStatus(status),enabled:!!status,staleTime:2*60*1000});};export const usePositionsByCompany=company=>{return useQuery({queryKey:queryKeys.positions.byCompany(company),queryFn:()=>positionService.getPositionsByCompany(company),enabled:!!company,staleTime:5*60*1000});};// Mutation hooks\nexport const useCreatePosition=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:data=>positionService.createPosition(data),onMutate:async newPosition=>{// Cancel outgoing refetches\nawait queryClient.cancelQueries({queryKey:queryKeys.positions.lists()});// Snapshot previous value\nconst previousPositions=queryClient.getQueriesData({queryKey:queryKeys.positions.lists()});// Optimistically update\nconst tempPosition=_objectSpread(_objectSpread({id:\"temp-\".concat(Date.now())},newPosition),{},{user_id:'current-user',created_at:new Date().toISOString(),updated_at:new Date().toISOString(),interviews:[]});optimisticUpdates.addPosition(tempPosition);return{previousPositions};},onError:(_err,_newPosition,context)=>{// Rollback on error\nif(context!==null&&context!==void 0&&context.previousPositions){context.previousPositions.forEach(_ref=>{let[queryKey,data]=_ref;queryClient.setQueryData(queryKey,data);});}toast.error('Failed to create position');},onSuccess:_data=>{toast.success('Position created successfully');invalidateQueries.positions();},onSettled:()=>{// Always refetch after mutation\ninvalidateQueries.positions();}});};export const useUpdatePosition=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:_ref2=>{let{id,data}=_ref2;return positionService.updatePosition(id,data);},onMutate:async _ref3=>{let{id,data}=_ref3;// Cancel outgoing refetches\nawait queryClient.cancelQueries({queryKey:queryKeys.positions.detail(id)});// Snapshot previous value\nconst previousPosition=queryClient.getQueryData(queryKeys.positions.detail(id));// Optimistically update\noptimisticUpdates.updatePosition(id,data);return{previousPosition,id};},onError:(_err,_ref4,context)=>{let{id}=_ref4;// Rollback on error\nif(context!==null&&context!==void 0&&context.previousPosition){queryClient.setQueryData(queryKeys.positions.detail(id),context.previousPosition);}toast.error('Failed to update position');},onSuccess:_data=>{toast.success('Position updated successfully');},onSettled:(_data,_error,_ref5)=>{let{id}=_ref5;// Always refetch after mutation\ninvalidateQueries.position(id);}});};export const useUpdatePositionStatus=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:_ref6=>{let{id,status}=_ref6;return positionService.updatePositionStatus(id,status);},onMutate:async _ref7=>{let{id,status}=_ref7;await queryClient.cancelQueries({queryKey:queryKeys.positions.detail(id)});const previousPosition=queryClient.getQueryData(queryKeys.positions.detail(id));optimisticUpdates.updatePosition(id,{status});return{previousPosition,id};},onError:(_err,_ref8,context)=>{let{id}=_ref8;if(context!==null&&context!==void 0&&context.previousPosition){queryClient.setQueryData(queryKeys.positions.detail(id),context.previousPosition);}toast.error('Failed to update position status');},onSuccess:()=>{toast.success('Position status updated');},onSettled:(_data,_error,_ref9)=>{let{id}=_ref9;invalidateQueries.position(id);}});};export const useDeletePosition=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:id=>positionService.deletePosition(id),onMutate:async id=>{await queryClient.cancelQueries({queryKey:queryKeys.positions.lists()});const previousPositions=queryClient.getQueriesData({queryKey:queryKeys.positions.lists()});optimisticUpdates.removePosition(id);return{previousPositions};},onError:(_err,_id,context)=>{if(context!==null&&context!==void 0&&context.previousPositions){context.previousPositions.forEach(_ref0=>{let[queryKey,data]=_ref0;queryClient.setQueryData(queryKey,data);});}toast.error('Failed to delete position');},onSuccess:()=>{toast.success('Position deleted successfully');},onSettled:()=>{invalidateQueries.positions();}});};export const useDuplicatePosition=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:id=>positionService.duplicatePosition(id),onSuccess:_data=>{toast.success('Position duplicated successfully');invalidateQueries.positions();},onError:()=>{toast.error('Failed to duplicate position');}});};export const useArchivePosition=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:id=>positionService.archivePosition(id),onMutate:async id=>{await queryClient.cancelQueries({queryKey:queryKeys.positions.detail(id)});const previousPosition=queryClient.getQueryData(queryKeys.positions.detail(id));optimisticUpdates.updatePosition(id,{status:'withdrawn'});return{previousPosition,id};},onError:(_err,id,context)=>{if(context!==null&&context!==void 0&&context.previousPosition){queryClient.setQueryData(queryKeys.positions.detail(id),context.previousPosition);}toast.error('Failed to archive position');},onSuccess:()=>{toast.success('Position archived successfully');},onSettled:(_data,_error,id)=>{invalidateQueries.position(id);}});};// Prefetch hooks\nexport const usePrefetchPosition=()=>{const queryClient=useQueryClient();return id=>{queryClient.prefetchQuery({queryKey:queryKeys.positions.detail(id),queryFn:()=>positionService.getPosition(id),staleTime:5*60*1000});};};// Combined hooks for common patterns\nexport const usePositionWithInterviews=id=>{const positionQuery=usePosition(id);// Prefetch interviews when position loads\nconst queryClient=useQueryClient();if(positionQuery.data&&!positionQuery.isLoading){queryClient.prefetchQuery({queryKey:queryKeys.interviews.list(id),queryFn:()=>import('../services').then(_ref1=>{let{interviewService}=_ref1;return interviewService.getInterviews(id);}),staleTime:2*60*1000});}return positionQuery;};export const usePositionsWithPrefetch=filters=>{const positionsQuery=usePositions(filters);const prefetchPosition=usePrefetchPosition();return _objectSpread(_objectSpread({},positionsQuery),{},{prefetchPosition});};","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","toast","positionService","queryKeys","invalidateQueries","optimisticUpdates","usePositions","filters","queryKey","positions","list","queryFn","getPositions","staleTime","select","data","usePosition","id","detail","getPosition","enabled","usePositionSummary","summary","getPositionSummary","useRecentPositions","recent","getRecentPositions","usePositionsByStatus","status","byStatus","getPositionsByStatus","usePositionsByCompany","company","byCompany","getPositionsByCompany","useCreatePosition","queryClient","mutationFn","createPosition","onMutate","newPosition","cancelQueries","lists","previousPositions","getQueriesData","tempPosition","_objectSpread","concat","Date","now","user_id","created_at","toISOString","updated_at","interviews","addPosition","onError","_err","_newPosition","context","forEach","_ref","setQueryData","error","onSuccess","_data","success","onSettled","useUpdatePosition","_ref2","updatePosition","_ref3","previousPosition","getQueryData","_ref4","_error","_ref5","position","useUpdatePositionStatus","_ref6","updatePositionStatus","_ref7","_ref8","_ref9","useDeletePosition","deletePosition","removePosition","_id","_ref0","useDuplicatePosition","duplicatePosition","useArchivePosition","archivePosition","usePrefetchPosition","prefetchQuery","usePositionWithInterviews","positionQuery","isLoading","then","_ref1","interviewService","getInterviews","usePositionsWithPrefetch","positionsQuery","prefetchPosition"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/hooks/usePositions.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-hot-toast';\nimport { positionService } from '../services';\nimport { queryKeys, invalidateQueries, optimisticUpdates } from '../lib/queryClient';\nimport {\n  PositionListResponse,\n  CreatePositionData,\n  UpdatePositionData,\n  PositionFilters,\n} from '../types';\n\n// Query hooks\nexport const usePositions = (filters?: PositionFilters) => {\n  return useQuery({\n    queryKey: queryKeys.positions.list(filters),\n    queryFn: () => positionService.getPositions(filters),\n    staleTime: 2 * 60 * 1000, // 2 minutes for frequently updated data\n    select: (data: PositionListResponse) => data,\n  });\n};\n\nexport const usePosition = (id: string) => {\n  return useQuery({\n    queryKey: queryKeys.positions.detail(id),\n    queryFn: () => positionService.getPosition(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n};\n\nexport const usePositionSummary = () => {\n  return useQuery({\n    queryKey: queryKeys.positions.summary(),\n    queryFn: () => positionService.getPositionSummary(),\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const useRecentPositions = () => {\n  return useQuery({\n    queryKey: queryKeys.positions.recent(),\n    queryFn: () => positionService.getRecentPositions(),\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const usePositionsByStatus = (status: string) => {\n  return useQuery({\n    queryKey: queryKeys.positions.byStatus(status),\n    queryFn: () => positionService.getPositionsByStatus(status),\n    enabled: !!status,\n    staleTime: 2 * 60 * 1000,\n  });\n};\n\nexport const usePositionsByCompany = (company: string) => {\n  return useQuery({\n    queryKey: queryKeys.positions.byCompany(company),\n    queryFn: () => positionService.getPositionsByCompany(company),\n    enabled: !!company,\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\n// Mutation hooks\nexport const useCreatePosition = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: CreatePositionData) => positionService.createPosition(data),\n    onMutate: async (newPosition) => {\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries({ queryKey: queryKeys.positions.lists() });\n\n      // Snapshot previous value\n      const previousPositions = queryClient.getQueriesData({ queryKey: queryKeys.positions.lists() });\n\n      // Optimistically update\n      const tempPosition = {\n        id: `temp-${Date.now()}`,\n        ...newPosition,\n        user_id: 'current-user',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        interviews: [],\n      };\n\n      optimisticUpdates.addPosition(tempPosition);\n\n      return { previousPositions };\n    },\n    onError: (_err, _newPosition, context) => {\n      // Rollback on error\n      if (context?.previousPositions) {\n        context.previousPositions.forEach(([queryKey, data]) => {\n          queryClient.setQueryData(queryKey, data);\n        });\n      }\n      toast.error('Failed to create position');\n    },\n    onSuccess: (_data) => {\n      toast.success('Position created successfully');\n      invalidateQueries.positions();\n    },\n    onSettled: () => {\n      // Always refetch after mutation\n      invalidateQueries.positions();\n    },\n  });\n};\n\nexport const useUpdatePosition = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdatePositionData }) =>\n      positionService.updatePosition(id, data),\n    onMutate: async ({ id, data }) => {\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries({ queryKey: queryKeys.positions.detail(id) });\n\n      // Snapshot previous value\n      const previousPosition = queryClient.getQueryData(queryKeys.positions.detail(id));\n\n      // Optimistically update\n      optimisticUpdates.updatePosition(id, data);\n\n      return { previousPosition, id };\n    },\n    onError: (_err, { id }, context) => {\n      // Rollback on error\n      if (context?.previousPosition) {\n        queryClient.setQueryData(queryKeys.positions.detail(id), context.previousPosition);\n      }\n      toast.error('Failed to update position');\n    },\n    onSuccess: (_data) => {\n      toast.success('Position updated successfully');\n    },\n    onSettled: (_data, _error, { id }) => {\n      // Always refetch after mutation\n      invalidateQueries.position(id);\n    },\n  });\n};\n\nexport const useUpdatePositionStatus = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, status }: { id: string; status: string }) =>\n      positionService.updatePositionStatus(id, status),\n    onMutate: async ({ id, status }) => {\n      await queryClient.cancelQueries({ queryKey: queryKeys.positions.detail(id) });\n      const previousPosition = queryClient.getQueryData(queryKeys.positions.detail(id));\n      \n      optimisticUpdates.updatePosition(id, { status });\n      \n      return { previousPosition, id };\n    },\n    onError: (_err, { id }, context) => {\n      if (context?.previousPosition) {\n        queryClient.setQueryData(queryKeys.positions.detail(id), context.previousPosition);\n      }\n      toast.error('Failed to update position status');\n    },\n    onSuccess: () => {\n      toast.success('Position status updated');\n    },\n    onSettled: (_data, _error, { id }) => {\n      invalidateQueries.position(id);\n    },\n  });\n};\n\nexport const useDeletePosition = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => positionService.deletePosition(id),\n    onMutate: async (id) => {\n      await queryClient.cancelQueries({ queryKey: queryKeys.positions.lists() });\n      const previousPositions = queryClient.getQueriesData({ queryKey: queryKeys.positions.lists() });\n      \n      optimisticUpdates.removePosition(id);\n      \n      return { previousPositions };\n    },\n    onError: (_err, _id, context) => {\n      if (context?.previousPositions) {\n        context.previousPositions.forEach(([queryKey, data]) => {\n          queryClient.setQueryData(queryKey, data);\n        });\n      }\n      toast.error('Failed to delete position');\n    },\n    onSuccess: () => {\n      toast.success('Position deleted successfully');\n    },\n    onSettled: () => {\n      invalidateQueries.positions();\n    },\n  });\n};\n\nexport const useDuplicatePosition = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => positionService.duplicatePosition(id),\n    onSuccess: (_data) => {\n      toast.success('Position duplicated successfully');\n      invalidateQueries.positions();\n    },\n    onError: () => {\n      toast.error('Failed to duplicate position');\n    },\n  });\n};\n\nexport const useArchivePosition = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => positionService.archivePosition(id),\n    onMutate: async (id) => {\n      await queryClient.cancelQueries({ queryKey: queryKeys.positions.detail(id) });\n      const previousPosition = queryClient.getQueryData(queryKeys.positions.detail(id));\n      \n      optimisticUpdates.updatePosition(id, { status: 'withdrawn' });\n      \n      return { previousPosition, id };\n    },\n    onError: (_err, id, context) => {\n      if (context?.previousPosition) {\n        queryClient.setQueryData(queryKeys.positions.detail(id), context.previousPosition);\n      }\n      toast.error('Failed to archive position');\n    },\n    onSuccess: () => {\n      toast.success('Position archived successfully');\n    },\n    onSettled: (_data, _error, id) => {\n      invalidateQueries.position(id);\n    },\n  });\n};\n\n// Prefetch hooks\nexport const usePrefetchPosition = () => {\n  const queryClient = useQueryClient();\n\n  return (id: string) => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.positions.detail(id),\n      queryFn: () => positionService.getPosition(id),\n      staleTime: 5 * 60 * 1000,\n    });\n  };\n};\n\n// Combined hooks for common patterns\nexport const usePositionWithInterviews = (id: string) => {\n  const positionQuery = usePosition(id);\n  \n  // Prefetch interviews when position loads\n  const queryClient = useQueryClient();\n  \n  if (positionQuery.data && !positionQuery.isLoading) {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.interviews.list(id),\n      queryFn: () => import('../services').then(({ interviewService }) => interviewService.getInterviews(id)),\n      staleTime: 2 * 60 * 1000,\n    });\n  }\n  \n  return positionQuery;\n};\n\nexport const usePositionsWithPrefetch = (filters?: PositionFilters) => {\n  const positionsQuery = usePositions(filters);\n  const prefetchPosition = usePrefetchPosition();\n  \n  return {\n    ...positionsQuery,\n    prefetchPosition,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}