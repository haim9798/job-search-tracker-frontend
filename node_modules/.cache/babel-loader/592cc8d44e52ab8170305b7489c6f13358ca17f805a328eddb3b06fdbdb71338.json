{"ast":null,"code":"import{tokenManager}from'./tokenManager';// Session storage keys\nconst SESSION_STATE_KEY='session_state';const LAST_ACTIVITY_KEY='last_activity';// Session timeout (24 hours)\nconst SESSION_TIMEOUT=24*60*60*1000;export class SessionPersistence{/**\n   * Save session state\n   */saveSessionState(isAuthenticated,userId,userEmail){try{const sessionState={isAuthenticated,lastActivity:Date.now(),userId,userEmail};localStorage.setItem(SESSION_STATE_KEY,JSON.stringify(sessionState));localStorage.setItem(LAST_ACTIVITY_KEY,Date.now().toString());}catch(error){console.error('Failed to save session state:',error);}}/**\n   * Get session state\n   */getSessionState(){try{const sessionStateStr=localStorage.getItem(SESSION_STATE_KEY);return sessionStateStr?JSON.parse(sessionStateStr):null;}catch(error){console.error('Failed to get session state:',error);return null;}}/**\n   * Check if session is valid (not expired)\n   */isSessionValid(){try{const sessionState=this.getSessionState();if(!sessionState){return false;}const now=Date.now();const timeSinceLastActivity=now-sessionState.lastActivity;return timeSinceLastActivity<SESSION_TIMEOUT;}catch(error){console.error('Failed to check session validity:',error);return false;}}/**\n   * Update last activity timestamp\n   */updateLastActivity(){try{const sessionState=this.getSessionState();if(sessionState){sessionState.lastActivity=Date.now();localStorage.setItem(SESSION_STATE_KEY,JSON.stringify(sessionState));}localStorage.setItem(LAST_ACTIVITY_KEY,Date.now().toString());}catch(error){console.error('Failed to update last activity:',error);}}/**\n   * Clear session state\n   */clearSessionState(){try{localStorage.removeItem(SESSION_STATE_KEY);localStorage.removeItem(LAST_ACTIVITY_KEY);}catch(error){console.error('Failed to clear session state:',error);}}/**\n   * Get time since last activity\n   */getTimeSinceLastActivity(){try{const lastActivityStr=localStorage.getItem(LAST_ACTIVITY_KEY);if(!lastActivityStr){return Infinity;}const lastActivity=parseInt(lastActivityStr,10);return Date.now()-lastActivity;}catch(error){console.error('Failed to get time since last activity:',error);return Infinity;}}/**\n   * Check if session should be restored\n   */shouldRestoreSession(){const sessionState=this.getSessionState();const hasTokens=tokenManager.isAuthenticated();const isSessionValid=this.isSessionValid();return!!(sessionState!==null&&sessionState!==void 0&&sessionState.isAuthenticated&&hasTokens&&isSessionValid);}/**\n   * Set up activity tracking\n   */setupActivityTracking(){const events=['mousedown','mousemove','keypress','scroll','touchstart','click'];let activityTimeout;const updateActivity=()=>{// Debounce activity updates to avoid excessive localStorage writes\nclearTimeout(activityTimeout);activityTimeout=setTimeout(()=>{this.updateLastActivity();},1000);};// Add event listeners\nevents.forEach(event=>{document.addEventListener(event,updateActivity,{passive:true});});// Cleanup function\nreturn()=>{clearTimeout(activityTimeout);events.forEach(event=>{document.removeEventListener(event,updateActivity);});};}/**\n   * Set up session timeout warning\n   */setupSessionTimeoutWarning(warningCallback){let warningTimeBeforeExpiry=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5*60*1000;let warningTimeout;let checkInterval;const checkSessionExpiry=()=>{const timeSinceLastActivity=this.getTimeSinceLastActivity();const timeUntilExpiry=SESSION_TIMEOUT-timeSinceLastActivity;if(timeUntilExpiry<=warningTimeBeforeExpiry&&timeUntilExpiry>0){warningCallback();clearInterval(checkInterval);// Stop checking after warning\n}else if(timeUntilExpiry<=0){// Session expired\nthis.clearSessionState();tokenManager.clearTokens();clearInterval(checkInterval);}};// Check every minute\ncheckInterval=setInterval(checkSessionExpiry,60*1000);// Cleanup function\nreturn()=>{clearTimeout(warningTimeout);clearInterval(checkInterval);};}/**\n   * Extend session (reset activity timer)\n   */extendSession(){this.updateLastActivity();}/**\n   * Get session info for debugging\n   */getSessionInfo(){const sessionState=this.getSessionState();const timeSinceLastActivity=this.getTimeSinceLastActivity();return{sessionState,isValid:this.isSessionValid(),timeSinceLastActivity,timeUntilExpiry:SESSION_TIMEOUT-timeSinceLastActivity,shouldRestore:this.shouldRestoreSession()};}}// Export singleton instance\nexport const sessionPersistence=new SessionPersistence();export default sessionPersistence;","map":{"version":3,"names":["tokenManager","SESSION_STATE_KEY","LAST_ACTIVITY_KEY","SESSION_TIMEOUT","SessionPersistence","saveSessionState","isAuthenticated","userId","userEmail","sessionState","lastActivity","Date","now","localStorage","setItem","JSON","stringify","toString","error","console","getSessionState","sessionStateStr","getItem","parse","isSessionValid","timeSinceLastActivity","updateLastActivity","clearSessionState","removeItem","getTimeSinceLastActivity","lastActivityStr","Infinity","parseInt","shouldRestoreSession","hasTokens","setupActivityTracking","events","activityTimeout","updateActivity","clearTimeout","setTimeout","forEach","event","document","addEventListener","passive","removeEventListener","setupSessionTimeoutWarning","warningCallback","warningTimeBeforeExpiry","arguments","length","undefined","warningTimeout","checkInterval","checkSessionExpiry","timeUntilExpiry","clearInterval","clearTokens","setInterval","extendSession","getSessionInfo","isValid","shouldRestore","sessionPersistence"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/utils/sessionPersistence.ts"],"sourcesContent":["import { tokenManager } from './tokenManager';\n\n// Session storage keys\nconst SESSION_STATE_KEY = 'session_state';\nconst LAST_ACTIVITY_KEY = 'last_activity';\n\n// Session timeout (24 hours)\nconst SESSION_TIMEOUT = 24 * 60 * 60 * 1000;\n\ninterface SessionState {\n  isAuthenticated: boolean;\n  lastActivity: number;\n  userId?: string | undefined;\n  userEmail?: string | undefined;\n}\n\nexport class SessionPersistence {\n  /**\n   * Save session state\n   */\n  saveSessionState(isAuthenticated: boolean, userId?: string, userEmail?: string): void {\n    try {\n      const sessionState: SessionState = {\n        isAuthenticated,\n        lastActivity: Date.now(),\n        userId,\n        userEmail,\n      };\n\n      localStorage.setItem(SESSION_STATE_KEY, JSON.stringify(sessionState));\n      localStorage.setItem(LAST_ACTIVITY_KEY, Date.now().toString());\n    } catch (error) {\n      console.error('Failed to save session state:', error);\n    }\n  }\n\n  /**\n   * Get session state\n   */\n  getSessionState(): SessionState | null {\n    try {\n      const sessionStateStr = localStorage.getItem(SESSION_STATE_KEY);\n      return sessionStateStr ? JSON.parse(sessionStateStr) : null;\n    } catch (error) {\n      console.error('Failed to get session state:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if session is valid (not expired)\n   */\n  isSessionValid(): boolean {\n    try {\n      const sessionState = this.getSessionState();\n      if (!sessionState) {\n        return false;\n      }\n\n      const now = Date.now();\n      const timeSinceLastActivity = now - sessionState.lastActivity;\n\n      return timeSinceLastActivity < SESSION_TIMEOUT;\n    } catch (error) {\n      console.error('Failed to check session validity:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Update last activity timestamp\n   */\n  updateLastActivity(): void {\n    try {\n      const sessionState = this.getSessionState();\n      if (sessionState) {\n        sessionState.lastActivity = Date.now();\n        localStorage.setItem(SESSION_STATE_KEY, JSON.stringify(sessionState));\n      }\n      localStorage.setItem(LAST_ACTIVITY_KEY, Date.now().toString());\n    } catch (error) {\n      console.error('Failed to update last activity:', error);\n    }\n  }\n\n  /**\n   * Clear session state\n   */\n  clearSessionState(): void {\n    try {\n      localStorage.removeItem(SESSION_STATE_KEY);\n      localStorage.removeItem(LAST_ACTIVITY_KEY);\n    } catch (error) {\n      console.error('Failed to clear session state:', error);\n    }\n  }\n\n  /**\n   * Get time since last activity\n   */\n  getTimeSinceLastActivity(): number {\n    try {\n      const lastActivityStr = localStorage.getItem(LAST_ACTIVITY_KEY);\n      if (!lastActivityStr) {\n        return Infinity;\n      }\n\n      const lastActivity = parseInt(lastActivityStr, 10);\n      return Date.now() - lastActivity;\n    } catch (error) {\n      console.error('Failed to get time since last activity:', error);\n      return Infinity;\n    }\n  }\n\n  /**\n   * Check if session should be restored\n   */\n  shouldRestoreSession(): boolean {\n    const sessionState = this.getSessionState();\n    const hasTokens = tokenManager.isAuthenticated();\n    const isSessionValid = this.isSessionValid();\n\n    return !!(sessionState?.isAuthenticated && hasTokens && isSessionValid);\n  }\n\n  /**\n   * Set up activity tracking\n   */\n  setupActivityTracking(): () => void {\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    let activityTimeout: NodeJS.Timeout;\n\n    const updateActivity = () => {\n      // Debounce activity updates to avoid excessive localStorage writes\n      clearTimeout(activityTimeout);\n      activityTimeout = setTimeout(() => {\n        this.updateLastActivity();\n      }, 1000);\n    };\n\n    // Add event listeners\n    events.forEach(event => {\n      document.addEventListener(event, updateActivity, { passive: true });\n    });\n\n    // Cleanup function\n    return () => {\n      clearTimeout(activityTimeout);\n      events.forEach(event => {\n        document.removeEventListener(event, updateActivity);\n      });\n    };\n  }\n\n  /**\n   * Set up session timeout warning\n   */\n  setupSessionTimeoutWarning(\n    warningCallback: () => void,\n    warningTimeBeforeExpiry: number = 5 * 60 * 1000 // 5 minutes\n  ): () => void {\n    let warningTimeout: NodeJS.Timeout;\n    let checkInterval: NodeJS.Timeout;\n\n    const checkSessionExpiry = () => {\n      const timeSinceLastActivity = this.getTimeSinceLastActivity();\n      const timeUntilExpiry = SESSION_TIMEOUT - timeSinceLastActivity;\n\n      if (timeUntilExpiry <= warningTimeBeforeExpiry && timeUntilExpiry > 0) {\n        warningCallback();\n        clearInterval(checkInterval); // Stop checking after warning\n      } else if (timeUntilExpiry <= 0) {\n        // Session expired\n        this.clearSessionState();\n        tokenManager.clearTokens();\n        clearInterval(checkInterval);\n      }\n    };\n\n    // Check every minute\n    checkInterval = setInterval(checkSessionExpiry, 60 * 1000);\n\n    // Cleanup function\n    return () => {\n      clearTimeout(warningTimeout);\n      clearInterval(checkInterval);\n    };\n  }\n\n  /**\n   * Extend session (reset activity timer)\n   */\n  extendSession(): void {\n    this.updateLastActivity();\n  }\n\n  /**\n   * Get session info for debugging\n   */\n  getSessionInfo(): {\n    sessionState: SessionState | null;\n    isValid: boolean;\n    timeSinceLastActivity: number;\n    timeUntilExpiry: number;\n    shouldRestore: boolean;\n  } {\n    const sessionState = this.getSessionState();\n    const timeSinceLastActivity = this.getTimeSinceLastActivity();\n    \n    return {\n      sessionState,\n      isValid: this.isSessionValid(),\n      timeSinceLastActivity,\n      timeUntilExpiry: SESSION_TIMEOUT - timeSinceLastActivity,\n      shouldRestore: this.shouldRestoreSession(),\n    };\n  }\n}\n\n// Export singleton instance\nexport const sessionPersistence = new SessionPersistence();\nexport default sessionPersistence;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}