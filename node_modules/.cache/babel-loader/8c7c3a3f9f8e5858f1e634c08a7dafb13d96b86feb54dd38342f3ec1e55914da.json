{"ast":null,"code":"import { apiRequest } from './httpClient';\nclass PositionService {\n  /**\n   * Get all positions with optional filtering\n   */\n  async getPositions(filters) {\n    const params = new URLSearchParams();\n    if (filters) {\n      if (filters.status) params.append('status', filters.status);\n      if (filters.company) params.append('company', filters.company);\n      if (filters.search) params.append('search', filters.search);\n      if (filters.date_from) params.append('date_from', filters.date_from);\n      if (filters.date_to) params.append('date_to', filters.date_to);\n    }\n    const queryString = params.toString();\n    const url = queryString ? `/positions?${queryString}` : '/positions';\n    return apiRequest.get(url);\n  }\n\n  /**\n   * Get a single position by ID\n   */\n  async getPosition(id) {\n    return apiRequest.get(`/positions/${id}`);\n  }\n\n  /**\n   * Create a new position\n   */\n  async createPosition(data) {\n    return apiRequest.post('/positions', data);\n  }\n\n  /**\n   * Update an existing position\n   */\n  async updatePosition(id, data) {\n    return apiRequest.put(`/positions/${id}`, data);\n  }\n\n  /**\n   * Partially update a position (PATCH)\n   */\n  async patchPosition(id, data) {\n    return apiRequest.patch(`/positions/${id}`, data);\n  }\n\n  /**\n   * Delete a position\n   */\n  async deletePosition(id) {\n    return apiRequest.delete(`/positions/${id}`);\n  }\n\n  /**\n   * Update position status only\n   */\n  async updatePositionStatus(id, status) {\n    return apiRequest.patch(`/positions/${id}`, {\n      status\n    });\n  }\n\n  /**\n   * Get positions by status\n   */\n  async getPositionsByStatus(status) {\n    const response = await this.getPositions({\n      status\n    });\n    return response.positions;\n  }\n\n  /**\n   * Search positions by query\n   */\n  async searchPositions(query) {\n    const response = await this.getPositions({\n      search: query\n    });\n    return response.positions;\n  }\n\n  /**\n   * Get positions for a specific company\n   */\n  async getPositionsByCompany(company) {\n    const response = await this.getPositions({\n      company\n    });\n    return response.positions;\n  }\n\n  /**\n   * Get positions within date range\n   */\n  async getPositionsByDateRange(dateFrom, dateTo) {\n    const response = await this.getPositions({\n      date_from: dateFrom,\n      date_to: dateTo\n    });\n    return response.positions;\n  }\n\n  /**\n   * Get recent positions (last 30 days)\n   */\n  async getRecentPositions() {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const response = await this.getPositions({\n      date_from: thirtyDaysAgo.toISOString().split('T')[0]\n    });\n    return response.positions;\n  }\n\n  /**\n   * Duplicate a position (create copy)\n   */\n  async duplicatePosition(id) {\n    const originalPosition = await this.getPosition(id);\n    const duplicateData = {\n      title: `${originalPosition.title} (Copy)`,\n      company: originalPosition.company,\n      description: originalPosition.description,\n      location: originalPosition.location,\n      salary_range: originalPosition.salary_range,\n      status: 'applied',\n      // Reset status for duplicate\n      application_date: new Date().toISOString().split('T')[0]\n    };\n    return this.createPosition(duplicateData);\n  }\n\n  /**\n   * Archive a position (soft delete by changing status)\n   */\n  async archivePosition(id) {\n    return this.updatePositionStatus(id, 'withdrawn');\n  }\n\n  /**\n   * Get position summary statistics\n   */\n  async getPositionSummary() {\n    const [allPositions, recentPositions] = await Promise.all([this.getPositions(), this.getRecentPositions()]);\n    const byStatus = allPositions.positions.reduce((acc, position) => {\n      acc[position.status] = (acc[position.status] || 0) + 1;\n      return acc;\n    }, {});\n    return {\n      total: allPositions.positions.length,\n      byStatus,\n      recentCount: recentPositions.length\n    };\n  }\n}\n\n// Export singleton instance\nexport const positionService = new PositionService();\nexport default positionService;","map":{"version":3,"names":["apiRequest","PositionService","getPositions","filters","params","URLSearchParams","status","append","company","search","date_from","date_to","queryString","toString","url","get","getPosition","id","createPosition","data","post","updatePosition","put","patchPosition","patch","deletePosition","delete","updatePositionStatus","getPositionsByStatus","response","positions","searchPositions","query","getPositionsByCompany","getPositionsByDateRange","dateFrom","dateTo","getRecentPositions","thirtyDaysAgo","Date","setDate","getDate","toISOString","split","duplicatePosition","originalPosition","duplicateData","title","description","location","salary_range","application_date","archivePosition","getPositionSummary","allPositions","recentPositions","Promise","all","byStatus","reduce","acc","position","total","length","recentCount","positionService"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/services/positionService.ts"],"sourcesContent":["import { apiRequest } from './httpClient';\nimport {\n  Position,\n  PositionListResponse,\n  CreatePositionData,\n  UpdatePositionData,\n  PositionFilters,\n} from '../types';\n\nclass PositionService {\n  /**\n   * Get all positions with optional filtering\n   */\n  async getPositions(filters?: PositionFilters): Promise<PositionListResponse> {\n    const params = new URLSearchParams();\n    \n    if (filters) {\n      if (filters.status) params.append('status', filters.status);\n      if (filters.company) params.append('company', filters.company);\n      if (filters.search) params.append('search', filters.search);\n      if (filters.date_from) params.append('date_from', filters.date_from);\n      if (filters.date_to) params.append('date_to', filters.date_to);\n    }\n\n    const queryString = params.toString();\n    const url = queryString ? `/positions?${queryString}` : '/positions';\n    \n    return apiRequest.get<PositionListResponse>(url);\n  }\n\n  /**\n   * Get a single position by ID\n   */\n  async getPosition(id: string): Promise<Position> {\n    return apiRequest.get<Position>(`/positions/${id}`);\n  }\n\n  /**\n   * Create a new position\n   */\n  async createPosition(data: CreatePositionData): Promise<Position> {\n    return apiRequest.post<Position>('/positions', data);\n  }\n\n  /**\n   * Update an existing position\n   */\n  async updatePosition(id: string, data: UpdatePositionData): Promise<Position> {\n    return apiRequest.put<Position>(`/positions/${id}`, data);\n  }\n\n  /**\n   * Partially update a position (PATCH)\n   */\n  async patchPosition(id: string, data: Partial<UpdatePositionData>): Promise<Position> {\n    return apiRequest.patch<Position>(`/positions/${id}`, data);\n  }\n\n  /**\n   * Delete a position\n   */\n  async deletePosition(id: string): Promise<void> {\n    return apiRequest.delete<void>(`/positions/${id}`);\n  }\n\n  /**\n   * Update position status only\n   */\n  async updatePositionStatus(id: string, status: string): Promise<Position> {\n    return apiRequest.patch<Position>(`/positions/${id}`, { status });\n  }\n\n  /**\n   * Get positions by status\n   */\n  async getPositionsByStatus(status: string): Promise<Position[]> {\n    const response = await this.getPositions({ status });\n    return response.positions;\n  }\n\n  /**\n   * Search positions by query\n   */\n  async searchPositions(query: string): Promise<Position[]> {\n    const response = await this.getPositions({ search: query });\n    return response.positions;\n  }\n\n  /**\n   * Get positions for a specific company\n   */\n  async getPositionsByCompany(company: string): Promise<Position[]> {\n    const response = await this.getPositions({ company });\n    return response.positions;\n  }\n\n  /**\n   * Get positions within date range\n   */\n  async getPositionsByDateRange(dateFrom: string, dateTo: string): Promise<Position[]> {\n    const response = await this.getPositions({ \n      date_from: dateFrom, \n      date_to: dateTo \n    });\n    return response.positions;\n  }\n\n  /**\n   * Get recent positions (last 30 days)\n   */\n  async getRecentPositions(): Promise<Position[]> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    const response = await this.getPositions({\n      date_from: thirtyDaysAgo.toISOString().split('T')[0],\n    });\n    \n    return response.positions;\n  }\n\n  /**\n   * Duplicate a position (create copy)\n   */\n  async duplicatePosition(id: string): Promise<Position> {\n    const originalPosition = await this.getPosition(id);\n    \n    const duplicateData: CreatePositionData = {\n      title: `${originalPosition.title} (Copy)`,\n      company: originalPosition.company,\n      description: originalPosition.description,\n      location: originalPosition.location,\n      salary_range: originalPosition.salary_range,\n      status: 'applied', // Reset status for duplicate\n      application_date: new Date().toISOString().split('T')[0],\n    };\n\n    return this.createPosition(duplicateData);\n  }\n\n  /**\n   * Archive a position (soft delete by changing status)\n   */\n  async archivePosition(id: string): Promise<Position> {\n    return this.updatePositionStatus(id, 'withdrawn');\n  }\n\n  /**\n   * Get position summary statistics\n   */\n  async getPositionSummary(): Promise<{\n    total: number;\n    byStatus: Record<string, number>;\n    recentCount: number;\n  }> {\n    const [allPositions, recentPositions] = await Promise.all([\n      this.getPositions(),\n      this.getRecentPositions(),\n    ]);\n\n    const byStatus = allPositions.positions.reduce((acc, position) => {\n      acc[position.status] = (acc[position.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return {\n      total: allPositions.positions.length,\n      byStatus,\n      recentCount: recentPositions.length,\n    };\n  }\n}\n\n// Export singleton instance\nexport const positionService = new PositionService();\nexport default positionService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}