{"ast":null,"code":"import _objectSpread from\"/home/haim/github/job-search-tracker-api/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{QueryClient,QueryCache,MutationCache}from'@tanstack/react-query';import{toast}from'react-hot-toast';// Create query client with comprehensive configuration\nexport const queryClient=new QueryClient({defaultOptions:{queries:{// Stale time: how long data is considered fresh\nstaleTime:5*60*1000,// 5 minutes\n// Cache time: how long data stays in cache after becoming unused\ncacheTime:10*60*1000,// 10 minutes\n// Retry configuration\nretry:(failureCount,error)=>{// Don't retry on 4xx errors (client errors)\nif(error&&typeof error==='object'&&'code'in error){const apiError=error;if(apiError.code.startsWith('4')){return false;}}// Retry up to 3 times for other errors\nreturn failureCount<3;},retryDelay:attemptIndex=>Math.min(1000*2**attemptIndex,30000),// Don't refetch on window focus by default\nrefetchOnWindowFocus:false,// Refetch on reconnect\nrefetchOnReconnect:true,// Background refetch interval (disabled by default)\nrefetchInterval:false},mutations:{// Retry mutations once on failure\nretry:1,retryDelay:1000}},queryCache:new QueryCache({onError:(error,query)=>{// Global error handling for queries\nconsole.error('Query error:',error,query);if(error&&typeof error==='object'&&'message'in error){const apiError=error;// Don't show toast for background refetches\nif(query.state.fetchStatus!=='fetching'||query.state.dataUpdatedAt===0){toast.error(apiError.message||'An error occurred while fetching data');}}},onSuccess:(data,query)=>{// Optional: Log successful queries in development\nif(process.env.NODE_ENV==='development'){console.log('Query success:',query.queryKey,data);}}}),mutationCache:new MutationCache({onError:(error,variables,context,mutation)=>{// Global error handling for mutations\nconsole.error('Mutation error:',error,variables,mutation);if(error&&typeof error==='object'&&'message'in error){const apiError=error;toast.error(apiError.message||'An error occurred while saving data');}},onSuccess:(data,variables,context,mutation)=>{// Optional: Show success toast for mutations\nif(process.env.NODE_ENV==='development'){console.log('Mutation success:',mutation.options.mutationKey,data);}}})});// Query key factory for consistent key generation\nexport const queryKeys={// Auth keys\nauth:{user:['auth','user'],verify:['auth','verify']},// Position keys\npositions:{all:['positions'],lists:()=>[...queryKeys.positions.all,'list'],list:filters=>[...queryKeys.positions.lists(),filters],details:()=>[...queryKeys.positions.all,'detail'],detail:id=>[...queryKeys.positions.details(),id],summary:()=>[...queryKeys.positions.all,'summary'],byStatus:status=>[...queryKeys.positions.all,'status',status],byCompany:company=>[...queryKeys.positions.all,'company',company],recent:()=>[...queryKeys.positions.all,'recent']},// Interview keys\ninterviews:{all:['interviews'],lists:()=>[...queryKeys.interviews.all,'list'],list:positionId=>[...queryKeys.interviews.lists(),positionId],details:()=>[...queryKeys.interviews.all,'detail'],detail:id=>[...queryKeys.interviews.details(),id],upcoming:()=>[...queryKeys.interviews.all,'upcoming'],today:()=>[...queryKeys.interviews.all,'today'],overdue:()=>[...queryKeys.interviews.all,'overdue'],byOutcome:outcome=>[...queryKeys.interviews.all,'outcome',outcome],stats:positionId=>[...queryKeys.interviews.all,'stats',positionId]},// Statistics keys\nstatistics:{all:['statistics'],overview:()=>[...queryKeys.statistics.all,'overview'],positions:()=>[...queryKeys.statistics.all,'positions'],interviews:()=>[...queryKeys.statistics.all,'interviews'],companies:()=>[...queryKeys.statistics.all,'companies'],dashboard:()=>[...queryKeys.statistics.all,'dashboard'],monthly:year=>[...queryKeys.statistics.all,'monthly',year],custom:filters=>[...queryKeys.statistics.all,'custom',filters]}};// Cache invalidation utilities\nexport const invalidateQueries={// Invalidate all position-related queries\npositions:()=>{queryClient.invalidateQueries(queryKeys.positions.all);queryClient.invalidateQueries(queryKeys.statistics.all);},// Invalidate specific position\nposition:id=>{queryClient.invalidateQueries(queryKeys.positions.detail(id));queryClient.invalidateQueries(queryKeys.positions.lists());queryClient.invalidateQueries(queryKeys.interviews.list(id));queryClient.invalidateQueries(queryKeys.statistics.all);},// Invalidate all interview-related queries\ninterviews:()=>{queryClient.invalidateQueries(queryKeys.interviews.all);queryClient.invalidateQueries(queryKeys.statistics.all);},// Invalidate specific interview\ninterview:(id,positionId)=>{queryClient.invalidateQueries(queryKeys.interviews.detail(id));if(positionId){queryClient.invalidateQueries(queryKeys.interviews.list(positionId));queryClient.invalidateQueries(queryKeys.positions.detail(positionId));}queryClient.invalidateQueries(queryKeys.interviews.upcoming());queryClient.invalidateQueries(queryKeys.interviews.today());queryClient.invalidateQueries(queryKeys.statistics.all);},// Invalidate all statistics\nstatistics:()=>{queryClient.invalidateQueries(queryKeys.statistics.all);},// Invalidate all data (nuclear option)\nall:()=>{queryClient.invalidateQueries();}};// Prefetch utilities\nexport const prefetchQueries={// Prefetch position details when hovering over position card\npositionDetails:id=>{queryClient.prefetchQuery({queryKey:queryKeys.positions.detail(id),queryFn:()=>import('../services').then(_ref=>{let{positionService}=_ref;return positionService.getPosition(id);}),staleTime:2*60*1000// 2 minutes\n});},// Prefetch interviews when viewing position details\npositionInterviews:positionId=>{queryClient.prefetchQuery({queryKey:queryKeys.interviews.list(positionId),queryFn:()=>import('../services').then(_ref2=>{let{interviewService}=_ref2;return interviewService.getInterviews(positionId);}),staleTime:2*60*1000});},// Prefetch dashboard data\ndashboard:()=>{queryClient.prefetchQuery({queryKey:queryKeys.statistics.dashboard(),queryFn:()=>import('../services').then(_ref3=>{let{statisticsService}=_ref3;return statisticsService.getDashboardSummary();}),staleTime:5*60*1000});}};// Optimistic update utilities\nexport const optimisticUpdates={// Optimistically update position in cache\nupdatePosition:(id,updates)=>{queryClient.setQueryData(queryKeys.positions.detail(id),old=>{if(!old){return old;}return _objectSpread(_objectSpread(_objectSpread({},old),updates),{},{updated_at:new Date().toISOString()});});// Also update in lists\nqueryClient.setQueriesData({queryKey:queryKeys.positions.lists()},old=>{if(!(old!==null&&old!==void 0&&old.positions)){return old;}return _objectSpread(_objectSpread({},old),{},{positions:old.positions.map(position=>position.id===id?_objectSpread(_objectSpread(_objectSpread({},position),updates),{},{updated_at:new Date().toISOString()}):position)});});},// Optimistically update interview in cache\nupdateInterview:(id,positionId,updates)=>{queryClient.setQueryData(queryKeys.interviews.detail(id),old=>{if(!old){return old;}return _objectSpread(_objectSpread(_objectSpread({},old),updates),{},{updated_at:new Date().toISOString()});});// Update in position's interview list\nqueryClient.setQueryData(queryKeys.interviews.list(positionId),old=>{if(!old){return old;}return old.map(interview=>interview.id===id?_objectSpread(_objectSpread(_objectSpread({},interview),updates),{},{updated_at:new Date().toISOString()}):interview);});},// Optimistically add new position\naddPosition:newPosition=>{queryClient.setQueriesData({queryKey:queryKeys.positions.lists()},old=>{if(!(old!==null&&old!==void 0&&old.positions)){return old;}return _objectSpread(_objectSpread({},old),{},{positions:[newPosition,...old.positions],total:old.total+1});});},// Optimistically remove position\nremovePosition:id=>{queryClient.setQueriesData({queryKey:queryKeys.positions.lists()},old=>{if(!(old!==null&&old!==void 0&&old.positions)){return old;}return _objectSpread(_objectSpread({},old),{},{positions:old.positions.filter(position=>position.id!==id),total:Math.max(0,old.total-1)});});}};// Background sync utilities\nexport const backgroundSync={// Start background sync for active queries\nstart:()=>{const interval=setInterval(()=>{// Refetch stale queries that are currently being observed\nqueryClient.refetchQueries({type:'active',stale:true});},5*60*1000);// Every 5 minutes\nreturn()=>clearInterval(interval);},// Sync specific data types\nsyncPositions:()=>{queryClient.refetchQueries({queryKey:queryKeys.positions.all,type:'active'});},syncInterviews:()=>{queryClient.refetchQueries({queryKey:queryKeys.interviews.all,type:'active'});},syncStatistics:()=>{queryClient.refetchQueries({queryKey:queryKeys.statistics.all,type:'active'});}};export default queryClient;","map":{"version":3,"names":["QueryClient","QueryCache","MutationCache","toast","queryClient","defaultOptions","queries","staleTime","cacheTime","retry","failureCount","error","apiError","code","startsWith","retryDelay","attemptIndex","Math","min","refetchOnWindowFocus","refetchOnReconnect","refetchInterval","mutations","queryCache","onError","query","console","state","fetchStatus","dataUpdatedAt","message","onSuccess","data","process","env","NODE_ENV","log","queryKey","mutationCache","variables","context","mutation","options","mutationKey","queryKeys","auth","user","verify","positions","all","lists","list","filters","details","detail","id","summary","byStatus","status","byCompany","company","recent","interviews","positionId","upcoming","today","overdue","byOutcome","outcome","stats","statistics","overview","companies","dashboard","monthly","year","custom","invalidateQueries","position","interview","prefetchQueries","positionDetails","prefetchQuery","queryFn","then","_ref","positionService","getPosition","positionInterviews","_ref2","interviewService","getInterviews","_ref3","statisticsService","getDashboardSummary","optimisticUpdates","updatePosition","updates","setQueryData","old","_objectSpread","updated_at","Date","toISOString","setQueriesData","map","updateInterview","addPosition","newPosition","total","removePosition","filter","max","backgroundSync","start","interval","setInterval","refetchQueries","type","stale","clearInterval","syncPositions","syncInterviews","syncStatistics"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/lib/queryClient.ts"],"sourcesContent":["import { QueryClient, QueryCache, MutationCache } from '@tanstack/react-query';\nimport { toast } from 'react-hot-toast';\nimport { ApiError } from '../types';\n\n// Create query client with comprehensive configuration\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // Stale time: how long data is considered fresh\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      // Cache time: how long data stays in cache after becoming unused\n      cacheTime: 10 * 60 * 1000, // 10 minutes\n      // Retry configuration\n      retry: (failureCount, error) => {\n        // Don't retry on 4xx errors (client errors)\n        if (error && typeof error === 'object' && 'code' in error) {\n          const apiError = error as ApiError;\n          if (apiError.code.startsWith('4')) {\n            return false;\n          }\n        }\n        // Retry up to 3 times for other errors\n        return failureCount < 3;\n      },\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n      // Don't refetch on window focus by default\n      refetchOnWindowFocus: false,\n      // Refetch on reconnect\n      refetchOnReconnect: true,\n      // Background refetch interval (disabled by default)\n      refetchInterval: false,\n    },\n    mutations: {\n      // Retry mutations once on failure\n      retry: 1,\n      retryDelay: 1000,\n    },\n  },\n  queryCache: new QueryCache({\n    onError: (error, query) => {\n      // Global error handling for queries\n      console.error('Query error:', error, query);\n      \n      if (error && typeof error === 'object' && 'message' in error) {\n        const apiError = error as ApiError;\n        // Don't show toast for background refetches\n        if (query.state.fetchStatus !== 'fetching' || query.state.dataUpdatedAt === 0) {\n          toast.error(apiError.message || 'An error occurred while fetching data');\n        }\n      }\n    },\n    onSuccess: (data, query) => {\n      // Optional: Log successful queries in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Query success:', query.queryKey, data);\n      }\n    },\n  }),\n  mutationCache: new MutationCache({\n    onError: (error, variables, context, mutation) => {\n      // Global error handling for mutations\n      console.error('Mutation error:', error, variables, mutation);\n      \n      if (error && typeof error === 'object' && 'message' in error) {\n        const apiError = error as ApiError;\n        toast.error(apiError.message || 'An error occurred while saving data');\n      }\n    },\n    onSuccess: (data, variables, context, mutation) => {\n      // Optional: Show success toast for mutations\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Mutation success:', mutation.options.mutationKey, data);\n      }\n    },\n  }),\n});\n\n// Query key factory for consistent key generation\nexport const queryKeys = {\n  // Auth keys\n  auth: {\n    user: ['auth', 'user'] as const,\n    verify: ['auth', 'verify'] as const,\n  },\n  \n  // Position keys\n  positions: {\n    all: ['positions'] as const,\n    lists: () => [...queryKeys.positions.all, 'list'] as const,\n    list: (filters?: any) => [...queryKeys.positions.lists(), filters] as const,\n    details: () => [...queryKeys.positions.all, 'detail'] as const,\n    detail: (id: string) => [...queryKeys.positions.details(), id] as const,\n    summary: () => [...queryKeys.positions.all, 'summary'] as const,\n    byStatus: (status: string) => [...queryKeys.positions.all, 'status', status] as const,\n    byCompany: (company: string) => [...queryKeys.positions.all, 'company', company] as const,\n    recent: () => [...queryKeys.positions.all, 'recent'] as const,\n  },\n  \n  // Interview keys\n  interviews: {\n    all: ['interviews'] as const,\n    lists: () => [...queryKeys.interviews.all, 'list'] as const,\n    list: (positionId?: string) => [...queryKeys.interviews.lists(), positionId] as const,\n    details: () => [...queryKeys.interviews.all, 'detail'] as const,\n    detail: (id: string) => [...queryKeys.interviews.details(), id] as const,\n    upcoming: () => [...queryKeys.interviews.all, 'upcoming'] as const,\n    today: () => [...queryKeys.interviews.all, 'today'] as const,\n    overdue: () => [...queryKeys.interviews.all, 'overdue'] as const,\n    byOutcome: (outcome: string) => [...queryKeys.interviews.all, 'outcome', outcome] as const,\n    stats: (positionId: string) => [...queryKeys.interviews.all, 'stats', positionId] as const,\n  },\n  \n  // Statistics keys\n  statistics: {\n    all: ['statistics'] as const,\n    overview: () => [...queryKeys.statistics.all, 'overview'] as const,\n    positions: () => [...queryKeys.statistics.all, 'positions'] as const,\n    interviews: () => [...queryKeys.statistics.all, 'interviews'] as const,\n    companies: () => [...queryKeys.statistics.all, 'companies'] as const,\n    dashboard: () => [...queryKeys.statistics.all, 'dashboard'] as const,\n    monthly: (year: number) => [...queryKeys.statistics.all, 'monthly', year] as const,\n    custom: (filters: any) => [...queryKeys.statistics.all, 'custom', filters] as const,\n  },\n} as const;\n\n// Cache invalidation utilities\nexport const invalidateQueries = {\n  // Invalidate all position-related queries\n  positions: () => {\n    queryClient.invalidateQueries(queryKeys.positions.all);\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  \n  // Invalidate specific position\n  position: (id: string) => {\n    queryClient.invalidateQueries(queryKeys.positions.detail(id));\n    queryClient.invalidateQueries(queryKeys.positions.lists());\n    queryClient.invalidateQueries(queryKeys.interviews.list(id));\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  \n  // Invalidate all interview-related queries\n  interviews: () => {\n    queryClient.invalidateQueries(queryKeys.interviews.all);\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  \n  // Invalidate specific interview\n  interview: (id: string, positionId?: string) => {\n    queryClient.invalidateQueries(queryKeys.interviews.detail(id));\n    if (positionId) {\n      queryClient.invalidateQueries(queryKeys.interviews.list(positionId));\n      queryClient.invalidateQueries(queryKeys.positions.detail(positionId));\n    }\n    queryClient.invalidateQueries(queryKeys.interviews.upcoming());\n    queryClient.invalidateQueries(queryKeys.interviews.today());\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  \n  // Invalidate all statistics\n  statistics: () => {\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  \n  // Invalidate all data (nuclear option)\n  all: () => {\n    queryClient.invalidateQueries();\n  },\n};\n\n// Prefetch utilities\nexport const prefetchQueries = {\n  // Prefetch position details when hovering over position card\n  positionDetails: (id: string) => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.positions.detail(id),\n      queryFn: () => import('../services').then(({ positionService }) => positionService.getPosition(id)),\n      staleTime: 2 * 60 * 1000, // 2 minutes\n    });\n  },\n  \n  // Prefetch interviews when viewing position details\n  positionInterviews: (positionId: string) => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.interviews.list(positionId),\n      queryFn: () => import('../services').then(({ interviewService }) => interviewService.getInterviews(positionId)),\n      staleTime: 2 * 60 * 1000,\n    });\n  },\n  \n  // Prefetch dashboard data\n  dashboard: () => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.statistics.dashboard(),\n      queryFn: () => import('../services').then(({ statisticsService }) => statisticsService.getDashboardSummary()),\n      staleTime: 5 * 60 * 1000,\n    });\n  },\n};\n\n// Optimistic update utilities\nexport const optimisticUpdates = {\n  // Optimistically update position in cache\n  updatePosition: (id: string, updates: any) => {\n    queryClient.setQueryData(queryKeys.positions.detail(id), (old: any) => {\n      if (!old) {\n        return old;\n      }\n      return {\n        ...old,\n        ...updates,\n        updated_at: new Date().toISOString(),\n      };\n    });\n    \n    // Also update in lists\n    queryClient.setQueriesData(\n      { queryKey: queryKeys.positions.lists() },\n      (old: any) => {\n        if (!old?.positions) {\n          return old;\n        }\n        return {\n          ...old,\n          positions: old.positions.map((position: any) =>\n            position.id === id ? { ...position, ...updates, updated_at: new Date().toISOString() } : position\n          ),\n        };\n      }\n    );\n  },\n  \n  // Optimistically update interview in cache\n  updateInterview: (id: string, positionId: string, updates: any) => {\n    queryClient.setQueryData(queryKeys.interviews.detail(id), (old: any) => {\n      if (!old) {\n        return old;\n      }\n      return {\n        ...old,\n        ...updates,\n        updated_at: new Date().toISOString(),\n      };\n    });\n    \n    // Update in position's interview list\n    queryClient.setQueryData(queryKeys.interviews.list(positionId), (old: any) => {\n      if (!old) {\n        return old;\n      }\n      return old.map((interview: any) =>\n        interview.id === id ? { ...interview, ...updates, updated_at: new Date().toISOString() } : interview\n      );\n    });\n  },\n  \n  // Optimistically add new position\n  addPosition: (newPosition: any) => {\n    queryClient.setQueriesData(\n      { queryKey: queryKeys.positions.lists() },\n      (old: any) => {\n        if (!old?.positions) {\n          return old;\n        }\n        return {\n          ...old,\n          positions: [newPosition, ...old.positions],\n          total: old.total + 1,\n        };\n      }\n    );\n  },\n  \n  // Optimistically remove position\n  removePosition: (id: string) => {\n    queryClient.setQueriesData(\n      { queryKey: queryKeys.positions.lists() },\n      (old: any) => {\n        if (!old?.positions) {\n          return old;\n        }\n        return {\n          ...old,\n          positions: old.positions.filter((position: any) => position.id !== id),\n          total: Math.max(0, old.total - 1),\n        };\n      }\n    );\n  },\n};\n\n// Background sync utilities\nexport const backgroundSync = {\n  // Start background sync for active queries\n  start: () => {\n    const interval = setInterval(() => {\n      // Refetch stale queries that are currently being observed\n      queryClient.refetchQueries({\n        type: 'active',\n        stale: true,\n      });\n    }, 5 * 60 * 1000); // Every 5 minutes\n    \n    return () => clearInterval(interval);\n  },\n  \n  // Sync specific data types\n  syncPositions: () => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.positions.all,\n      type: 'active',\n    });\n  },\n  \n  syncInterviews: () => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.interviews.all,\n      type: 'active',\n    });\n  },\n  \n  syncStatistics: () => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.statistics.all,\n      type: 'active',\n    });\n  },\n};\n\nexport default queryClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}