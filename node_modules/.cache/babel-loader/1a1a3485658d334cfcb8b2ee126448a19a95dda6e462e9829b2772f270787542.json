{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';\nimport { performanceConfig } from '../../config/performance';\nimport { getConfig } from '../../config/environment';\nexport const PerformanceMonitor = ({\n  onMetric\n}) => {\n  _s();\n  useEffect(() => {\n    const config = getConfig();\n    const handleMetric = metric => {\n      // Apply sampling\n      if (Math.random() > performanceConfig.sampleRate) {\n        return;\n      }\n\n      // Log to console in development\n      if (config.debug) {\n        console.log('Web Vital:', metric);\n      }\n\n      // Send to analytics service\n      if (performanceConfig.enableWebVitals && onMetric) {\n        onMetric(metric);\n      }\n\n      // You can also send to Google Analytics, Sentry, or other monitoring services\n      // Example for Google Analytics:\n      // gtag('event', metric.name, {\n      //   event_category: 'Web Vitals',\n      //   value: Math.round(metric.value),\n      //   event_label: metric.id,\n      //   non_interaction: true,\n      // });\n    };\n\n    // Measure Core Web Vitals\n    getCLS(handleMetric);\n    getFID(handleMetric);\n    getFCP(handleMetric);\n    getLCP(handleMetric);\n    getTTFB(handleMetric);\n\n    // Additional performance monitoring\n    const observer = new PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        if (entry.entryType === 'navigation') {\n          const navEntry = entry;\n          const loadTime = navEntry.loadEventEnd - navEntry.loadEventStart;\n          const domContentLoaded = navEntry.domContentLoadedEventEnd - navEntry.domContentLoadedEventStart;\n          handleMetric({\n            name: 'page-load-time',\n            value: loadTime,\n            id: 'page-load',\n            delta: loadTime\n          });\n          handleMetric({\n            name: 'dom-content-loaded',\n            value: domContentLoaded,\n            id: 'dom-content-loaded',\n            delta: domContentLoaded\n          });\n        }\n      }\n    });\n    observer.observe({\n      entryTypes: ['navigation']\n    });\n    return () => {\n      observer.disconnect();\n    };\n  }, [onMetric]);\n  return null;\n};\n_s(PerformanceMonitor, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = PerformanceMonitor;\nexport default PerformanceMonitor;\nvar _c;\n$RefreshReg$(_c, \"PerformanceMonitor\");","map":{"version":3,"names":["useEffect","getCLS","getFID","getFCP","getLCP","getTTFB","performanceConfig","getConfig","PerformanceMonitor","onMetric","_s","config","handleMetric","metric","Math","random","sampleRate","debug","console","log","enableWebVitals","observer","PerformanceObserver","list","entry","getEntries","entryType","navEntry","loadTime","loadEventEnd","loadEventStart","domContentLoaded","domContentLoadedEventEnd","domContentLoadedEventStart","name","value","id","delta","observe","entryTypes","disconnect","_c","$RefreshReg$"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/components/analytics/PerformanceMonitor.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';\nimport { performanceConfig } from '../../config/performance';\nimport { getConfig } from '../../config/environment';\n\ninterface PerformanceMonitorProps {\n  onMetric?: (metric: any) => void;\n}\n\nexport const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ onMetric }) => {\n  useEffect(() => {\n    const config = getConfig();\n    \n    const handleMetric = (metric: any) => {\n      // Apply sampling\n      if (Math.random() > performanceConfig.sampleRate) {\n        return;\n      }\n\n      // Log to console in development\n      if (config.debug) {\n        console.log('Web Vital:', metric);\n      }\n\n      // Send to analytics service\n      if (performanceConfig.enableWebVitals && onMetric) {\n        onMetric(metric);\n      }\n\n      // You can also send to Google Analytics, Sentry, or other monitoring services\n      // Example for Google Analytics:\n      // gtag('event', metric.name, {\n      //   event_category: 'Web Vitals',\n      //   value: Math.round(metric.value),\n      //   event_label: metric.id,\n      //   non_interaction: true,\n      // });\n    };\n\n    // Measure Core Web Vitals\n    getCLS(handleMetric);\n    getFID(handleMetric);\n    getFCP(handleMetric);\n    getLCP(handleMetric);\n    getTTFB(handleMetric);\n\n    // Additional performance monitoring\n    const observer = new PerformanceObserver((list) => {\n      for (const entry of list.getEntries()) {\n        if (entry.entryType === 'navigation') {\n          const navEntry = entry as PerformanceNavigationTiming;\n          const loadTime = navEntry.loadEventEnd - navEntry.loadEventStart;\n          const domContentLoaded = navEntry.domContentLoadedEventEnd - navEntry.domContentLoadedEventStart;\n          \n          handleMetric({\n            name: 'page-load-time',\n            value: loadTime,\n            id: 'page-load',\n            delta: loadTime,\n          });\n\n          handleMetric({\n            name: 'dom-content-loaded',\n            value: domContentLoaded,\n            id: 'dom-content-loaded',\n            delta: domContentLoaded,\n          });\n        }\n      }\n    });\n\n    observer.observe({ entryTypes: ['navigation'] });\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [onMetric]);\n\n  return null;\n};\n\nexport default PerformanceMonitor;\n"],"mappings":";AAAA,SAAgBA,SAAS,QAAQ,OAAO;AACxC,SAASC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,QAAQ,YAAY;AACpE,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,SAAS,QAAQ,0BAA0B;AAMpD,OAAO,MAAMC,kBAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrFV,SAAS,CAAC,MAAM;IACd,MAAMW,MAAM,GAAGJ,SAAS,CAAC,CAAC;IAE1B,MAAMK,YAAY,GAAIC,MAAW,IAAK;MACpC;MACA,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGT,iBAAiB,CAACU,UAAU,EAAE;QAChD;MACF;;MAEA;MACA,IAAIL,MAAM,CAACM,KAAK,EAAE;QAChBC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEN,MAAM,CAAC;MACnC;;MAEA;MACA,IAAIP,iBAAiB,CAACc,eAAe,IAAIX,QAAQ,EAAE;QACjDA,QAAQ,CAACI,MAAM,CAAC;MAClB;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC;;IAED;IACAZ,MAAM,CAACW,YAAY,CAAC;IACpBV,MAAM,CAACU,YAAY,CAAC;IACpBT,MAAM,CAACS,YAAY,CAAC;IACpBR,MAAM,CAACQ,YAAY,CAAC;IACpBP,OAAO,CAACO,YAAY,CAAC;;IAErB;IACA,MAAMS,QAAQ,GAAG,IAAIC,mBAAmB,CAAEC,IAAI,IAAK;MACjD,KAAK,MAAMC,KAAK,IAAID,IAAI,CAACE,UAAU,CAAC,CAAC,EAAE;QACrC,IAAID,KAAK,CAACE,SAAS,KAAK,YAAY,EAAE;UACpC,MAAMC,QAAQ,GAAGH,KAAoC;UACrD,MAAMI,QAAQ,GAAGD,QAAQ,CAACE,YAAY,GAAGF,QAAQ,CAACG,cAAc;UAChE,MAAMC,gBAAgB,GAAGJ,QAAQ,CAACK,wBAAwB,GAAGL,QAAQ,CAACM,0BAA0B;UAEhGrB,YAAY,CAAC;YACXsB,IAAI,EAAE,gBAAgB;YACtBC,KAAK,EAAEP,QAAQ;YACfQ,EAAE,EAAE,WAAW;YACfC,KAAK,EAAET;UACT,CAAC,CAAC;UAEFhB,YAAY,CAAC;YACXsB,IAAI,EAAE,oBAAoB;YAC1BC,KAAK,EAAEJ,gBAAgB;YACvBK,EAAE,EAAE,oBAAoB;YACxBC,KAAK,EAAEN;UACT,CAAC,CAAC;QACJ;MACF;IACF,CAAC,CAAC;IAEFV,QAAQ,CAACiB,OAAO,CAAC;MAAEC,UAAU,EAAE,CAAC,YAAY;IAAE,CAAC,CAAC;IAEhD,OAAO,MAAM;MACXlB,QAAQ,CAACmB,UAAU,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAAC/B,QAAQ,CAAC,CAAC;EAEd,OAAO,IAAI;AACb,CAAC;AAACC,EAAA,CAtEWF,kBAAqD;AAAAiC,EAAA,GAArDjC,kBAAqD;AAwElE,eAAeA,kBAAkB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}