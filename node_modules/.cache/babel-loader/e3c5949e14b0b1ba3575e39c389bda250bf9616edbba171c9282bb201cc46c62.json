{"ast":null,"code":"// Token storage keys\nconst ACCESS_TOKEN_KEY = 'access_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\nconst USER_KEY = 'user';\nconst TOKEN_EXPIRY_KEY = 'token_expiry';\n\n// Token expiry buffer (5 minutes before actual expiry)\nconst EXPIRY_BUFFER = 5 * 60 * 1000;\nexport class TokenManager {\n  /**\n   * Set tokens and user data from auth response\n   */\n  setTokens(authResponse) {\n    try {\n      localStorage.setItem(ACCESS_TOKEN_KEY, authResponse.access_token);\n      localStorage.setItem(USER_KEY, JSON.stringify(authResponse.user));\n\n      // Calculate and store token expiry (assuming 1 hour default)\n      const expiryTime = Date.now() + 60 * 60 * 1000; // 1 hour from now\n      localStorage.setItem(TOKEN_EXPIRY_KEY, expiryTime.toString());\n\n      // Store refresh token if provided\n      if ('refresh_token' in authResponse) {\n        localStorage.setItem(REFRESH_TOKEN_KEY, authResponse.refresh_token);\n      }\n    } catch (error) {\n      console.error('Failed to store tokens:', error);\n    }\n  }\n\n  /**\n   * Get access token\n   */\n  getAccessToken() {\n    try {\n      return localStorage.getItem(ACCESS_TOKEN_KEY);\n    } catch (error) {\n      console.error('Failed to get access token:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get refresh token\n   */\n  getRefreshToken() {\n    try {\n      return localStorage.getItem(REFRESH_TOKEN_KEY);\n    } catch (error) {\n      console.error('Failed to get refresh token:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get stored user data\n   */\n  getUser() {\n    try {\n      const userStr = localStorage.getItem(USER_KEY);\n      return userStr ? JSON.parse(userStr) : null;\n    } catch (error) {\n      console.error('Failed to get user data:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Update stored user data\n   */\n  setUser(user) {\n    try {\n      localStorage.setItem(USER_KEY, JSON.stringify(user));\n    } catch (error) {\n      console.error('Failed to store user data:', error);\n    }\n  }\n\n  /**\n   * Check if user is authenticated (has valid token)\n   */\n  isAuthenticated() {\n    const token = this.getAccessToken();\n    return !!token && !this.isTokenExpired();\n  }\n\n  /**\n   * Check if token is expired or about to expire\n   */\n  isTokenExpired() {\n    try {\n      const expiryStr = localStorage.getItem(TOKEN_EXPIRY_KEY);\n      if (!expiryStr) {\n        // If no expiry stored, assume token is valid for backward compatibility\n        return false;\n      }\n      const expiry = parseInt(expiryStr, 10);\n      const now = Date.now();\n\n      // Consider token expired if it expires within the buffer time\n      return now >= expiry - EXPIRY_BUFFER;\n    } catch (error) {\n      console.error('Failed to check token expiry:', error);\n      return true; // Assume expired on error\n    }\n  }\n\n  /**\n   * Get time until token expires (in milliseconds)\n   */\n  getTimeUntilExpiry() {\n    try {\n      const expiryStr = localStorage.getItem(TOKEN_EXPIRY_KEY);\n      if (!expiryStr) {\n        return 0;\n      }\n      const expiry = parseInt(expiryStr, 10);\n      const now = Date.now();\n      return Math.max(0, expiry - now);\n    } catch (error) {\n      console.error('Failed to get time until expiry:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Update access token (for refresh operations)\n   */\n  updateAccessToken(accessToken, expiresIn) {\n    try {\n      localStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n\n      // Update expiry if provided\n      if (expiresIn) {\n        const expiryTime = Date.now() + expiresIn * 1000;\n        localStorage.setItem(TOKEN_EXPIRY_KEY, expiryTime.toString());\n      }\n    } catch (error) {\n      console.error('Failed to update access token:', error);\n    }\n  }\n\n  /**\n   * Clear all stored tokens and user data\n   */\n  clearTokens() {\n    try {\n      localStorage.removeItem(ACCESS_TOKEN_KEY);\n      localStorage.removeItem(REFRESH_TOKEN_KEY);\n      localStorage.removeItem(USER_KEY);\n      localStorage.removeItem(TOKEN_EXPIRY_KEY);\n    } catch (error) {\n      console.error('Failed to clear tokens:', error);\n    }\n  }\n\n  /**\n   * Get authorization header value\n   */\n  getAuthHeader() {\n    const token = this.getAccessToken();\n    return token ? `Bearer ${token}` : null;\n  }\n\n  /**\n   * Check if refresh token is available\n   */\n  hasRefreshToken() {\n    return !!this.getRefreshToken();\n  }\n\n  /**\n   * Get all stored auth data for debugging\n   */\n  getAuthData() {\n    return {\n      accessToken: this.getAccessToken(),\n      refreshToken: this.getRefreshToken(),\n      user: this.getUser(),\n      isAuthenticated: this.isAuthenticated(),\n      isExpired: this.isTokenExpired(),\n      timeUntilExpiry: this.getTimeUntilExpiry()\n    };\n  }\n\n  /**\n   * Subscribe to storage changes (for multi-tab sync)\n   */\n  onStorageChange(callback) {\n    const handler = event => {\n      if ([ACCESS_TOKEN_KEY, REFRESH_TOKEN_KEY, USER_KEY, TOKEN_EXPIRY_KEY].includes(event.key || '')) {\n        callback(event);\n      }\n    };\n    window.addEventListener('storage', handler);\n    return () => {\n      window.removeEventListener('storage', handler);\n    };\n  }\n}\n\n// Export singleton instance\nexport const tokenManager = new TokenManager();\nexport default tokenManager;","map":{"version":3,"names":["ACCESS_TOKEN_KEY","REFRESH_TOKEN_KEY","USER_KEY","TOKEN_EXPIRY_KEY","EXPIRY_BUFFER","TokenManager","setTokens","authResponse","localStorage","setItem","access_token","JSON","stringify","user","expiryTime","Date","now","toString","refresh_token","error","console","getAccessToken","getItem","getRefreshToken","getUser","userStr","parse","setUser","isAuthenticated","token","isTokenExpired","expiryStr","expiry","parseInt","getTimeUntilExpiry","Math","max","updateAccessToken","accessToken","expiresIn","clearTokens","removeItem","getAuthHeader","hasRefreshToken","getAuthData","refreshToken","isExpired","timeUntilExpiry","onStorageChange","callback","handler","event","includes","key","window","addEventListener","removeEventListener","tokenManager"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/utils/tokenManager.ts"],"sourcesContent":["import { User, AuthResponse } from '../types';\n\n// Token storage keys\nconst ACCESS_TOKEN_KEY = 'access_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\nconst USER_KEY = 'user';\nconst TOKEN_EXPIRY_KEY = 'token_expiry';\n\n// Token expiry buffer (5 minutes before actual expiry)\nconst EXPIRY_BUFFER = 5 * 60 * 1000;\n\nexport class TokenManager {\n  /**\n   * Set tokens and user data from auth response\n   */\n  setTokens(authResponse: AuthResponse): void {\n    try {\n      localStorage.setItem(ACCESS_TOKEN_KEY, authResponse.access_token);\n      localStorage.setItem(USER_KEY, JSON.stringify(authResponse.user));\n      \n      // Calculate and store token expiry (assuming 1 hour default)\n      const expiryTime = Date.now() + (60 * 60 * 1000); // 1 hour from now\n      localStorage.setItem(TOKEN_EXPIRY_KEY, expiryTime.toString());\n      \n      // Store refresh token if provided\n      if ('refresh_token' in authResponse) {\n        localStorage.setItem(REFRESH_TOKEN_KEY, (authResponse as any).refresh_token);\n      }\n    } catch (error) {\n      console.error('Failed to store tokens:', error);\n    }\n  }\n\n  /**\n   * Get access token\n   */\n  getAccessToken(): string | null {\n    try {\n      return localStorage.getItem(ACCESS_TOKEN_KEY);\n    } catch (error) {\n      console.error('Failed to get access token:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get refresh token\n   */\n  getRefreshToken(): string | null {\n    try {\n      return localStorage.getItem(REFRESH_TOKEN_KEY);\n    } catch (error) {\n      console.error('Failed to get refresh token:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get stored user data\n   */\n  getUser(): User | null {\n    try {\n      const userStr = localStorage.getItem(USER_KEY);\n      return userStr ? JSON.parse(userStr) : null;\n    } catch (error) {\n      console.error('Failed to get user data:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Update stored user data\n   */\n  setUser(user: User): void {\n    try {\n      localStorage.setItem(USER_KEY, JSON.stringify(user));\n    } catch (error) {\n      console.error('Failed to store user data:', error);\n    }\n  }\n\n  /**\n   * Check if user is authenticated (has valid token)\n   */\n  isAuthenticated(): boolean {\n    const token = this.getAccessToken();\n    return !!token && !this.isTokenExpired();\n  }\n\n  /**\n   * Check if token is expired or about to expire\n   */\n  isTokenExpired(): boolean {\n    try {\n      const expiryStr = localStorage.getItem(TOKEN_EXPIRY_KEY);\n      if (!expiryStr) {\n        // If no expiry stored, assume token is valid for backward compatibility\n        return false;\n      }\n\n      const expiry = parseInt(expiryStr, 10);\n      const now = Date.now();\n      \n      // Consider token expired if it expires within the buffer time\n      return now >= (expiry - EXPIRY_BUFFER);\n    } catch (error) {\n      console.error('Failed to check token expiry:', error);\n      return true; // Assume expired on error\n    }\n  }\n\n  /**\n   * Get time until token expires (in milliseconds)\n   */\n  getTimeUntilExpiry(): number {\n    try {\n      const expiryStr = localStorage.getItem(TOKEN_EXPIRY_KEY);\n      if (!expiryStr) {\n        return 0;\n      }\n\n      const expiry = parseInt(expiryStr, 10);\n      const now = Date.now();\n      \n      return Math.max(0, expiry - now);\n    } catch (error) {\n      console.error('Failed to get time until expiry:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Update access token (for refresh operations)\n   */\n  updateAccessToken(accessToken: string, expiresIn?: number): void {\n    try {\n      localStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n      \n      // Update expiry if provided\n      if (expiresIn) {\n        const expiryTime = Date.now() + (expiresIn * 1000);\n        localStorage.setItem(TOKEN_EXPIRY_KEY, expiryTime.toString());\n      }\n    } catch (error) {\n      console.error('Failed to update access token:', error);\n    }\n  }\n\n  /**\n   * Clear all stored tokens and user data\n   */\n  clearTokens(): void {\n    try {\n      localStorage.removeItem(ACCESS_TOKEN_KEY);\n      localStorage.removeItem(REFRESH_TOKEN_KEY);\n      localStorage.removeItem(USER_KEY);\n      localStorage.removeItem(TOKEN_EXPIRY_KEY);\n    } catch (error) {\n      console.error('Failed to clear tokens:', error);\n    }\n  }\n\n  /**\n   * Get authorization header value\n   */\n  getAuthHeader(): string | null {\n    const token = this.getAccessToken();\n    return token ? `Bearer ${token}` : null;\n  }\n\n  /**\n   * Check if refresh token is available\n   */\n  hasRefreshToken(): boolean {\n    return !!this.getRefreshToken();\n  }\n\n  /**\n   * Get all stored auth data for debugging\n   */\n  getAuthData(): {\n    accessToken: string | null;\n    refreshToken: string | null;\n    user: User | null;\n    isAuthenticated: boolean;\n    isExpired: boolean;\n    timeUntilExpiry: number;\n  } {\n    return {\n      accessToken: this.getAccessToken(),\n      refreshToken: this.getRefreshToken(),\n      user: this.getUser(),\n      isAuthenticated: this.isAuthenticated(),\n      isExpired: this.isTokenExpired(),\n      timeUntilExpiry: this.getTimeUntilExpiry(),\n    };\n  }\n\n  /**\n   * Subscribe to storage changes (for multi-tab sync)\n   */\n  onStorageChange(callback: (event: StorageEvent) => void): () => void {\n    const handler = (event: StorageEvent) => {\n      if ([ACCESS_TOKEN_KEY, REFRESH_TOKEN_KEY, USER_KEY, TOKEN_EXPIRY_KEY].includes(event.key || '')) {\n        callback(event);\n      }\n    };\n\n    window.addEventListener('storage', handler);\n    \n    return () => {\n      window.removeEventListener('storage', handler);\n    };\n  }\n}\n\n// Export singleton instance\nexport const tokenManager = new TokenManager();\nexport default tokenManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}