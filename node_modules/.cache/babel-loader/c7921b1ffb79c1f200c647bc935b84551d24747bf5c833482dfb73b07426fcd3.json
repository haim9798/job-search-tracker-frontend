{"ast":null,"code":"import{useQuery,useMutation,useQueryClient}from'@tanstack/react-query';import{toast}from'react-hot-toast';import{authService}from'../services';import{queryKeys}from'../lib/queryClient';// Query hooks\nexport const useCurrentUser=()=>{return useQuery({queryKey:queryKeys.auth.user,queryFn:()=>authService.getCurrentUser(),staleTime:10*60*1000,// 10 minutes\nretry:false,// Don't retry auth queries to avoid infinite loops\nenabled:authService.isAuthenticated()});};export const useVerifyToken=()=>{return useQuery({queryKey:queryKeys.auth.verify,queryFn:()=>authService.verifyToken(),staleTime:5*60*1000,// 5 minutes\nretry:false,enabled:authService.isAuthenticated()});};// Mutation hooks\nexport const useLogin=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:credentials=>authService.login(credentials),onSuccess:data=>{// Set user data in cache\nqueryClient.setQueryData(queryKeys.auth.user,data.user);queryClient.setQueryData(queryKeys.auth.verify,true);toast.success(\"Welcome back, \".concat(data.user.first_name,\"!\"));// Prefetch dashboard data after login\nqueryClient.prefetchQuery({queryKey:queryKeys.statistics.dashboard(),queryFn:()=>import('../services').then(_ref=>{let{statisticsService}=_ref;return statisticsService.getDashboardSummary();})});},onError:error=>{toast.error(error.message||'Login failed');}});};export const useRegister=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:userData=>authService.register(userData),onSuccess:data=>{toast.success('Registration successful! Please log in.');},onError:error=>{toast.error(error.message||'Registration failed');}});};export const useLogout=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:()=>authService.logout(),onSuccess:()=>{// Clear all cached data\nqueryClient.clear();// Remove user data from cache\nqueryClient.removeQueries(queryKeys.auth.user);queryClient.removeQueries(queryKeys.auth.verify);toast.success('Logged out successfully');},onError:error=>{// Even if logout API fails, clear local data\nqueryClient.clear();queryClient.removeQueries(queryKeys.auth.user);queryClient.removeQueries(queryKeys.auth.verify);toast.success('Logged out successfully');}});};export const useRefreshToken=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:()=>authService.refreshToken(),onSuccess:accessToken=>{// Token refreshed successfully, update verification status\nqueryClient.setQueryData(queryKeys.auth.verify,true);},onError:error=>{// Refresh failed, clear auth data and redirect to login\nqueryClient.clear();queryClient.removeQueries(queryKeys.auth.user);queryClient.removeQueries(queryKeys.auth.verify);toast.error('Session expired. Please log in again.');// Redirect to login page\nwindow.location.href='/login';}});};export const useRequestPasswordReset=()=>{return useMutation({mutationFn:email=>authService.requestPasswordReset(email),onSuccess:()=>{toast.success('Password reset email sent. Please check your inbox.');},onError:error=>{toast.error(error.message||'Failed to send password reset email');}});};export const useResetPassword=()=>{return useMutation({mutationFn:_ref2=>{let{token,newPassword}=_ref2;return authService.resetPassword(token,newPassword);},onSuccess:()=>{toast.success('Password reset successfully. Please log in with your new password.');},onError:error=>{toast.error(error.message||'Failed to reset password');}});};export const useChangePassword=()=>{return useMutation({mutationFn:_ref3=>{let{currentPassword,newPassword}=_ref3;return authService.changePassword(currentPassword,newPassword);},onSuccess:()=>{toast.success('Password changed successfully');},onError:error=>{toast.error(error.message||'Failed to change password');}});};// Combined hooks and utilities\nexport const useAuth=()=>{// Import AuthContext hook dynamically to avoid circular dependency\nconst{useAuthContext}=require('../providers/AuthProvider');try{// Try to use AuthContext first (preferred)\nreturn useAuthContext();}catch(error){var _userQuery$error;// Fallback to React Query hooks if AuthContext is not available\nconst userQuery=useCurrentUser();const loginMutation=useLogin();const logoutMutation=useLogout();const registerMutation=useRegister();const isAuthenticated=authService.isAuthenticated();const storedUser=authService.getStoredUser();return{// State\nuser:userQuery.data||storedUser,isAuthenticated,isLoading:userQuery.isLoading,isInitialized:true,// Assume initialized for fallback\nerror:((_userQuery$error=userQuery.error)===null||_userQuery$error===void 0?void 0:_userQuery$error.message)||null,// Actions\nlogin:async credentials=>{return new Promise((resolve,reject)=>{loginMutation.mutate(credentials,{onSuccess:()=>resolve(),onError:error=>reject(error)});});},logout:async()=>{return new Promise((resolve,reject)=>{logoutMutation.mutate(undefined,{onSuccess:()=>resolve(),onError:error=>reject(error)});});},register:async userData=>{return new Promise((resolve,reject)=>{registerMutation.mutate(userData,{onSuccess:()=>resolve(),onError:error=>reject(error)});});},refreshToken:async()=>{// Implement refresh token logic\nawait authService.refreshToken();},clearError:()=>{// No-op for fallback\n},checkSession:async()=>{return authService.verifyToken();},restoreSession:async()=>{// No-op for fallback\n},// Legacy mutation states for backward compatibility\nisLoggingIn:loginMutation.isPending,isLoggingOut:logoutMutation.isPending,isRegistering:registerMutation.isPending,loginError:loginMutation.error,registerError:registerMutation.error};}};export const useAuthGuard=()=>{const{isAuthenticated,isLoading,user}=useAuth();return{isAuthenticated,isLoading,user,canAccess:isAuthenticated&&!isLoading,shouldRedirect:!isAuthenticated&&!isLoading};};export const useUserProfile=()=>{const userQuery=useCurrentUser();const changePasswordMutation=useChangePassword();return{user:userQuery.data,isLoading:userQuery.isLoading,error:userQuery.error,refetch:userQuery.refetch,// Password change\nchangePassword:changePasswordMutation.mutate,isChangingPassword:changePasswordMutation.isPending,changePasswordError:changePasswordMutation.error};};// Session management hooks\nexport const useSessionManager=()=>{const queryClient=useQueryClient();const refreshTokenMutation=useRefreshToken();const checkSession=async()=>{if(!authService.isAuthenticated()){return false;}try{const isValid=await authService.verifyToken();return isValid;}catch(error){return false;}};const refreshSession=()=>{refreshTokenMutation.mutate();};const clearSession=()=>{queryClient.clear();queryClient.removeQueries(queryKeys.auth.user);queryClient.removeQueries(queryKeys.auth.verify);};return{checkSession,refreshSession,clearSession,isRefreshing:refreshTokenMutation.isPending};};// Auto-refresh token hook\nexport const useAutoRefreshToken=()=>{const refreshTokenMutation=useRefreshToken();// This would typically be used in a useEffect to set up automatic token refresh\nconst setupAutoRefresh=function(){let intervalMinutes=arguments.length>0&&arguments[0]!==undefined?arguments[0]:15;if(!authService.isAuthenticated()){return;}const interval=setInterval(()=>{if(authService.isAuthenticated()){refreshTokenMutation.mutate();}else{clearInterval(interval);}},intervalMinutes*60*1000);return()=>clearInterval(interval);};return{setupAutoRefresh,isRefreshing:refreshTokenMutation.isPending};};","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","toast","authService","queryKeys","useCurrentUser","queryKey","auth","user","queryFn","getCurrentUser","staleTime","retry","enabled","isAuthenticated","useVerifyToken","verify","verifyToken","useLogin","queryClient","mutationFn","credentials","login","onSuccess","data","setQueryData","success","concat","first_name","prefetchQuery","statistics","dashboard","then","_ref","statisticsService","getDashboardSummary","onError","error","message","useRegister","userData","register","useLogout","logout","clear","removeQueries","useRefreshToken","refreshToken","accessToken","window","location","href","useRequestPasswordReset","email","requestPasswordReset","useResetPassword","_ref2","token","newPassword","resetPassword","useChangePassword","_ref3","currentPassword","changePassword","useAuth","useAuthContext","require","_userQuery$error","userQuery","loginMutation","logoutMutation","registerMutation","storedUser","getStoredUser","isLoading","isInitialized","Promise","resolve","reject","mutate","undefined","clearError","checkSession","restoreSession","isLoggingIn","isPending","isLoggingOut","isRegistering","loginError","registerError","useAuthGuard","canAccess","shouldRedirect","useUserProfile","changePasswordMutation","refetch","isChangingPassword","changePasswordError","useSessionManager","refreshTokenMutation","isValid","refreshSession","clearSession","isRefreshing","useAutoRefreshToken","setupAutoRefresh","intervalMinutes","arguments","length","interval","setInterval","clearInterval"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-hot-toast';\nimport { authService } from '../services';\nimport { queryKeys } from '../lib/queryClient';\nimport {\n  User,\n  AuthResponse,\n  LoginCredentials,\n  RegisterData,\n} from '../types';\n\n// Query hooks\nexport const useCurrentUser = () => {\n  return useQuery({\n    queryKey: queryKeys.auth.user,\n    queryFn: () => authService.getCurrentUser(),\n    staleTime: 10 * 60 * 1000, // 10 minutes\n    retry: false, // Don't retry auth queries to avoid infinite loops\n    enabled: authService.isAuthenticated(),\n  });\n};\n\nexport const useVerifyToken = () => {\n  return useQuery({\n    queryKey: queryKeys.auth.verify,\n    queryFn: () => authService.verifyToken(),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: false,\n    enabled: authService.isAuthenticated(),\n  });\n};\n\n// Mutation hooks\nexport const useLogin = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (credentials: LoginCredentials) => authService.login(credentials),\n    onSuccess: (data: AuthResponse) => {\n      // Set user data in cache\n      queryClient.setQueryData(queryKeys.auth.user, data.user);\n      queryClient.setQueryData(queryKeys.auth.verify, true);\n      \n      toast.success(`Welcome back, ${data.user.first_name}!`);\n      \n      // Prefetch dashboard data after login\n      queryClient.prefetchQuery({\n        queryKey: queryKeys.statistics.dashboard(),\n        queryFn: () => import('../services').then(({ statisticsService }) => statisticsService.getDashboardSummary()),\n      });\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Login failed');\n    },\n  });\n};\n\nexport const useRegister = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (userData: RegisterData) => authService.register(userData),\n    onSuccess: (data: User) => {\n      toast.success('Registration successful! Please log in.');\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Registration failed');\n    },\n  });\n};\n\nexport const useLogout = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: () => authService.logout(),\n    onSuccess: () => {\n      // Clear all cached data\n      queryClient.clear();\n      \n      // Remove user data from cache\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      \n      toast.success('Logged out successfully');\n    },\n    onError: (error: any) => {\n      // Even if logout API fails, clear local data\n      queryClient.clear();\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      \n      toast.success('Logged out successfully');\n    },\n  });\n};\n\nexport const useRefreshToken = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: () => authService.refreshToken(),\n    onSuccess: (accessToken: string) => {\n      // Token refreshed successfully, update verification status\n      queryClient.setQueryData(queryKeys.auth.verify, true);\n    },\n    onError: (error: any) => {\n      // Refresh failed, clear auth data and redirect to login\n      queryClient.clear();\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      \n      toast.error('Session expired. Please log in again.');\n      \n      // Redirect to login page\n      window.location.href = '/login';\n    },\n  });\n};\n\nexport const useRequestPasswordReset = () => {\n  return useMutation({\n    mutationFn: (email: string) => authService.requestPasswordReset(email),\n    onSuccess: () => {\n      toast.success('Password reset email sent. Please check your inbox.');\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to send password reset email');\n    },\n  });\n};\n\nexport const useResetPassword = () => {\n  return useMutation({\n    mutationFn: ({ token, newPassword }: { token: string; newPassword: string }) =>\n      authService.resetPassword(token, newPassword),\n    onSuccess: () => {\n      toast.success('Password reset successfully. Please log in with your new password.');\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to reset password');\n    },\n  });\n};\n\nexport const useChangePassword = () => {\n  return useMutation({\n    mutationFn: ({ currentPassword, newPassword }: { currentPassword: string; newPassword: string }) =>\n      authService.changePassword(currentPassword, newPassword),\n    onSuccess: () => {\n      toast.success('Password changed successfully');\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to change password');\n    },\n  });\n};\n\n// Combined hooks and utilities\nexport const useAuth = () => {\n  // Import AuthContext hook dynamically to avoid circular dependency\n  const { useAuthContext } = require('../providers/AuthProvider');\n  \n  try {\n    // Try to use AuthContext first (preferred)\n    return useAuthContext();\n  } catch (error) {\n    // Fallback to React Query hooks if AuthContext is not available\n    const userQuery = useCurrentUser();\n    const loginMutation = useLogin();\n    const logoutMutation = useLogout();\n    const registerMutation = useRegister();\n\n    const isAuthenticated = authService.isAuthenticated();\n    const storedUser = authService.getStoredUser();\n\n    return {\n      // State\n      user: userQuery.data || storedUser,\n      isAuthenticated,\n      isLoading: userQuery.isLoading,\n      isInitialized: true, // Assume initialized for fallback\n      error: (userQuery.error as any)?.message || null,\n      \n      // Actions\n      login: async (credentials: LoginCredentials) => {\n        return new Promise<void>((resolve, reject) => {\n          loginMutation.mutate(credentials, {\n            onSuccess: () => resolve(),\n            onError: (error) => reject(error),\n          });\n        });\n      },\n      logout: async () => {\n        return new Promise<void>((resolve, reject) => {\n          logoutMutation.mutate(undefined, {\n            onSuccess: () => resolve(),\n            onError: (error) => reject(error),\n          });\n        });\n      },\n      register: async (userData: RegisterData) => {\n        return new Promise<void>((resolve, reject) => {\n          registerMutation.mutate(userData, {\n            onSuccess: () => resolve(),\n            onError: (error) => reject(error),\n          });\n        });\n      },\n      refreshToken: async () => {\n        // Implement refresh token logic\n        await authService.refreshToken();\n      },\n      clearError: () => {\n        // No-op for fallback\n      },\n      checkSession: async () => {\n        return authService.verifyToken();\n      },\n      restoreSession: async () => {\n        // No-op for fallback\n      },\n      \n      // Legacy mutation states for backward compatibility\n      isLoggingIn: loginMutation.isPending,\n      isLoggingOut: logoutMutation.isPending,\n      isRegistering: registerMutation.isPending,\n      loginError: loginMutation.error,\n      registerError: registerMutation.error,\n    };\n  }\n};\n\nexport const useAuthGuard = () => {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  \n  return {\n    isAuthenticated,\n    isLoading,\n    user,\n    canAccess: isAuthenticated && !isLoading,\n    shouldRedirect: !isAuthenticated && !isLoading,\n  };\n};\n\nexport const useUserProfile = () => {\n  const userQuery = useCurrentUser();\n  const changePasswordMutation = useChangePassword();\n  \n  return {\n    user: userQuery.data,\n    isLoading: userQuery.isLoading,\n    error: userQuery.error,\n    refetch: userQuery.refetch,\n    \n    // Password change\n    changePassword: changePasswordMutation.mutate,\n    isChangingPassword: changePasswordMutation.isPending,\n    changePasswordError: changePasswordMutation.error,\n  };\n};\n\n// Session management hooks\nexport const useSessionManager = () => {\n  const queryClient = useQueryClient();\n  const refreshTokenMutation = useRefreshToken();\n  \n  const checkSession = async () => {\n    if (!authService.isAuthenticated()) {\n      return false;\n    }\n    \n    try {\n      const isValid = await authService.verifyToken();\n      return isValid;\n    } catch (error) {\n      return false;\n    }\n  };\n  \n  const refreshSession = () => {\n    refreshTokenMutation.mutate();\n  };\n  \n  const clearSession = () => {\n    queryClient.clear();\n    queryClient.removeQueries(queryKeys.auth.user);\n    queryClient.removeQueries(queryKeys.auth.verify);\n  };\n  \n  return {\n    checkSession,\n    refreshSession,\n    clearSession,\n    isRefreshing: refreshTokenMutation.isPending,\n  };\n};\n\n// Auto-refresh token hook\nexport const useAutoRefreshToken = () => {\n  const refreshTokenMutation = useRefreshToken();\n  \n  // This would typically be used in a useEffect to set up automatic token refresh\n  const setupAutoRefresh = (intervalMinutes: number = 15) => {\n    if (!authService.isAuthenticated()) {\n      return;\n    }\n    \n    const interval = setInterval(() => {\n      if (authService.isAuthenticated()) {\n        refreshTokenMutation.mutate();\n      } else {\n        clearInterval(interval);\n      }\n    }, intervalMinutes * 60 * 1000);\n    \n    return () => clearInterval(interval);\n  };\n  \n  return {\n    setupAutoRefresh,\n    isRefreshing: refreshTokenMutation.isPending,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}