{"ast":null,"code":"import axios from 'axios';\nimport { tokenManager } from '../utils/tokenManager';\n\n// Create axios instance with base configuration\nconst createHttpClient = () => {\n  const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const client = axios.create({\n    baseURL,\n    timeout: 10000,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  // Request interceptor for authentication\n  client.interceptors.request.use(config => {\n    const authHeader = tokenManager.getAuthHeader();\n    if (authHeader) {\n      config.headers.Authorization = authHeader;\n    }\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Response interceptor for error handling and token refresh\n  client.interceptors.response.use(response => {\n    return response;\n  }, async error => {\n    var _error$response, _error$response2, _error$response2$data, _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n    const originalRequest = error.config;\n\n    // Handle 401 errors (unauthorized)\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        const refreshToken = tokenManager.getRefreshToken();\n        if (refreshToken) {\n          const response = await axios.post(`${baseURL}/auth/refresh`, {\n            refresh_token: refreshToken\n          });\n          const {\n            access_token,\n            expires_in\n          } = response.data;\n          tokenManager.updateAccessToken(access_token, expires_in);\n\n          // Retry the original request with new token\n          if (originalRequest.headers) {\n            originalRequest.headers.Authorization = `Bearer ${access_token}`;\n          }\n          return client(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh failed, clear tokens and redirect to login\n        tokenManager.clearTokens();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    // Transform error response to standardized format\n    const apiError = {\n      code: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.code) || 'UNKNOWN_ERROR',\n      message: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message || 'An unexpected error occurred',\n      field_errors: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.field_errors,\n      timestamp: new Date().toISOString()\n    };\n    return Promise.reject(apiError);\n  });\n  return client;\n};\n\n// Create and export the HTTP client instance\nexport const httpClient = createHttpClient();\n\n// Utility functions for common HTTP operations\nexport const apiRequest = {\n  get: (url, config) => httpClient.get(url, config).then(response => response.data),\n  post: (url, data, config) => httpClient.post(url, data, config).then(response => response.data),\n  put: (url, data, config) => httpClient.put(url, data, config).then(response => response.data),\n  patch: (url, data, config) => httpClient.patch(url, data, config).then(response => response.data),\n  delete: (url, config) => httpClient.delete(url, config).then(response => response.data)\n};\n\n// Re-export tokenManager for backward compatibility\nexport { tokenManager };\nexport default httpClient;","map":{"version":3,"names":["axios","tokenManager","createHttpClient","baseURL","process","env","REACT_APP_API_URL","client","create","timeout","headers","interceptors","request","use","config","authHeader","getAuthHeader","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response2$data","_error$response3","_error$response3$data","_error$response4","_error$response4$data","originalRequest","status","_retry","refreshToken","getRefreshToken","post","refresh_token","access_token","expires_in","data","updateAccessToken","refreshError","clearTokens","window","location","href","apiError","code","message","field_errors","timestamp","Date","toISOString","httpClient","apiRequest","get","url","then","put","patch","delete"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/services/httpClient.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';\nimport { ApiError, AuthResponse } from '../types';\nimport { tokenManager } from '../utils/tokenManager';\n\n// Create axios instance with base configuration\nconst createHttpClient = (): AxiosInstance => {\n  const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  \n  const client = axios.create({\n    baseURL,\n    timeout: 10000,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  // Request interceptor for authentication\n  client.interceptors.request.use(\n    (config) => {\n      const authHeader = tokenManager.getAuthHeader();\n      if (authHeader) {\n        config.headers.Authorization = authHeader;\n      }\n      return config;\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n\n  // Response interceptor for error handling and token refresh\n  client.interceptors.response.use(\n    (response: AxiosResponse) => {\n      return response;\n    },\n    async (error: AxiosError) => {\n      const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean };\n\n      // Handle 401 errors (unauthorized)\n      if (error.response?.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n\n        try {\n          const refreshToken = tokenManager.getRefreshToken();\n          if (refreshToken) {\n            const response = await axios.post(`${baseURL}/auth/refresh`, {\n              refresh_token: refreshToken,\n            });\n\n            const { access_token, expires_in } = response.data;\n            tokenManager.updateAccessToken(access_token, expires_in);\n\n            // Retry the original request with new token\n            if (originalRequest.headers) {\n              originalRequest.headers.Authorization = `Bearer ${access_token}`;\n            }\n            return client(originalRequest);\n          }\n        } catch (refreshError) {\n          // Refresh failed, clear tokens and redirect to login\n          tokenManager.clearTokens();\n          window.location.href = '/login';\n          return Promise.reject(refreshError);\n        }\n      }\n\n      // Transform error response to standardized format\n      const apiError: ApiError = {\n        code: error.response?.data?.code || 'UNKNOWN_ERROR',\n        message: error.response?.data?.message || error.message || 'An unexpected error occurred',\n        field_errors: error.response?.data?.field_errors,\n        timestamp: new Date().toISOString(),\n      };\n\n      return Promise.reject(apiError);\n    }\n  );\n\n  return client;\n};\n\n// Create and export the HTTP client instance\nexport const httpClient = createHttpClient();\n\n// Utility functions for common HTTP operations\nexport const apiRequest = {\n  get: <T>(url: string, config?: AxiosRequestConfig): Promise<T> =>\n    httpClient.get(url, config).then((response) => response.data),\n\n  post: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    httpClient.post(url, data, config).then((response) => response.data),\n\n  put: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    httpClient.put(url, data, config).then((response) => response.data),\n\n  patch: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    httpClient.patch(url, data, config).then((response) => response.data),\n\n  delete: <T>(url: string, config?: AxiosRequestConfig): Promise<T> =>\n    httpClient.delete(url, config).then((response) => response.data),\n};\n\n// Re-export tokenManager for backward compatibility\nexport { tokenManager };\n\nexport default httpClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}