{"ast":null,"code":"import axios from 'axios';\nimport { tokenManager } from '../utils/tokenManager';\n// Create axios instance with base configuration\nconst createHttpClient = () => {\n  const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const client = axios.create({\n    baseURL,\n    timeout: 10000,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  // Request interceptor for authentication and performance tracking\n  client.interceptors.request.use(config => {\n    var _config$method;\n    const authHeader = tokenManager.getAuthHeader();\n    if (authHeader) {\n      config.headers.Authorization = authHeader;\n    }\n\n    // Add performance tracking metadata\n    config.metadata = {\n      startTime: performance.now(),\n      performanceId: `${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()}_${config.url}`\n    };\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Response interceptor for error handling and token refresh\n  client.interceptors.response.use(response => {\n    return response;\n  }, async error => {\n    var _error$response, _error$response2;\n    const originalRequest = error.config;\n\n    // Handle 401 errors (unauthorized)\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        const refreshToken = tokenManager.getRefreshToken();\n        if (refreshToken) {\n          const response = await axios.post(`${baseURL}/auth/refresh`, {\n            refresh_token: refreshToken\n          });\n          const {\n            access_token,\n            expires_in\n          } = response.data;\n          tokenManager.updateAccessToken(access_token, expires_in);\n\n          // Retry the original request with new token\n          if (originalRequest.headers) {\n            originalRequest.headers.Authorization = `Bearer ${access_token}`;\n          }\n          return client(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh failed, clear tokens and redirect to login\n        tokenManager.clearTokens();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    // Transform error response to standardized format\n    const responseData = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data;\n    const apiError = {\n      code: (responseData === null || responseData === void 0 ? void 0 : responseData.code) || 'UNKNOWN_ERROR',\n      message: (responseData === null || responseData === void 0 ? void 0 : responseData.message) || error.message || 'An unexpected error occurred',\n      field_errors: responseData === null || responseData === void 0 ? void 0 : responseData.field_errors,\n      timestamp: new Date().toISOString()\n    };\n    return Promise.reject(apiError);\n  });\n  return client;\n};\n\n// Create and export the HTTP client instance\nexport const httpClient = createHttpClient();\n\n// Utility functions for common HTTP operations\nexport const apiRequest = {\n  get: (url, config) => httpClient.get(url, config).then(response => response.data),\n  post: (url, data, config) => httpClient.post(url, data, config).then(response => response.data),\n  put: (url, data, config) => httpClient.put(url, data, config).then(response => response.data),\n  patch: (url, data, config) => httpClient.patch(url, data, config).then(response => response.data),\n  delete: (url, config) => httpClient.delete(url, config).then(response => response.data)\n};\n\n// Re-export tokenManager for backward compatibility\nexport { tokenManager };\nexport default httpClient;","map":{"version":3,"names":["axios","tokenManager","createHttpClient","baseURL","process","env","REACT_APP_API_URL","client","create","timeout","headers","interceptors","request","use","config","_config$method","authHeader","getAuthHeader","Authorization","metadata","startTime","performance","now","performanceId","method","toUpperCase","url","error","Promise","reject","response","_error$response","_error$response2","originalRequest","status","_retry","refreshToken","getRefreshToken","post","refresh_token","access_token","expires_in","data","updateAccessToken","refreshError","clearTokens","window","location","href","responseData","apiError","code","message","field_errors","timestamp","Date","toISOString","httpClient","apiRequest","get","then","put","patch","delete"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/services/httpClient.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';\nimport { toast } from 'react-hot-toast';\nimport { ApiError } from '../types';\nimport { tokenManager } from '../utils/tokenManager';\nimport { OfflineQueue } from '../utils/offlineQueue';\nimport { PerformanceMonitor } from '../utils/performanceMonitor';\n\n// Create axios instance with base configuration\nconst createHttpClient = (): AxiosInstance => {\n  const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  \n  const client = axios.create({\n    baseURL,\n    timeout: 10000,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  // Request interceptor for authentication and performance tracking\n  client.interceptors.request.use(\n    (config) => {\n      const authHeader = tokenManager.getAuthHeader();\n      if (authHeader) {\n        config.headers.Authorization = authHeader;\n      }\n      \n      // Add performance tracking metadata\n      config.metadata = {\n        startTime: performance.now(),\n        performanceId: `${config.method?.toUpperCase()}_${config.url}`,\n      };\n      \n      return config;\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n\n  // Response interceptor for error handling and token refresh\n  client.interceptors.response.use(\n    (response: AxiosResponse) => {\n      return response;\n    },\n    async (error: AxiosError) => {\n      const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean };\n\n      // Handle 401 errors (unauthorized)\n      if (error.response?.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n\n        try {\n          const refreshToken = tokenManager.getRefreshToken();\n          if (refreshToken) {\n            const response = await axios.post(`${baseURL}/auth/refresh`, {\n              refresh_token: refreshToken,\n            });\n\n            const { access_token, expires_in } = response.data;\n            tokenManager.updateAccessToken(access_token, expires_in);\n\n            // Retry the original request with new token\n            if (originalRequest.headers) {\n              originalRequest.headers.Authorization = `Bearer ${access_token}`;\n            }\n            return client(originalRequest);\n          }\n        } catch (refreshError) {\n          // Refresh failed, clear tokens and redirect to login\n          tokenManager.clearTokens();\n          window.location.href = '/login';\n          return Promise.reject(refreshError);\n        }\n      }\n\n      // Transform error response to standardized format\n      const responseData = error.response?.data as any;\n      const apiError: ApiError = {\n        code: responseData?.code || 'UNKNOWN_ERROR',\n        message: responseData?.message || error.message || 'An unexpected error occurred',\n        field_errors: responseData?.field_errors,\n        timestamp: new Date().toISOString(),\n      };\n\n      return Promise.reject(apiError);\n    }\n  );\n\n  return client;\n};\n\n// Create and export the HTTP client instance\nexport const httpClient = createHttpClient();\n\n// Utility functions for common HTTP operations\nexport const apiRequest = {\n  get: <T>(url: string, config?: AxiosRequestConfig): Promise<T> =>\n    httpClient.get(url, config).then((response) => response.data),\n\n  post: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    httpClient.post(url, data, config).then((response) => response.data),\n\n  put: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    httpClient.put(url, data, config).then((response) => response.data),\n\n  patch: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    httpClient.patch(url, data, config).then((response) => response.data),\n\n  delete: <T>(url: string, config?: AxiosRequestConfig): Promise<T> =>\n    httpClient.delete(url, config).then((response) => response.data),\n};\n\n// Re-export tokenManager for backward compatibility\nexport { tokenManager };\n\nexport default httpClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}