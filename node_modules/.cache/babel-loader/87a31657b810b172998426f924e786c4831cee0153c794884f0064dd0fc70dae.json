{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$(),\n  _s0 = $RefreshSig$(),\n  _s1 = $RefreshSig$(),\n  _s10 = $RefreshSig$(),\n  _s11 = $RefreshSig$(),\n  _s12 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-hot-toast';\nimport { authService } from '../services';\nimport { queryKeys } from '../lib/queryClient';\n// Query hooks\nexport const useCurrentUser = () => {\n  _s();\n  return useQuery({\n    queryKey: queryKeys.auth.user,\n    queryFn: () => authService.getCurrentUser(),\n    staleTime: 10 * 60 * 1000,\n    // 10 minutes\n    retry: false,\n    // Don't retry auth queries to avoid infinite loops\n    enabled: authService.isAuthenticated()\n  });\n};\n_s(useCurrentUser, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useVerifyToken = () => {\n  _s2();\n  return useQuery({\n    queryKey: queryKeys.auth.verify,\n    queryFn: () => authService.verifyToken(),\n    staleTime: 5 * 60 * 1000,\n    // 5 minutes\n    retry: false,\n    enabled: authService.isAuthenticated()\n  });\n};\n\n// Mutation hooks\n_s2(useVerifyToken, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useLogin = () => {\n  _s3();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: credentials => authService.login(credentials),\n    onSuccess: data => {\n      // Set user data in cache\n      queryClient.setQueryData(queryKeys.auth.user, data.user);\n      queryClient.setQueryData(queryKeys.auth.verify, true);\n      toast.success(`Welcome back, ${data.user.first_name}!`);\n\n      // Prefetch dashboard data after login\n      queryClient.prefetchQuery({\n        queryKey: queryKeys.statistics.dashboard(),\n        queryFn: () => import('../services').then(({\n          statisticsService\n        }) => statisticsService.getDashboardSummary())\n      });\n    },\n    onError: error => {\n      toast.error(error.message || 'Login failed');\n    }\n  });\n};\n_s3(useLogin, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useRegister = () => {\n  _s4();\n  return useMutation({\n    mutationFn: userData => authService.register(userData),\n    onSuccess: () => {\n      toast.success('Registration successful! Please log in.');\n    },\n    onError: error => {\n      toast.error(error.message || 'Registration failed');\n    }\n  });\n};\n_s4(useRegister, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [useMutation];\n});\nexport const useLogout = () => {\n  _s5();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: () => authService.logout(),\n    onSuccess: () => {\n      // Clear all cached data\n      queryClient.clear();\n\n      // Remove user data from cache\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      toast.success('Logged out successfully');\n    },\n    onError: () => {\n      // Even if logout API fails, clear local data\n      queryClient.clear();\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      toast.success('Logged out successfully');\n    }\n  });\n};\n_s5(useLogout, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useRefreshToken = () => {\n  _s6();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: () => authService.refreshToken(),\n    onSuccess: () => {\n      // Token refreshed successfully, update verification status\n      queryClient.setQueryData(queryKeys.auth.verify, true);\n    },\n    onError: () => {\n      // Refresh failed, clear auth data and redirect to login\n      queryClient.clear();\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      toast.error('Session expired. Please log in again.');\n\n      // Redirect to login page\n      window.location.href = '/login';\n    }\n  });\n};\n_s6(useRefreshToken, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useRequestPasswordReset = () => {\n  _s7();\n  return useMutation({\n    mutationFn: email => authService.requestPasswordReset(email),\n    onSuccess: () => {\n      toast.success('Password reset email sent. Please check your inbox.');\n    },\n    onError: error => {\n      toast.error(error.message || 'Failed to send password reset email');\n    }\n  });\n};\n_s7(useRequestPasswordReset, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [useMutation];\n});\nexport const useResetPassword = () => {\n  _s8();\n  return useMutation({\n    mutationFn: ({\n      token,\n      newPassword\n    }) => authService.resetPassword(token, newPassword),\n    onSuccess: () => {\n      toast.success('Password reset successfully. Please log in with your new password.');\n    },\n    onError: error => {\n      toast.error(error.message || 'Failed to reset password');\n    }\n  });\n};\n_s8(useResetPassword, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [useMutation];\n});\nexport const useChangePassword = () => {\n  _s9();\n  return useMutation({\n    mutationFn: ({\n      currentPassword,\n      newPassword\n    }) => authService.changePassword(currentPassword, newPassword),\n    onSuccess: () => {\n      toast.success('Password changed successfully');\n    },\n    onError: error => {\n      toast.error(error.message || 'Failed to change password');\n    }\n  });\n};\n\n// Combined hooks and utilities - use AuthContext directly\n_s9(useChangePassword, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [useMutation];\n});\nexport const useAuth = () => {\n  _s0();\n  // Import and use AuthContext directly\n  const {\n    useAuthContext\n  } = require('../providers/AuthProvider');\n  return useAuthContext();\n};\n_s0(useAuth, \"BR1i9Fg1bIbwPO0SJiHlKOGIma4=\", true);\nexport const useAuthGuard = () => {\n  _s1();\n  const {\n    isAuthenticated,\n    isLoading,\n    user\n  } = useAuth();\n  return {\n    isAuthenticated,\n    isLoading,\n    user,\n    canAccess: isAuthenticated && !isLoading,\n    shouldRedirect: !isAuthenticated && !isLoading\n  };\n};\n_s1(useAuthGuard, \"dRMuwJKhnJOfZ5vJGRuol568QeA=\", false, function () {\n  return [useAuth];\n});\nexport const useUserProfile = () => {\n  _s10();\n  const userQuery = useCurrentUser();\n  const changePasswordMutation = useChangePassword();\n  return {\n    user: userQuery.data,\n    isLoading: userQuery.isLoading,\n    error: userQuery.error,\n    refetch: userQuery.refetch,\n    // Password change\n    changePassword: changePasswordMutation.mutate,\n    isChangingPassword: changePasswordMutation.isPending,\n    changePasswordError: changePasswordMutation.error\n  };\n};\n\n// Session management hooks\n_s10(useUserProfile, \"k28pdK/M/yuXtVPMH64phr8sFzc=\", false, function () {\n  return [useCurrentUser, useChangePassword];\n});\nexport const useSessionManager = () => {\n  _s11();\n  const queryClient = useQueryClient();\n  const refreshTokenMutation = useRefreshToken();\n  const checkSession = async () => {\n    if (!authService.isAuthenticated()) {\n      return false;\n    }\n    try {\n      const isValid = await authService.verifyToken();\n      return isValid;\n    } catch (error) {\n      return false;\n    }\n  };\n  const refreshSession = () => {\n    refreshTokenMutation.mutate();\n  };\n  const clearSession = () => {\n    queryClient.clear();\n    queryClient.removeQueries(queryKeys.auth.user);\n    queryClient.removeQueries(queryKeys.auth.verify);\n  };\n  return {\n    checkSession,\n    refreshSession,\n    clearSession,\n    isRefreshing: refreshTokenMutation.isPending\n  };\n};\n\n// Auto-refresh token hook\n_s11(useSessionManager, \"HhhD5zWRKMVghagp2D3KnJm04NE=\", false, function () {\n  return [useQueryClient, useRefreshToken];\n});\nexport const useAutoRefreshToken = () => {\n  _s12();\n  const refreshTokenMutation = useRefreshToken();\n\n  // This would typically be used in a useEffect to set up automatic token refresh\n  const setupAutoRefresh = (intervalMinutes = 15) => {\n    if (!authService.isAuthenticated()) {\n      return;\n    }\n    const interval = setInterval(() => {\n      if (authService.isAuthenticated()) {\n        refreshTokenMutation.mutate();\n      } else {\n        clearInterval(interval);\n      }\n    }, intervalMinutes * 60 * 1000);\n    return () => clearInterval(interval);\n  };\n  return {\n    setupAutoRefresh,\n    isRefreshing: refreshTokenMutation.isPending\n  };\n};\n_s12(useAutoRefreshToken, \"Av34PCxpnAUX1cTIPOuDbYO52sQ=\", false, function () {\n  return [useRefreshToken];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","toast","authService","queryKeys","useCurrentUser","_s","queryKey","auth","user","queryFn","getCurrentUser","staleTime","retry","enabled","isAuthenticated","useVerifyToken","_s2","verify","verifyToken","useLogin","_s3","queryClient","mutationFn","credentials","login","onSuccess","data","setQueryData","success","first_name","prefetchQuery","statistics","dashboard","then","statisticsService","getDashboardSummary","onError","error","message","useRegister","_s4","userData","register","useLogout","_s5","logout","clear","removeQueries","useRefreshToken","_s6","refreshToken","window","location","href","useRequestPasswordReset","_s7","email","requestPasswordReset","useResetPassword","_s8","token","newPassword","resetPassword","useChangePassword","_s9","currentPassword","changePassword","useAuth","_s0","useAuthContext","require","useAuthGuard","_s1","isLoading","canAccess","shouldRedirect","useUserProfile","_s10","userQuery","changePasswordMutation","refetch","mutate","isChangingPassword","isPending","changePasswordError","useSessionManager","_s11","refreshTokenMutation","checkSession","isValid","refreshSession","clearSession","isRefreshing","useAutoRefreshToken","_s12","setupAutoRefresh","intervalMinutes","interval","setInterval","clearInterval"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-hot-toast';\nimport { authService } from '../services';\nimport { queryKeys } from '../lib/queryClient';\nimport {\n  AuthResponse,\n  LoginCredentials,\n  RegisterData,\n} from '../types';\n\n// Query hooks\nexport const useCurrentUser = () => {\n  return useQuery({\n    queryKey: queryKeys.auth.user,\n    queryFn: () => authService.getCurrentUser(),\n    staleTime: 10 * 60 * 1000, // 10 minutes\n    retry: false, // Don't retry auth queries to avoid infinite loops\n    enabled: authService.isAuthenticated(),\n  });\n};\n\nexport const useVerifyToken = () => {\n  return useQuery({\n    queryKey: queryKeys.auth.verify,\n    queryFn: () => authService.verifyToken(),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: false,\n    enabled: authService.isAuthenticated(),\n  });\n};\n\n// Mutation hooks\nexport const useLogin = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (credentials: LoginCredentials) => authService.login(credentials),\n    onSuccess: (data: AuthResponse) => {\n      // Set user data in cache\n      queryClient.setQueryData(queryKeys.auth.user, data.user);\n      queryClient.setQueryData(queryKeys.auth.verify, true);\n      \n      toast.success(`Welcome back, ${data.user.first_name}!`);\n      \n      // Prefetch dashboard data after login\n      queryClient.prefetchQuery({\n        queryKey: queryKeys.statistics.dashboard(),\n        queryFn: () => import('../services').then(({ statisticsService }) => statisticsService.getDashboardSummary()),\n      });\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Login failed');\n    },\n  });\n};\n\nexport const useRegister = () => {\n  return useMutation({\n    mutationFn: (userData: RegisterData) => authService.register(userData),\n    onSuccess: () => {\n      toast.success('Registration successful! Please log in.');\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Registration failed');\n    },\n  });\n};\n\nexport const useLogout = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: () => authService.logout(),\n    onSuccess: () => {\n      // Clear all cached data\n      queryClient.clear();\n      \n      // Remove user data from cache\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      \n      toast.success('Logged out successfully');\n    },\n    onError: () => {\n      // Even if logout API fails, clear local data\n      queryClient.clear();\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      \n      toast.success('Logged out successfully');\n    },\n  });\n};\n\nexport const useRefreshToken = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: () => authService.refreshToken(),\n    onSuccess: () => {\n      // Token refreshed successfully, update verification status\n      queryClient.setQueryData(queryKeys.auth.verify, true);\n    },\n    onError: () => {\n      // Refresh failed, clear auth data and redirect to login\n      queryClient.clear();\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      \n      toast.error('Session expired. Please log in again.');\n      \n      // Redirect to login page\n      window.location.href = '/login';\n    },\n  });\n};\n\nexport const useRequestPasswordReset = () => {\n  return useMutation({\n    mutationFn: (email: string) => authService.requestPasswordReset(email),\n    onSuccess: () => {\n      toast.success('Password reset email sent. Please check your inbox.');\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to send password reset email');\n    },\n  });\n};\n\nexport const useResetPassword = () => {\n  return useMutation({\n    mutationFn: ({ token, newPassword }: { token: string; newPassword: string }) =>\n      authService.resetPassword(token, newPassword),\n    onSuccess: () => {\n      toast.success('Password reset successfully. Please log in with your new password.');\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to reset password');\n    },\n  });\n};\n\nexport const useChangePassword = () => {\n  return useMutation({\n    mutationFn: ({ currentPassword, newPassword }: { currentPassword: string; newPassword: string }) =>\n      authService.changePassword(currentPassword, newPassword),\n    onSuccess: () => {\n      toast.success('Password changed successfully');\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to change password');\n    },\n  });\n};\n\n// Combined hooks and utilities - use AuthContext directly\nexport const useAuth = () => {\n  // Import and use AuthContext directly\n  const { useAuthContext } = require('../providers/AuthProvider');\n  return useAuthContext();\n};\n\nexport const useAuthGuard = () => {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  \n  return {\n    isAuthenticated,\n    isLoading,\n    user,\n    canAccess: isAuthenticated && !isLoading,\n    shouldRedirect: !isAuthenticated && !isLoading,\n  };\n};\n\nexport const useUserProfile = () => {\n  const userQuery = useCurrentUser();\n  const changePasswordMutation = useChangePassword();\n  \n  return {\n    user: userQuery.data,\n    isLoading: userQuery.isLoading,\n    error: userQuery.error,\n    refetch: userQuery.refetch,\n    \n    // Password change\n    changePassword: changePasswordMutation.mutate,\n    isChangingPassword: changePasswordMutation.isPending,\n    changePasswordError: changePasswordMutation.error,\n  };\n};\n\n// Session management hooks\nexport const useSessionManager = () => {\n  const queryClient = useQueryClient();\n  const refreshTokenMutation = useRefreshToken();\n  \n  const checkSession = async () => {\n    if (!authService.isAuthenticated()) {\n      return false;\n    }\n    \n    try {\n      const isValid = await authService.verifyToken();\n      return isValid;\n    } catch (error) {\n      return false;\n    }\n  };\n  \n  const refreshSession = () => {\n    refreshTokenMutation.mutate();\n  };\n  \n  const clearSession = () => {\n    queryClient.clear();\n    queryClient.removeQueries(queryKeys.auth.user);\n    queryClient.removeQueries(queryKeys.auth.verify);\n  };\n  \n  return {\n    checkSession,\n    refreshSession,\n    clearSession,\n    isRefreshing: refreshTokenMutation.isPending,\n  };\n};\n\n// Auto-refresh token hook\nexport const useAutoRefreshToken = () => {\n  const refreshTokenMutation = useRefreshToken();\n  \n  // This would typically be used in a useEffect to set up automatic token refresh\n  const setupAutoRefresh = (intervalMinutes: number = 15) => {\n    if (!authService.isAuthenticated()) {\n      return;\n    }\n    \n    const interval = setInterval(() => {\n      if (authService.isAuthenticated()) {\n        refreshTokenMutation.mutate();\n      } else {\n        clearInterval(interval);\n      }\n    }, intervalMinutes * 60 * 1000);\n    \n    return () => clearInterval(interval);\n  };\n  \n  return {\n    setupAutoRefresh,\n    isRefreshing: refreshTokenMutation.isPending,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}