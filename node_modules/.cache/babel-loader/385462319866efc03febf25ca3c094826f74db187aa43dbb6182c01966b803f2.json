{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useEffect, useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { queryKeys } from '../lib/queryClient';\nimport { positionService, interviewService, statisticsService } from '../services';\n\n// Cache warming hook for preloading critical data\nexport const useCacheWarming = () => {\n  _s();\n  const queryClient = useQueryClient();\n  const warmCache = useCallback(async () => {\n    try {\n      // Prefetch positions list (most commonly accessed)\n      await queryClient.prefetchQuery({\n        queryKey: queryKeys.positions.lists(),\n        queryFn: () => positionService.getPositions(),\n        staleTime: 2 * 60 * 1000 // 2 minutes\n      });\n\n      // Prefetch dashboard statistics\n      await queryClient.prefetchQuery({\n        queryKey: queryKeys.statistics.dashboard(),\n        queryFn: () => statisticsService.getDashboardSummary(),\n        staleTime: 5 * 60 * 1000 // 5 minutes\n      });\n\n      // Prefetch upcoming interviews\n      await queryClient.prefetchQuery({\n        queryKey: queryKeys.interviews.upcoming(),\n        queryFn: () => interviewService.getUpcomingInterviews(),\n        staleTime: 2 * 60 * 1000 // 2 minutes\n      });\n\n      // Prefetch today's interviews\n      await queryClient.prefetchQuery({\n        queryKey: queryKeys.interviews.today(),\n        queryFn: () => interviewService.getTodayInterviews(),\n        staleTime: 1 * 60 * 1000 // 1 minute (more frequent for today's data)\n      });\n    } catch (error) {\n      console.warn('Cache warming failed:', error);\n    }\n  }, [queryClient]);\n  useEffect(() => {\n    // Warm cache after a short delay to not block initial render\n    const timer = setTimeout(warmCache, 1000);\n    return () => clearTimeout(timer);\n  }, [warmCache]);\n  return {\n    warmCache\n  };\n};\n\n// Smart prefetching hook based on user behavior\n_s(useCacheWarming, \"IlFj4Hm6b4rpsjra6XyzKahiwiQ=\", false, function () {\n  return [useQueryClient];\n});\nexport const useSmartPrefetch = () => {\n  _s2();\n  const queryClient = useQueryClient();\n  const prefetchOnHover = useCallback((id, type) => {\n    let timer;\n    const startPrefetch = () => {\n      timer = setTimeout(() => {\n        if (type === 'position') {\n          queryClient.prefetchQuery({\n            queryKey: queryKeys.positions.detail(id),\n            queryFn: () => positionService.getPosition(id),\n            staleTime: 5 * 60 * 1000\n          });\n\n          // Also prefetch interviews for this position\n          queryClient.prefetchQuery({\n            queryKey: queryKeys.interviews.list(id),\n            queryFn: () => interviewService.getInterviews(id),\n            staleTime: 2 * 60 * 1000\n          });\n        } else if (type === 'interview') {\n          queryClient.prefetchQuery({\n            queryKey: queryKeys.interviews.detail(id),\n            queryFn: () => interviewService.getInterview(id),\n            staleTime: 5 * 60 * 1000\n          });\n        }\n      }, 200); // 200ms delay to avoid prefetching on quick hovers\n    };\n    const cancelPrefetch = () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n    return {\n      startPrefetch,\n      cancelPrefetch\n    };\n  }, [queryClient]);\n  const prefetchPositionDetails = useCallback(id => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.positions.detail(id),\n      queryFn: () => positionService.getPosition(id),\n      staleTime: 5 * 60 * 1000\n    });\n  }, [queryClient]);\n  const prefetchPositionInterviews = useCallback(positionId => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.interviews.list(positionId),\n      queryFn: () => interviewService.getInterviews(positionId),\n      staleTime: 2 * 60 * 1000\n    });\n  }, [queryClient]);\n  const prefetchRelatedData = useCallback(positionId => {\n    // Prefetch position details\n    prefetchPositionDetails(positionId);\n\n    // Prefetch interviews for this position\n    prefetchPositionInterviews(positionId);\n\n    // Prefetch statistics for this position\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.interviews.stats(positionId),\n      queryFn: () => interviewService.getInterviewStats(positionId),\n      staleTime: 10 * 60 * 1000\n    });\n  }, [queryClient, prefetchPositionDetails, prefetchPositionInterviews]);\n  const prefetchNextPage = useCallback((currentFilters, currentPage) => {\n    // Prefetch next page of positions\n    const nextPageFilters = {\n      ...currentFilters,\n      page: currentPage + 1\n    };\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.positions.list(nextPageFilters),\n      queryFn: () => positionService.getPositions(nextPageFilters),\n      staleTime: 2 * 60 * 1000\n    });\n  }, [queryClient]);\n  const prefetchFilteredData = useCallback(filters => {\n    // Prefetch data with new filters\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.positions.list(filters),\n      queryFn: () => positionService.getPositions(filters),\n      staleTime: 2 * 60 * 1000\n    });\n  }, [queryClient]);\n  return {\n    prefetchOnHover,\n    prefetchPositionDetails,\n    prefetchPositionInterviews,\n    prefetchRelatedData,\n    prefetchNextPage,\n    prefetchFilteredData\n  };\n};\n\n// Intelligent prefetching based on user navigation patterns\n_s2(useSmartPrefetch, \"HC0LwULNKfFtV7V1UpZBHP56jnY=\", false, function () {\n  return [useQueryClient];\n});\nexport const useIntelligentPrefetch = () => {\n  _s3();\n  const queryClient = useQueryClient();\n  const prefetchBasedOnRoute = useCallback(currentRoute => {\n    switch (currentRoute) {\n      case '/dashboard':\n        // Prefetch positions and statistics\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.positions.recent(),\n          queryFn: () => positionService.getRecentPositions(),\n          staleTime: 2 * 60 * 1000\n        });\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.overview(),\n          queryFn: () => statisticsService.getOverview(),\n          staleTime: 5 * 60 * 1000\n        });\n        break;\n      case '/positions':\n        // Prefetch statistics that might be viewed next\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.positions(),\n          queryFn: () => statisticsService.getPositionStats(),\n          staleTime: 10 * 60 * 1000\n        });\n        break;\n      case '/statistics':\n        // Prefetch detailed statistics data\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.interviews(),\n          queryFn: () => statisticsService.getInterviewStats(),\n          staleTime: 10 * 60 * 1000\n        });\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.companies(),\n          queryFn: () => statisticsService.getCompanyStats(),\n          staleTime: 15 * 60 * 1000\n        });\n        break;\n      default:\n        break;\n    }\n  }, [queryClient]);\n  const prefetchBasedOnTime = useCallback(() => {\n    const now = new Date();\n    const hour = now.getHours();\n\n    // Morning: prefetch today's interviews and recent activity\n    if (hour >= 6 && hour < 12) {\n      queryClient.prefetchQuery({\n        queryKey: queryKeys.interviews.today(),\n        queryFn: () => interviewService.getTodayInterviews(),\n        staleTime: 1 * 60 * 1000\n      });\n    }\n\n    // Afternoon: prefetch upcoming interviews and position updates\n    else if (hour >= 12 && hour < 18) {\n      queryClient.prefetchQuery({\n        queryKey: queryKeys.interviews.upcoming(),\n        queryFn: () => interviewService.getUpcomingInterviews(),\n        staleTime: 2 * 60 * 1000\n      });\n    }\n\n    // Evening: prefetch statistics and weekly summaries\n    else if (hour >= 18 || hour < 6) {\n      queryClient.prefetchQuery({\n        queryKey: queryKeys.statistics.overview(),\n        queryFn: () => statisticsService.getOverview(),\n        staleTime: 10 * 60 * 1000\n      });\n    }\n  }, [queryClient]);\n  const prefetchBasedOnUserActivity = useCallback(lastActivity => {\n    // Prefetch data based on user's most common activities\n    switch (lastActivity) {\n      case 'created_position':\n        // User likely to add interviews next\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.interviews.upcoming(),\n          queryFn: () => interviewService.getUpcomingInterviews(),\n          staleTime: 2 * 60 * 1000\n        });\n        break;\n      case 'updated_interview':\n        // User likely to check statistics next\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.overview(),\n          queryFn: () => statisticsService.getOverview(),\n          staleTime: 5 * 60 * 1000\n        });\n        break;\n      case 'viewed_statistics':\n        // User likely to go back to positions\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.positions.lists(),\n          queryFn: () => positionService.getPositions(),\n          staleTime: 2 * 60 * 1000\n        });\n        break;\n      default:\n        break;\n    }\n  }, [queryClient]);\n  return {\n    prefetchBasedOnRoute,\n    prefetchBasedOnTime,\n    prefetchBasedOnUserActivity\n  };\n};\n\n// Background prefetching for idle time\n_s3(useIntelligentPrefetch, \"anyv78biaIKm62m1exao+L/jwGw=\", false, function () {\n  return [useQueryClient];\n});\nexport const useIdlePrefetch = () => {\n  _s4();\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    let idleTimer;\n    let isIdle = false;\n    const resetIdleTimer = () => {\n      clearTimeout(idleTimer);\n      isIdle = false;\n      idleTimer = setTimeout(() => {\n        isIdle = true;\n        performIdlePrefetch();\n      }, 30000); // 30 seconds of inactivity\n    };\n    const performIdlePrefetch = async () => {\n      if (!isIdle) return;\n      try {\n        // Prefetch less critical data during idle time\n        await queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.companies(),\n          queryFn: () => statisticsService.getCompanyStats(),\n          staleTime: 15 * 60 * 1000\n        });\n        await queryClient.prefetchQuery({\n          queryKey: queryKeys.interviews.overdue(),\n          queryFn: () => interviewService.getOverdueInterviews(),\n          staleTime: 5 * 60 * 1000\n        });\n\n        // Prefetch monthly statistics for current year\n        const currentYear = new Date().getFullYear();\n        await queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.monthly(currentYear),\n          queryFn: () => statisticsService.getMonthlyStats(currentYear),\n          staleTime: 30 * 60 * 1000\n        });\n      } catch (error) {\n        console.warn('Idle prefetch failed:', error);\n      }\n    };\n\n    // Set up event listeners for user activity\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\n    events.forEach(event => {\n      document.addEventListener(event, resetIdleTimer, true);\n    });\n\n    // Start the idle timer\n    resetIdleTimer();\n    return () => {\n      clearTimeout(idleTimer);\n      events.forEach(event => {\n        document.removeEventListener(event, resetIdleTimer, true);\n      });\n    };\n  }, [queryClient]);\n};\n_s4(useIdlePrefetch, \"aixO0mo1bdM1nWLRolCdKzppx/I=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"names":["useEffect","useCallback","useQueryClient","queryKeys","positionService","interviewService","statisticsService","useCacheWarming","_s","queryClient","warmCache","prefetchQuery","queryKey","positions","lists","queryFn","getPositions","staleTime","statistics","dashboard","getDashboardSummary","interviews","upcoming","getUpcomingInterviews","today","getTodayInterviews","error","console","warn","timer","setTimeout","clearTimeout","useSmartPrefetch","_s2","prefetchOnHover","id","type","startPrefetch","detail","getPosition","list","getInterviews","getInterview","cancelPrefetch","prefetchPositionDetails","prefetchPositionInterviews","positionId","prefetchRelatedData","stats","getInterviewStats","prefetchNextPage","currentFilters","currentPage","nextPageFilters","page","prefetchFilteredData","filters","useIntelligentPrefetch","_s3","prefetchBasedOnRoute","currentRoute","recent","getRecentPositions","overview","getOverview","getPositionStats","companies","getCompanyStats","prefetchBasedOnTime","now","Date","hour","getHours","prefetchBasedOnUserActivity","lastActivity","useIdlePrefetch","_s4","idleTimer","isIdle","resetIdleTimer","performIdlePrefetch","overdue","getOverdueInterviews","currentYear","getFullYear","monthly","getMonthlyStats","events","forEach","event","document","addEventListener","removeEventListener"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/hooks/useCacheWarming.ts"],"sourcesContent":["import { useEffect, useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { queryKeys } from '../lib/queryClient';\nimport { positionService, interviewService, statisticsService } from '../services';\n\n// Cache warming hook for preloading critical data\nexport const useCacheWarming = () => {\n  const queryClient = useQueryClient();\n\n  const warmCache = useCallback(async () => {\n    try {\n      // Prefetch positions list (most commonly accessed)\n      await queryClient.prefetchQuery({\n        queryKey: queryKeys.positions.lists(),\n        queryFn: () => positionService.getPositions(),\n        staleTime: 2 * 60 * 1000, // 2 minutes\n      });\n\n      // Prefetch dashboard statistics\n      await queryClient.prefetchQuery({\n        queryKey: queryKeys.statistics.dashboard(),\n        queryFn: () => statisticsService.getDashboardSummary(),\n        staleTime: 5 * 60 * 1000, // 5 minutes\n      });\n\n      // Prefetch upcoming interviews\n      await queryClient.prefetchQuery({\n        queryKey: queryKeys.interviews.upcoming(),\n        queryFn: () => interviewService.getUpcomingInterviews(),\n        staleTime: 2 * 60 * 1000, // 2 minutes\n      });\n\n      // Prefetch today's interviews\n      await queryClient.prefetchQuery({\n        queryKey: queryKeys.interviews.today(),\n        queryFn: () => interviewService.getTodayInterviews(),\n        staleTime: 1 * 60 * 1000, // 1 minute (more frequent for today's data)\n      });\n\n    } catch (error) {\n      console.warn('Cache warming failed:', error);\n    }\n  }, [queryClient]);\n\n  useEffect(() => {\n    // Warm cache after a short delay to not block initial render\n    const timer = setTimeout(warmCache, 1000);\n    return () => clearTimeout(timer);\n  }, [warmCache]);\n\n  return { warmCache };\n};\n\n// Smart prefetching hook based on user behavior\nexport const useSmartPrefetch = () => {\n  const queryClient = useQueryClient();\n\n  const prefetchOnHover = useCallback((id: string, type: 'position' | 'interview') => {\n    let timer: NodeJS.Timeout;\n\n    const startPrefetch = () => {\n      timer = setTimeout(() => {\n        if (type === 'position') {\n          queryClient.prefetchQuery({\n            queryKey: queryKeys.positions.detail(id),\n            queryFn: () => positionService.getPosition(id),\n            staleTime: 5 * 60 * 1000,\n          });\n\n          // Also prefetch interviews for this position\n          queryClient.prefetchQuery({\n            queryKey: queryKeys.interviews.list(id),\n            queryFn: () => interviewService.getInterviews(id),\n            staleTime: 2 * 60 * 1000,\n          });\n        } else if (type === 'interview') {\n          queryClient.prefetchQuery({\n            queryKey: queryKeys.interviews.detail(id),\n            queryFn: () => interviewService.getInterview(id),\n            staleTime: 5 * 60 * 1000,\n          });\n        }\n      }, 200); // 200ms delay to avoid prefetching on quick hovers\n    };\n\n    const cancelPrefetch = () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n\n    return { startPrefetch, cancelPrefetch };\n  }, [queryClient]);\n\n  const prefetchPositionDetails = useCallback((id: string) => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.positions.detail(id),\n      queryFn: () => positionService.getPosition(id),\n      staleTime: 5 * 60 * 1000,\n    });\n  }, [queryClient]);\n\n  const prefetchPositionInterviews = useCallback((positionId: string) => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.interviews.list(positionId),\n      queryFn: () => interviewService.getInterviews(positionId),\n      staleTime: 2 * 60 * 1000,\n    });\n  }, [queryClient]);\n\n  const prefetchRelatedData = useCallback((positionId: string) => {\n    // Prefetch position details\n    prefetchPositionDetails(positionId);\n    \n    // Prefetch interviews for this position\n    prefetchPositionInterviews(positionId);\n    \n    // Prefetch statistics for this position\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.interviews.stats(positionId),\n      queryFn: () => interviewService.getInterviewStats(positionId),\n      staleTime: 10 * 60 * 1000,\n    });\n  }, [queryClient, prefetchPositionDetails, prefetchPositionInterviews]);\n\n  const prefetchNextPage = useCallback((currentFilters: any, currentPage: number) => {\n    // Prefetch next page of positions\n    const nextPageFilters = { ...currentFilters, page: currentPage + 1 };\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.positions.list(nextPageFilters),\n      queryFn: () => positionService.getPositions(nextPageFilters),\n      staleTime: 2 * 60 * 1000,\n    });\n  }, [queryClient]);\n\n  const prefetchFilteredData = useCallback((filters: any) => {\n    // Prefetch data with new filters\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.positions.list(filters),\n      queryFn: () => positionService.getPositions(filters),\n      staleTime: 2 * 60 * 1000,\n    });\n  }, [queryClient]);\n\n  return {\n    prefetchOnHover,\n    prefetchPositionDetails,\n    prefetchPositionInterviews,\n    prefetchRelatedData,\n    prefetchNextPage,\n    prefetchFilteredData,\n  };\n};\n\n// Intelligent prefetching based on user navigation patterns\nexport const useIntelligentPrefetch = () => {\n  const queryClient = useQueryClient();\n\n  const prefetchBasedOnRoute = useCallback((currentRoute: string) => {\n    switch (currentRoute) {\n      case '/dashboard':\n        // Prefetch positions and statistics\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.positions.recent(),\n          queryFn: () => positionService.getRecentPositions(),\n          staleTime: 2 * 60 * 1000,\n        });\n        \n        queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.overview(),\n          queryFn: () => statisticsService.getOverview(),\n          staleTime: 5 * 60 * 1000,\n        });\n        break;\n\n      case '/positions':\n        // Prefetch statistics that might be viewed next\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.positions(),\n          queryFn: () => statisticsService.getPositionStats(),\n          staleTime: 10 * 60 * 1000,\n        });\n        break;\n\n      case '/statistics':\n        // Prefetch detailed statistics data\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.interviews(),\n          queryFn: () => statisticsService.getInterviewStats(),\n          staleTime: 10 * 60 * 1000,\n        });\n        \n        queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.companies(),\n          queryFn: () => statisticsService.getCompanyStats(),\n          staleTime: 15 * 60 * 1000,\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, [queryClient]);\n\n  const prefetchBasedOnTime = useCallback(() => {\n    const now = new Date();\n    const hour = now.getHours();\n\n    // Morning: prefetch today's interviews and recent activity\n    if (hour >= 6 && hour < 12) {\n      queryClient.prefetchQuery({\n        queryKey: queryKeys.interviews.today(),\n        queryFn: () => interviewService.getTodayInterviews(),\n        staleTime: 1 * 60 * 1000,\n      });\n    }\n    \n    // Afternoon: prefetch upcoming interviews and position updates\n    else if (hour >= 12 && hour < 18) {\n      queryClient.prefetchQuery({\n        queryKey: queryKeys.interviews.upcoming(),\n        queryFn: () => interviewService.getUpcomingInterviews(),\n        staleTime: 2 * 60 * 1000,\n      });\n    }\n    \n    // Evening: prefetch statistics and weekly summaries\n    else if (hour >= 18 || hour < 6) {\n      queryClient.prefetchQuery({\n        queryKey: queryKeys.statistics.overview(),\n        queryFn: () => statisticsService.getOverview(),\n        staleTime: 10 * 60 * 1000,\n      });\n    }\n  }, [queryClient]);\n\n  const prefetchBasedOnUserActivity = useCallback((lastActivity: string) => {\n    // Prefetch data based on user's most common activities\n    switch (lastActivity) {\n      case 'created_position':\n        // User likely to add interviews next\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.interviews.upcoming(),\n          queryFn: () => interviewService.getUpcomingInterviews(),\n          staleTime: 2 * 60 * 1000,\n        });\n        break;\n\n      case 'updated_interview':\n        // User likely to check statistics next\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.overview(),\n          queryFn: () => statisticsService.getOverview(),\n          staleTime: 5 * 60 * 1000,\n        });\n        break;\n\n      case 'viewed_statistics':\n        // User likely to go back to positions\n        queryClient.prefetchQuery({\n          queryKey: queryKeys.positions.lists(),\n          queryFn: () => positionService.getPositions(),\n          staleTime: 2 * 60 * 1000,\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, [queryClient]);\n\n  return {\n    prefetchBasedOnRoute,\n    prefetchBasedOnTime,\n    prefetchBasedOnUserActivity,\n  };\n};\n\n// Background prefetching for idle time\nexport const useIdlePrefetch = () => {\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    let idleTimer: NodeJS.Timeout;\n    let isIdle = false;\n\n    const resetIdleTimer = () => {\n      clearTimeout(idleTimer);\n      isIdle = false;\n      \n      idleTimer = setTimeout(() => {\n        isIdle = true;\n        performIdlePrefetch();\n      }, 30000); // 30 seconds of inactivity\n    };\n\n    const performIdlePrefetch = async () => {\n      if (!isIdle) return;\n\n      try {\n        // Prefetch less critical data during idle time\n        await queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.companies(),\n          queryFn: () => statisticsService.getCompanyStats(),\n          staleTime: 15 * 60 * 1000,\n        });\n\n        await queryClient.prefetchQuery({\n          queryKey: queryKeys.interviews.overdue(),\n          queryFn: () => interviewService.getOverdueInterviews(),\n          staleTime: 5 * 60 * 1000,\n        });\n\n        // Prefetch monthly statistics for current year\n        const currentYear = new Date().getFullYear();\n        await queryClient.prefetchQuery({\n          queryKey: queryKeys.statistics.monthly(currentYear),\n          queryFn: () => statisticsService.getMonthlyStats(currentYear),\n          staleTime: 30 * 60 * 1000,\n        });\n\n      } catch (error) {\n        console.warn('Idle prefetch failed:', error);\n      }\n    };\n\n    // Set up event listeners for user activity\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\n    events.forEach(event => {\n      document.addEventListener(event, resetIdleTimer, true);\n    });\n\n    // Start the idle timer\n    resetIdleTimer();\n\n    return () => {\n      clearTimeout(idleTimer);\n      events.forEach(event => {\n        document.removeEventListener(event, resetIdleTimer, true);\n      });\n    };\n  }, [queryClient]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}