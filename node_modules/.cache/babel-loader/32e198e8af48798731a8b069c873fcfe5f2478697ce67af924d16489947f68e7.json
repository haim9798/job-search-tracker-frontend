{"ast":null,"code":"var _jsxFileName = \"/home/haim/github/job-search-tracker-api/frontend/src/contexts/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [isHighContrast, setIsHighContrast] = useState(() => {\n    // Check localStorage first, then system preference\n    const stored = localStorage.getItem('high-contrast');\n    if (stored !== null) {\n      return stored === 'true';\n    }\n    // Check system preference\n    return window.matchMedia('(prefers-contrast: high)').matches;\n  });\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const stored = localStorage.getItem('dark-mode');\n    if (stored !== null) {\n      return stored === 'true';\n    }\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n  useEffect(() => {\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      if (!localStorage.getItem('dark-mode')) {\n        setIsDarkMode(e.matches);\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  useEffect(() => {\n    // Listen for system contrast changes\n    const mediaQuery = window.matchMedia('(prefers-contrast: high)');\n    const handleChange = e => {\n      if (!localStorage.getItem('high-contrast')) {\n        setIsHighContrast(e.matches);\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  useEffect(() => {\n    // Apply theme classes to document\n    const root = document.documentElement;\n    if (isHighContrast) {\n      root.classList.add('high-contrast');\n    } else {\n      root.classList.remove('high-contrast');\n    }\n    if (isDarkMode) {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n\n    // Store preferences\n    localStorage.setItem('high-contrast', isHighContrast.toString());\n    localStorage.setItem('dark-mode', isDarkMode.toString());\n  }, [isHighContrast, isDarkMode]);\n  const toggleHighContrast = () => {\n    setIsHighContrast(prev => !prev);\n  };\n  const toggleDarkMode = () => {\n    setIsDarkMode(prev => !prev);\n  };\n  const value = {\n    isHighContrast,\n    toggleHighContrast,\n    isDarkMode,\n    toggleDarkMode\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"1K5i7sUMB1za46k+zApeVdOlpZU=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","ThemeContext","undefined","useTheme","_s","context","Error","ThemeProvider","children","_s2","isHighContrast","setIsHighContrast","stored","localStorage","getItem","window","matchMedia","matches","isDarkMode","setIsDarkMode","mediaQuery","handleChange","e","addEventListener","removeEventListener","root","document","documentElement","classList","add","remove","setItem","toString","toggleHighContrast","prev","toggleDarkMode","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface ThemeContextType {\n  isHighContrast: boolean;\n  toggleHighContrast: () => void;\n  isDarkMode: boolean;\n  toggleDarkMode: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [isHighContrast, setIsHighContrast] = useState(() => {\n    // Check localStorage first, then system preference\n    const stored = localStorage.getItem('high-contrast');\n    if (stored !== null) {\n      return stored === 'true';\n    }\n    // Check system preference\n    return window.matchMedia('(prefers-contrast: high)').matches;\n  });\n\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const stored = localStorage.getItem('dark-mode');\n    if (stored !== null) {\n      return stored === 'true';\n    }\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n\n  useEffect(() => {\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      if (!localStorage.getItem('dark-mode')) {\n        setIsDarkMode(e.matches);\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  useEffect(() => {\n    // Listen for system contrast changes\n    const mediaQuery = window.matchMedia('(prefers-contrast: high)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      if (!localStorage.getItem('high-contrast')) {\n        setIsHighContrast(e.matches);\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  useEffect(() => {\n    // Apply theme classes to document\n    const root = document.documentElement;\n    \n    if (isHighContrast) {\n      root.classList.add('high-contrast');\n    } else {\n      root.classList.remove('high-contrast');\n    }\n\n    if (isDarkMode) {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n\n    // Store preferences\n    localStorage.setItem('high-contrast', isHighContrast.toString());\n    localStorage.setItem('dark-mode', isDarkMode.toString());\n  }, [isHighContrast, isDarkMode]);\n\n  const toggleHighContrast = () => {\n    setIsHighContrast(prev => !prev);\n  };\n\n  const toggleDarkMode = () => {\n    setIsDarkMode(prev => !prev);\n  };\n\n  const value = {\n    isHighContrast,\n    toggleHighContrast,\n    isDarkMode,\n    toggleDarkMode,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}