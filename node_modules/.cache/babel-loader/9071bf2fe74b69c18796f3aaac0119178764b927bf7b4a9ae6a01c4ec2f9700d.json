{"ast":null,"code":"import{apiRequest}from'./httpClient';class PositionService{/**\n   * Get all positions with optional filtering\n   */async getPositions(filters){const params=new URLSearchParams();if(filters){if(filters.status)params.append('status',filters.status);if(filters.company)params.append('company',filters.company);if(filters.search)params.append('search',filters.search);if(filters.date_from)params.append('date_from',filters.date_from);if(filters.date_to)params.append('date_to',filters.date_to);}const queryString=params.toString();const url=queryString?\"/positions?\".concat(queryString):'/positions';return apiRequest.get(url);}/**\n   * Get a single position by ID\n   */async getPosition(id){return apiRequest.get(\"/positions/\".concat(id));}/**\n   * Create a new position\n   */async createPosition(data){return apiRequest.post('/positions',data);}/**\n   * Update an existing position\n   */async updatePosition(id,data){return apiRequest.put(\"/positions/\".concat(id),data);}/**\n   * Partially update a position (PATCH)\n   */async patchPosition(id,data){return apiRequest.patch(\"/positions/\".concat(id),data);}/**\n   * Delete a position\n   */async deletePosition(id){return apiRequest.delete(\"/positions/\".concat(id));}/**\n   * Update position status only\n   */async updatePositionStatus(id,status){return apiRequest.patch(\"/positions/\".concat(id),{status});}/**\n   * Get positions by status\n   */async getPositionsByStatus(status){const response=await this.getPositions({status});return response.positions;}/**\n   * Search positions by query\n   */async searchPositions(query){const response=await this.getPositions({search:query});return response.positions;}/**\n   * Get positions for a specific company\n   */async getPositionsByCompany(company){const response=await this.getPositions({company});return response.positions;}/**\n   * Get positions within date range\n   */async getPositionsByDateRange(dateFrom,dateTo){const response=await this.getPositions({date_from:dateFrom,date_to:dateTo});return response.positions;}/**\n   * Get recent positions (last 30 days)\n   */async getRecentPositions(){const thirtyDaysAgo=new Date();thirtyDaysAgo.setDate(thirtyDaysAgo.getDate()-30);const response=await this.getPositions({date_from:thirtyDaysAgo.toISOString().split('T')[0]});return response.positions;}/**\n   * Duplicate a position (create copy)\n   */async duplicatePosition(id){const originalPosition=await this.getPosition(id);const duplicateData={title:\"\".concat(originalPosition.title,\" (Copy)\"),company:originalPosition.company,description:originalPosition.description,location:originalPosition.location,salary_range:originalPosition.salary_range,status:'applied',// Reset status for duplicate\napplication_date:new Date().toISOString().split('T')[0]};return this.createPosition(duplicateData);}/**\n   * Archive a position (soft delete by changing status)\n   */async archivePosition(id){return this.updatePositionStatus(id,'withdrawn');}/**\n   * Get position summary statistics\n   */async getPositionSummary(){const[allPositions,recentPositions]=await Promise.all([this.getPositions(),this.getRecentPositions()]);const byStatus=allPositions.positions.reduce((acc,position)=>{acc[position.status]=(acc[position.status]||0)+1;return acc;},{});return{total:allPositions.positions.length,byStatus,recentCount:recentPositions.length};}}// Export singleton instance\nexport const positionService=new PositionService();export default positionService;","map":{"version":3,"names":["apiRequest","PositionService","getPositions","filters","params","URLSearchParams","status","append","company","search","date_from","date_to","queryString","toString","url","concat","get","getPosition","id","createPosition","data","post","updatePosition","put","patchPosition","patch","deletePosition","delete","updatePositionStatus","getPositionsByStatus","response","positions","searchPositions","query","getPositionsByCompany","getPositionsByDateRange","dateFrom","dateTo","getRecentPositions","thirtyDaysAgo","Date","setDate","getDate","toISOString","split","duplicatePosition","originalPosition","duplicateData","title","description","location","salary_range","application_date","archivePosition","getPositionSummary","allPositions","recentPositions","Promise","all","byStatus","reduce","acc","position","total","length","recentCount","positionService"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/services/positionService.ts"],"sourcesContent":["import { apiRequest } from './httpClient';\nimport {\n  Position,\n  PositionListResponse,\n  CreatePositionData,\n  UpdatePositionData,\n  PositionFilters,\n} from '../types';\n\nclass PositionService {\n  /**\n   * Get all positions with optional filtering\n   */\n  async getPositions(filters?: PositionFilters): Promise<PositionListResponse> {\n    const params = new URLSearchParams();\n    \n    if (filters) {\n      if (filters.status) params.append('status', filters.status);\n      if (filters.company) params.append('company', filters.company);\n      if (filters.search) params.append('search', filters.search);\n      if (filters.date_from) params.append('date_from', filters.date_from);\n      if (filters.date_to) params.append('date_to', filters.date_to);\n    }\n\n    const queryString = params.toString();\n    const url = queryString ? `/positions?${queryString}` : '/positions';\n    \n    return apiRequest.get<PositionListResponse>(url);\n  }\n\n  /**\n   * Get a single position by ID\n   */\n  async getPosition(id: string): Promise<Position> {\n    return apiRequest.get<Position>(`/positions/${id}`);\n  }\n\n  /**\n   * Create a new position\n   */\n  async createPosition(data: CreatePositionData): Promise<Position> {\n    return apiRequest.post<Position>('/positions', data);\n  }\n\n  /**\n   * Update an existing position\n   */\n  async updatePosition(id: string, data: UpdatePositionData): Promise<Position> {\n    return apiRequest.put<Position>(`/positions/${id}`, data);\n  }\n\n  /**\n   * Partially update a position (PATCH)\n   */\n  async patchPosition(id: string, data: Partial<UpdatePositionData>): Promise<Position> {\n    return apiRequest.patch<Position>(`/positions/${id}`, data);\n  }\n\n  /**\n   * Delete a position\n   */\n  async deletePosition(id: string): Promise<void> {\n    return apiRequest.delete<void>(`/positions/${id}`);\n  }\n\n  /**\n   * Update position status only\n   */\n  async updatePositionStatus(id: string, status: string): Promise<Position> {\n    return apiRequest.patch<Position>(`/positions/${id}`, { status });\n  }\n\n  /**\n   * Get positions by status\n   */\n  async getPositionsByStatus(status: string): Promise<Position[]> {\n    const response = await this.getPositions({ status });\n    return response.positions;\n  }\n\n  /**\n   * Search positions by query\n   */\n  async searchPositions(query: string): Promise<Position[]> {\n    const response = await this.getPositions({ search: query });\n    return response.positions;\n  }\n\n  /**\n   * Get positions for a specific company\n   */\n  async getPositionsByCompany(company: string): Promise<Position[]> {\n    const response = await this.getPositions({ company });\n    return response.positions;\n  }\n\n  /**\n   * Get positions within date range\n   */\n  async getPositionsByDateRange(dateFrom: string, dateTo: string): Promise<Position[]> {\n    const response = await this.getPositions({ \n      date_from: dateFrom, \n      date_to: dateTo \n    });\n    return response.positions;\n  }\n\n  /**\n   * Get recent positions (last 30 days)\n   */\n  async getRecentPositions(): Promise<Position[]> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    const response = await this.getPositions({\n      date_from: thirtyDaysAgo.toISOString().split('T')[0],\n    });\n    \n    return response.positions;\n  }\n\n  /**\n   * Duplicate a position (create copy)\n   */\n  async duplicatePosition(id: string): Promise<Position> {\n    const originalPosition = await this.getPosition(id);\n    \n    const duplicateData: CreatePositionData = {\n      title: `${originalPosition.title} (Copy)`,\n      company: originalPosition.company,\n      description: originalPosition.description,\n      location: originalPosition.location,\n      salary_range: originalPosition.salary_range,\n      status: 'applied', // Reset status for duplicate\n      application_date: new Date().toISOString().split('T')[0],\n    };\n\n    return this.createPosition(duplicateData);\n  }\n\n  /**\n   * Archive a position (soft delete by changing status)\n   */\n  async archivePosition(id: string): Promise<Position> {\n    return this.updatePositionStatus(id, 'withdrawn');\n  }\n\n  /**\n   * Get position summary statistics\n   */\n  async getPositionSummary(): Promise<{\n    total: number;\n    byStatus: Record<string, number>;\n    recentCount: number;\n  }> {\n    const [allPositions, recentPositions] = await Promise.all([\n      this.getPositions(),\n      this.getRecentPositions(),\n    ]);\n\n    const byStatus = allPositions.positions.reduce((acc, position) => {\n      acc[position.status] = (acc[position.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return {\n      total: allPositions.positions.length,\n      byStatus,\n      recentCount: recentPositions.length,\n    };\n  }\n}\n\n// Export singleton instance\nexport const positionService = new PositionService();\nexport default positionService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}