{"ast":null,"code":"// Base types\n\n// User types\n\n// Position types\nexport let PositionStatus = /*#__PURE__*/function (PositionStatus) {\n  PositionStatus[\"APPLIED\"] = \"applied\";\n  PositionStatus[\"SCREENING\"] = \"screening\";\n  PositionStatus[\"INTERVIEWING\"] = \"interviewing\";\n  PositionStatus[\"OFFER\"] = \"offer\";\n  PositionStatus[\"REJECTED\"] = \"rejected\";\n  PositionStatus[\"WITHDRAWN\"] = \"withdrawn\";\n  return PositionStatus;\n}({});\n// Interview types\nexport let InterviewType = /*#__PURE__*/function (InterviewType) {\n  InterviewType[\"TECHNICAL\"] = \"technical\";\n  InterviewType[\"BEHAVIORAL\"] = \"behavioral\";\n  InterviewType[\"HR\"] = \"hr\";\n  InterviewType[\"FINAL\"] = \"final\";\n  return InterviewType;\n}({});\nexport let InterviewPlace = /*#__PURE__*/function (InterviewPlace) {\n  InterviewPlace[\"PHONE\"] = \"phone\";\n  InterviewPlace[\"VIDEO\"] = \"video\";\n  InterviewPlace[\"ONSITE\"] = \"onsite\";\n  return InterviewPlace;\n}({});\nexport let InterviewOutcome = /*#__PURE__*/function (InterviewOutcome) {\n  InterviewOutcome[\"PENDING\"] = \"pending\";\n  InterviewOutcome[\"PASSED\"] = \"passed\";\n  InterviewOutcome[\"FAILED\"] = \"failed\";\n  InterviewOutcome[\"CANCELLED\"] = \"cancelled\";\n  return InterviewOutcome;\n}({});\n\n// API Response types\n\n// Form types\n\n// Filter types\n\n// Statistics types\n\n// Authentication types\n\n// Form validation types\n\n// API List Response types\n\n// Quick update types for inline editing\n\n// User preferences and settings\n\n// Cache and offline types\n\n// UI State types\n\n// Notification types\n\n// Component prop types\n\n// Search and filter types\n\n// Export utility types\n\n// Re-export validation types\nexport * from './validation';","map":{"version":3,"names":["PositionStatus","InterviewType","InterviewPlace","InterviewOutcome"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/types/index.ts"],"sourcesContent":["// Base types\nexport interface BaseEntity {\n  id: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// User types\nexport interface User extends BaseEntity {\n  email: string;\n  first_name: string;\n  last_name: string;\n}\n\n// Position types\nexport enum PositionStatus {\n  APPLIED = 'applied',\n  SCREENING = 'screening',\n  INTERVIEWING = 'interviewing',\n  OFFER = 'offer',\n  REJECTED = 'rejected',\n  WITHDRAWN = 'withdrawn',\n}\n\nexport interface Position extends BaseEntity {\n  user_id: string;\n  title: string;\n  company: string;\n  description?: string;\n  location?: string;\n  salary_range?: string;\n  status: PositionStatus;\n  application_date: string;\n  interviews: Interview[];\n}\n\n// Interview types\nexport enum InterviewType {\n  TECHNICAL = 'technical',\n  BEHAVIORAL = 'behavioral',\n  HR = 'hr',\n  FINAL = 'final',\n}\n\nexport enum InterviewPlace {\n  PHONE = 'phone',\n  VIDEO = 'video',\n  ONSITE = 'onsite',\n}\n\nexport enum InterviewOutcome {\n  PENDING = 'pending',\n  PASSED = 'passed',\n  FAILED = 'failed',\n  CANCELLED = 'cancelled',\n}\n\nexport interface Interview extends BaseEntity {\n  position_id: string;\n  type: InterviewType;\n  place: InterviewPlace;\n  scheduled_date: string;\n  duration_minutes?: number;\n  notes?: string;\n  outcome: InterviewOutcome;\n}\n\n// API Response types\nexport interface ApiResponse<T> {\n  data: T;\n  message?: string;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T[];\n  total: number;\n  page: number;\n  per_page: number;\n  total_pages: number;\n}\n\nexport interface ApiError {\n  code: string;\n  message: string;\n  field_errors?: Record<string, string>;\n  timestamp: string;\n}\n\n// Form types\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  first_name: string;\n  last_name: string;\n  confirmPassword?: string; // Optional for API calls, required for forms\n}\n\nexport interface CreatePositionData {\n  title: string;\n  company: string;\n  description?: string;\n  location?: string;\n  salary_range?: string;\n  status: PositionStatus;\n  application_date: string;\n}\n\nexport interface UpdatePositionData extends Partial<CreatePositionData> {}\n\nexport interface CreateInterviewData {\n  position_id: string;\n  type: InterviewType;\n  place: InterviewPlace;\n  scheduled_date: string;\n  duration_minutes?: number;\n  notes?: string;\n  outcome: InterviewOutcome;\n}\n\nexport interface UpdateInterviewData extends Partial<CreateInterviewData> {}\n\n// Filter types\nexport interface PositionFilters {\n  status?: PositionStatus;\n  company?: string;\n  search?: string;\n  date_from?: string;\n  date_to?: string;\n}\n\n// Statistics types\nexport interface PositionStatistics {\n  total_positions: number;\n  positions_by_status: Record<PositionStatus, number>;\n  total_interviews: number;\n  interviews_by_outcome: Record<InterviewOutcome, number>;\n  interviews_by_type: Record<InterviewType, number>;\n  companies: Array<{\n    name: string;\n    position_count: number;\n    interview_count: number;\n  }>;\n}\n\n// Authentication types\nexport interface AuthResponse {\n  access_token: string;\n  token_type: string;\n  user: User;\n}\n\nexport interface TokenRefreshResponse {\n  access_token: string;\n  token_type: string;\n}\n\n// Form validation types\nexport interface FormErrors {\n  [key: string]: string | undefined;\n}\n\nexport interface PositionFormData {\n  title: string;\n  company: string;\n  description: string;\n  location: string;\n  salary_range: string;\n  status: PositionStatus;\n  application_date: string;\n}\n\nexport interface InterviewFormData {\n  type: InterviewType;\n  place: InterviewPlace;\n  scheduled_date: string;\n  duration_minutes: number | undefined;\n  notes: string;\n  outcome: InterviewOutcome;\n}\n\nexport interface LoginFormData {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterFormData {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  first_name: string;\n  last_name: string;\n  terms?: boolean;\n}\n\n// API List Response types\nexport interface PositionListResponse {\n  positions: Position[];\n  total: number;\n  page: number;\n  per_page: number;\n  total_pages: number;\n}\n\nexport interface InterviewListResponse {\n  interviews: Interview[];\n  total: number;\n}\n\n// Quick update types for inline editing\nexport interface QuickUpdateData {\n  field: string;\n  value: any;\n}\n\n// User preferences and settings\nexport interface UserPreferences {\n  theme: 'light' | 'dark' | 'system';\n  defaultPositionStatus: PositionStatus;\n  defaultInterviewType: InterviewType;\n  defaultInterviewPlace: InterviewPlace;\n  dateFormat: 'MM/DD/YYYY' | 'DD/MM/YYYY' | 'YYYY-MM-DD';\n  timezone: string;\n}\n\n// Cache and offline types\nexport interface CacheMetadata {\n  timestamp: number;\n  version: string;\n  ttl: number;\n}\n\nexport interface OfflineQueueItem {\n  id: string;\n  type: 'create' | 'update' | 'delete';\n  resource: 'position' | 'interview';\n  data: any;\n  timestamp: number;\n  retryCount: number;\n}\n\n// UI State types\nexport interface UIState {\n  sidebarOpen: boolean;\n  theme: 'light' | 'dark';\n  loading: boolean;\n  error: string | null;\n}\n\n// Notification types\nexport interface NotificationData {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n  actions?: Array<{\n    label: string;\n    action: () => void;\n  }>;\n}\n\n// Component prop types\nexport interface BaseComponentProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport interface LoadingState {\n  loading: boolean;\n  error?: string | null;\n}\n\n// Search and filter types\nexport interface SearchState {\n  query: string;\n  filters: PositionFilters;\n  sortBy: 'created_at' | 'updated_at' | 'application_date' | 'title' | 'company';\n  sortOrder: 'asc' | 'desc';\n}\n\nexport interface FilterOption {\n  label: string;\n  value: string;\n  count?: number;\n}\n\n// Export utility types\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\nexport type PartialExcept<T, K extends keyof T> = Partial<T> & Pick<T, K>;\n\n// Re-export validation types\nexport * from './validation';\n"],"mappings":"AAAA;;AAOA;;AAOA;AACA,WAAYA,cAAc,0BAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;AAqB1B;AACA,WAAYC,aAAa,0BAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;AAOzB,WAAYC,cAAc,0BAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;AAM1B,WAAYC,gBAAgB,0BAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAA,OAAhBA,gBAAgB;AAAA;;AAiB5B;;AAqBA;;AAsCA;;AASA;;AAcA;;AAYA;;AAsCA;;AAcA;;AAMA;;AAUA;;AAgBA;;AAQA;;AAaA;;AAWA;;AAcA;;AAKA;AACA,cAAc,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}