{"ast":null,"code":"/**\n * Service Worker Registration\n * Handles service worker lifecycle and updates\n */import{Workbox}from'workbox-window';class ServiceWorkerManager{constructor(){this.workbox=null;this.isSupported=false;this.isSupported='serviceWorker'in navigator;}async register(){if(!this.isSupported){console.log('Service Worker not supported');return;}if(process.env.NODE_ENV==='production'){try{this.workbox=new Workbox('/sw.js');// Handle service worker updates\nthis.workbox.addEventListener('waiting',()=>{this.showUpdateNotification();});// Handle service worker activation\nthis.workbox.addEventListener('controlling',()=>{window.location.reload();});// Register the service worker\nawait this.workbox.register();console.log('Service Worker registered successfully');}catch(error){console.error('Service Worker registration failed:',error);}}}showUpdateNotification(){if(confirm('A new version of the app is available. Would you like to update?')){var _this$workbox;(_this$workbox=this.workbox)===null||_this$workbox===void 0?void 0:_this$workbox.messageSkipWaiting();}}async unregister(){if('serviceWorker'in navigator){try{const registrations=await navigator.serviceWorker.getRegistrations();await Promise.all(registrations.map(registration=>registration.unregister()));console.log('Service Workers unregistered');}catch(error){console.error('Service Worker unregistration failed:',error);}}}async checkForUpdates(){if(this.workbox){await this.workbox.update();}}}// Create singleton instance\nconst serviceWorkerManager=new ServiceWorkerManager();export default serviceWorkerManager;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}