{"ast":null,"code":"import _objectWithoutProperties from\"/home/haim/github/job-search-tracker-api/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"confirmPassword\"];import React,{createContext,useContext,useEffect,useState,useCallback}from'react';import{useQueryClient}from'@tanstack/react-query';import{toast}from'react-hot-toast';import{authService}from'../services';import{queryKeys}from'../lib/queryClient';import{sessionPersistence}from'../utils/sessionPersistence';// Auth Context Types\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create context\nconst AuthContext=/*#__PURE__*/createContext(undefined);// Auth Provider Props\n// Token refresh interval (15 minutes)\nconst TOKEN_REFRESH_INTERVAL=15*60*1000;export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(false);const[isInitialized,setIsInitialized]=useState(false);const[error,setError]=useState(null);const queryClient=useQueryClient();// Computed state\nconst isAuthenticated=!!user&&authService.isAuthenticated();// Clear error helper\nconst clearError=useCallback(()=>{setError(null);},[]);// Check session validity\nconst checkSession=useCallback(async()=>{try{if(!authService.isAuthenticated()){return false;}const isValid=await authService.verifyToken();return isValid;}catch(error){console.warn('Session check failed:',error);return false;}},[]);// Restore session from storage\nconst restoreSession=useCallback(async()=>{setIsLoading(true);setError(null);try{// Check if session should be restored\nif(!sessionPersistence.shouldRestoreSession()){sessionPersistence.clearSessionState();setIsInitialized(true);return;}// Try to get current user\nconst currentUser=await authService.getCurrentUser();setUser(currentUser);// Update session state\nsessionPersistence.saveSessionState(true,currentUser.id,currentUser.email);// Update query cache\nqueryClient.setQueryData(queryKeys.auth.user,currentUser);queryClient.setQueryData(queryKeys.auth.verify,true);}catch(error){console.warn('Session restoration failed:',error);// Clear invalid session\nauthService.logout();sessionPersistence.clearSessionState();setUser(null);queryClient.removeQueries(queryKeys.auth.user);queryClient.removeQueries(queryKeys.auth.verify);setError('Session expired. Please log in again.');}finally{setIsLoading(false);setIsInitialized(true);}},[queryClient]);// Login function\nconst login=useCallback(async credentials=>{setIsLoading(true);setError(null);try{const response=await authService.login(credentials);setUser(response.user);// Update session state\nsessionPersistence.saveSessionState(true,response.user.id,response.user.email);// Update query cache\nqueryClient.setQueryData(queryKeys.auth.user,response.user);queryClient.setQueryData(queryKeys.auth.verify,true);toast.success(\"Welcome back, \".concat(response.user.first_name,\"!\"));// Prefetch dashboard data after login\nqueryClient.prefetchQuery({queryKey:queryKeys.statistics.dashboard(),queryFn:()=>import('../services').then(_ref2=>{let{statisticsService}=_ref2;return statisticsService.getDashboardSummary();})});}catch(error){const errorMessage=error.message||'Login failed';setError(errorMessage);toast.error(errorMessage);throw error;}finally{setIsLoading(false);}},[queryClient]);// Register function\nconst register=useCallback(async userData=>{setIsLoading(true);setError(null);try{const{confirmPassword}=userData,registrationData=_objectWithoutProperties(userData,_excluded);await authService.register(registrationData);toast.success('Registration successful! Please log in.');}catch(error){const errorMessage=error.message||'Registration failed';setError(errorMessage);toast.error(errorMessage);throw error;}finally{setIsLoading(false);}},[]);// Logout function\nconst logout=useCallback(async()=>{setIsLoading(true);setError(null);try{await authService.logout();}catch(error){console.warn('Logout API call failed:',error);}finally{// Always clear local state\nsetUser(null);sessionPersistence.clearSessionState();// Clear all cached data\nqueryClient.clear();queryClient.removeQueries(queryKeys.auth.user);queryClient.removeQueries(queryKeys.auth.verify);toast.success('Logged out successfully');setIsLoading(false);}},[queryClient]);// Refresh token function\nconst refreshToken=useCallback(async()=>{try{await authService.refreshToken();// Update verification status\nqueryClient.setQueryData(queryKeys.auth.verify,true);console.log('Token refreshed successfully');}catch(error){console.warn('Token refresh failed:',error);// Clear auth data and redirect to login\nsetUser(null);sessionPersistence.clearSessionState();queryClient.clear();queryClient.removeQueries(queryKeys.auth.user);queryClient.removeQueries(queryKeys.auth.verify);setError('Session expired. Please log in again.');toast.error('Session expired. Please log in again.');// Redirect to login page\nwindow.location.href='/login';}},[queryClient]);// Auto-refresh token setup\nuseEffect(()=>{if(!isAuthenticated||!isInitialized){return;}const interval=setInterval(()=>{if(authService.isAuthenticated()){refreshToken();}},TOKEN_REFRESH_INTERVAL);return()=>clearInterval(interval);},[isAuthenticated,isInitialized,refreshToken]);// Initialize auth state on mount\nuseEffect(()=>{restoreSession();},[restoreSession]);// Set up activity tracking\nuseEffect(()=>{if(!isAuthenticated||!isInitialized){return;}const cleanup=sessionPersistence.setupActivityTracking();return cleanup;},[isAuthenticated,isInitialized]);// Set up session timeout warning\nuseEffect(()=>{if(!isAuthenticated||!isInitialized){return;}const cleanup=sessionPersistence.setupSessionTimeoutWarning(()=>{toast.error('Your session will expire soon. Please save your work.',{duration:10000});});return cleanup;},[isAuthenticated,isInitialized]);// Handle browser storage events (for multi-tab sync)\nuseEffect(()=>{const handleStorageChange=event=>{if(event.key==='access_token'||event.key==='user'){if(!event.newValue){// Token was removed in another tab\nsetUser(null);queryClient.clear();}else if(event.newValue&&!user){// Token was added in another tab\nrestoreSession();}}};window.addEventListener('storage',handleStorageChange);return()=>window.removeEventListener('storage',handleStorageChange);},[user,queryClient,restoreSession]);// Handle page visibility change (refresh token when page becomes visible)\nuseEffect(()=>{const handleVisibilityChange=()=>{if(document.visibilityState==='visible'&&isAuthenticated){checkSession().then(isValid=>{if(!isValid){refreshToken();}});}};document.addEventListener('visibilitychange',handleVisibilityChange);return()=>document.removeEventListener('visibilitychange',handleVisibilityChange);},[isAuthenticated,checkSession,refreshToken]);// Context value\nconst contextValue={// State\nuser,isAuthenticated,isLoading,isInitialized,error,// Actions\nlogin,register,logout,refreshToken,clearError,// Session management\ncheckSession,restoreSession};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:contextValue,children:children});};// Custom hook to use auth context\nexport const useAuthContext=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuthContext must be used within an AuthProvider');}return context;};export default AuthProvider;","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","useQueryClient","toast","authService","queryKeys","sessionPersistence","jsx","_jsx","AuthContext","undefined","TOKEN_REFRESH_INTERVAL","AuthProvider","_ref","children","user","setUser","isLoading","setIsLoading","isInitialized","setIsInitialized","error","setError","queryClient","isAuthenticated","clearError","checkSession","isValid","verifyToken","console","warn","restoreSession","shouldRestoreSession","clearSessionState","currentUser","getCurrentUser","saveSessionState","id","email","setQueryData","auth","verify","logout","removeQueries","login","credentials","response","success","concat","first_name","prefetchQuery","queryKey","statistics","dashboard","queryFn","then","_ref2","statisticsService","getDashboardSummary","errorMessage","message","register","userData","confirmPassword","registrationData","_objectWithoutProperties","_excluded","clear","refreshToken","log","window","location","href","interval","setInterval","clearInterval","cleanup","setupActivityTracking","setupSessionTimeoutWarning","duration","handleStorageChange","event","key","newValue","addEventListener","removeEventListener","handleVisibilityChange","document","visibilityState","contextValue","Provider","value","useAuthContext","context","Error"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/providers/AuthProvider.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-hot-toast';\nimport { authService } from '../services';\nimport { queryKeys } from '../lib/queryClient';\nimport { sessionPersistence } from '../utils/sessionPersistence';\nimport {\n  User,\n  AuthResponse,\n  LoginCredentials,\n  RegisterData,\n} from '../types';\n\n// Auth Context Types\ninterface AuthContextType {\n  // State\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  isInitialized: boolean;\n  error: string | null;\n  \n  // Actions\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (userData: RegisterData) => Promise<void>;\n  logout: () => Promise<void>;\n  refreshToken: () => Promise<void>;\n  clearError: () => void;\n  \n  // Session management\n  checkSession: () => Promise<boolean>;\n  restoreSession: () => Promise<void>;\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Auth Provider Props\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\n// Token refresh interval (15 minutes)\nconst TOKEN_REFRESH_INTERVAL = 15 * 60 * 1000;\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n\n  // Computed state\n  const isAuthenticated = !!user && authService.isAuthenticated();\n\n  // Clear error helper\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  // Check session validity\n  const checkSession = useCallback(async (): Promise<boolean> => {\n    try {\n      if (!authService.isAuthenticated()) {\n        return false;\n      }\n\n      const isValid = await authService.verifyToken();\n      return isValid;\n    } catch (error) {\n      console.warn('Session check failed:', error);\n      return false;\n    }\n  }, []);\n\n  // Restore session from storage\n  const restoreSession = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Check if session should be restored\n      if (!sessionPersistence.shouldRestoreSession()) {\n        sessionPersistence.clearSessionState();\n        setIsInitialized(true);\n        return;\n      }\n\n      // Try to get current user\n      const currentUser = await authService.getCurrentUser();\n      setUser(currentUser);\n      \n      // Update session state\n      sessionPersistence.saveSessionState(true, currentUser.id, currentUser.email);\n      \n      // Update query cache\n      queryClient.setQueryData(queryKeys.auth.user, currentUser);\n      queryClient.setQueryData(queryKeys.auth.verify, true);\n\n    } catch (error: any) {\n      console.warn('Session restoration failed:', error);\n      \n      // Clear invalid session\n      authService.logout();\n      sessionPersistence.clearSessionState();\n      setUser(null);\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      \n      setError('Session expired. Please log in again.');\n    } finally {\n      setIsLoading(false);\n      setIsInitialized(true);\n    }\n  }, [queryClient]);\n\n  // Login function\n  const login = useCallback(async (credentials: LoginCredentials) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response: AuthResponse = await authService.login(credentials);\n      \n      setUser(response.user);\n      \n      // Update session state\n      sessionPersistence.saveSessionState(true, response.user.id, response.user.email);\n      \n      // Update query cache\n      queryClient.setQueryData(queryKeys.auth.user, response.user);\n      queryClient.setQueryData(queryKeys.auth.verify, true);\n      \n      toast.success(`Welcome back, ${response.user.first_name}!`);\n      \n      // Prefetch dashboard data after login\n      queryClient.prefetchQuery({\n        queryKey: queryKeys.statistics.dashboard(),\n        queryFn: () => import('../services').then(({ statisticsService }) => \n          statisticsService.getDashboardSummary()\n        ),\n      });\n\n    } catch (error: any) {\n      const errorMessage = error.message || 'Login failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [queryClient]);\n\n  // Register function\n  const register = useCallback(async (userData: RegisterData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const { confirmPassword, ...registrationData } = userData;\n      await authService.register(registrationData);\n      \n      toast.success('Registration successful! Please log in.');\n      \n    } catch (error: any) {\n      const errorMessage = error.message || 'Registration failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Logout function\n  const logout = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.warn('Logout API call failed:', error);\n    } finally {\n      // Always clear local state\n      setUser(null);\n      sessionPersistence.clearSessionState();\n      \n      // Clear all cached data\n      queryClient.clear();\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      \n      toast.success('Logged out successfully');\n      setIsLoading(false);\n    }\n  }, [queryClient]);\n\n  // Refresh token function\n  const refreshToken = useCallback(async () => {\n    try {\n      await authService.refreshToken();\n      \n      // Update verification status\n      queryClient.setQueryData(queryKeys.auth.verify, true);\n      \n      console.log('Token refreshed successfully');\n      \n    } catch (error: any) {\n      console.warn('Token refresh failed:', error);\n      \n      // Clear auth data and redirect to login\n      setUser(null);\n      sessionPersistence.clearSessionState();\n      queryClient.clear();\n      queryClient.removeQueries(queryKeys.auth.user);\n      queryClient.removeQueries(queryKeys.auth.verify);\n      \n      setError('Session expired. Please log in again.');\n      toast.error('Session expired. Please log in again.');\n      \n      // Redirect to login page\n      window.location.href = '/login';\n    }\n  }, [queryClient]);\n\n  // Auto-refresh token setup\n  useEffect(() => {\n    if (!isAuthenticated || !isInitialized) {\n      return;\n    }\n\n    const interval = setInterval(() => {\n      if (authService.isAuthenticated()) {\n        refreshToken();\n      }\n    }, TOKEN_REFRESH_INTERVAL);\n\n    return () => clearInterval(interval);\n  }, [isAuthenticated, isInitialized, refreshToken]);\n\n  // Initialize auth state on mount\n  useEffect(() => {\n    restoreSession();\n  }, [restoreSession]);\n\n  // Set up activity tracking\n  useEffect(() => {\n    if (!isAuthenticated || !isInitialized) {\n      return;\n    }\n\n    const cleanup = sessionPersistence.setupActivityTracking();\n    return cleanup;\n  }, [isAuthenticated, isInitialized]);\n\n  // Set up session timeout warning\n  useEffect(() => {\n    if (!isAuthenticated || !isInitialized) {\n      return;\n    }\n\n    const cleanup = sessionPersistence.setupSessionTimeoutWarning(() => {\n      toast.error('Your session will expire soon. Please save your work.', {\n        duration: 10000,\n      });\n    });\n\n    return cleanup;\n  }, [isAuthenticated, isInitialized]);\n\n  // Handle browser storage events (for multi-tab sync)\n  useEffect(() => {\n    const handleStorageChange = (event: StorageEvent) => {\n      if (event.key === 'access_token' || event.key === 'user') {\n        if (!event.newValue) {\n          // Token was removed in another tab\n          setUser(null);\n          queryClient.clear();\n        } else if (event.newValue && !user) {\n          // Token was added in another tab\n          restoreSession();\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [user, queryClient, restoreSession]);\n\n  // Handle page visibility change (refresh token when page becomes visible)\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible' && isAuthenticated) {\n        checkSession().then(isValid => {\n          if (!isValid) {\n            refreshToken();\n          }\n        });\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, [isAuthenticated, checkSession, refreshToken]);\n\n  // Context value\n  const contextValue: AuthContextType = {\n    // State\n    user,\n    isAuthenticated,\n    isLoading,\n    isInitialized,\n    error,\n    \n    // Actions\n    login,\n    register,\n    logout,\n    refreshToken,\n    clearError,\n    \n    // Session management\n    checkSession,\n    restoreSession,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use auth context\nexport const useAuthContext = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  \n  if (context === undefined) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  \n  return context;\n};\n\nexport default AuthProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}