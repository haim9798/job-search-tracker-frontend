{"ast":null,"code":"/**\n * Accessibility utility functions for testing and validation\n */\n\n/**\n * Test if an element has proper ARIA labels\n */\nexport const testAriaLabels = element => {\n  const hasAriaLabel = element.hasAttribute('aria-label');\n  const hasAriaLabelledBy = element.hasAttribute('aria-labelledby');\n  const hasAriaDescribedBy = element.hasAttribute('aria-describedby');\n  if (hasAriaLabel || hasAriaLabelledBy || hasAriaDescribedBy) {\n    return {\n      passed: true,\n      message: 'Element has proper ARIA labeling',\n      element\n    };\n  }\n  return {\n    passed: false,\n    message: 'Element missing ARIA labels',\n    element\n  };\n};\n\n/**\n * Test if an element is keyboard accessible\n */\nexport const testKeyboardAccessibility = element => {\n  const tabIndex = element.getAttribute('tabindex');\n  const isFocusable = element.matches('button, input, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])');\n  if (isFocusable || tabIndex !== null) {\n    return {\n      passed: true,\n      message: 'Element is keyboard accessible',\n      element\n    };\n  }\n  return {\n    passed: false,\n    message: 'Element is not keyboard accessible',\n    element\n  };\n};\n\n/**\n * Test if an element has proper color contrast\n */\nexport const testColorContrast = element => {\n  const computedStyle = window.getComputedStyle(element);\n  const backgroundColor = computedStyle.backgroundColor;\n  const color = computedStyle.color;\n\n  // This is a simplified check - in a real implementation, you'd use a proper contrast ratio calculator\n  if (backgroundColor && color) {\n    return {\n      passed: true,\n      message: 'Element has color contrast (manual verification recommended)',\n      element\n    };\n  }\n  return {\n    passed: false,\n    message: 'Element missing color contrast information',\n    element\n  };\n};\n\n/**\n * Test if an element has proper heading hierarchy\n */\nexport const testHeadingHierarchy = () => {\n  const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n  const headingLevels = Array.from(headings).map(h => parseInt(h.tagName.charAt(1)));\n  let previousLevel = 0;\n  let hasError = false;\n  for (const level of headingLevels) {\n    if (level > previousLevel + 1) {\n      hasError = true;\n      break;\n    }\n    previousLevel = level;\n  }\n  if (!hasError) {\n    return {\n      passed: true,\n      message: 'Heading hierarchy is correct'\n    };\n  }\n  return {\n    passed: false,\n    message: 'Heading hierarchy has gaps or is incorrect'\n  };\n};\n\n/**\n * Test if the page has proper focus management\n */\nexport const testFocusManagement = () => {\n  const focusableElements = document.querySelectorAll('button, input, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])');\n  if (focusableElements.length > 0) {\n    return {\n      passed: true,\n      message: `Found ${focusableElements.length} focusable elements`\n    };\n  }\n  return {\n    passed: false,\n    message: 'No focusable elements found'\n  };\n};\n\n/**\n * Test if images have proper alt text\n */\nexport const testImageAltText = () => {\n  const images = document.querySelectorAll('img');\n  const imagesWithoutAlt = Array.from(images).filter(img => !img.alt);\n  if (imagesWithoutAlt.length === 0) {\n    return {\n      passed: true,\n      message: 'All images have alt text'\n    };\n  }\n  return {\n    passed: false,\n    message: `${imagesWithoutAlt.length} images missing alt text`\n  };\n};\n\n/**\n * Run all accessibility tests\n */\nexport const runAccessibilityTests = () => {\n  const results = [];\n\n  // Test heading hierarchy\n  results.push(testHeadingHierarchy());\n\n  // Test focus management\n  results.push(testFocusManagement());\n\n  // Test image alt text\n  results.push(testImageAltText());\n\n  // Test interactive elements\n  const interactiveElements = document.querySelectorAll('button, input, select, textarea, a[href]');\n  interactiveElements.forEach(element => {\n    results.push(testAriaLabels(element));\n    results.push(testKeyboardAccessibility(element));\n  });\n  return results;\n};\n\n/**\n * Generate accessibility report\n */\nexport const generateAccessibilityReport = () => {\n  const results = runAccessibilityTests();\n  const passed = results.filter(r => r.passed).length;\n  const total = results.length;\n  let report = `Accessibility Test Report\\n`;\n  report += `========================\\n`;\n  report += `Passed: ${passed}/${total}\\n\\n`;\n  results.forEach((result, index) => {\n    report += `${index + 1}. ${result.passed ? '✅' : '❌'} ${result.message}\\n`;\n  });\n  return report;\n};\n\n/**\n * Announce to screen readers\n */\nexport const announceToScreenReader = (message, priority = 'polite') => {\n  const announcement = document.createElement('div');\n  announcement.setAttribute('aria-live', priority);\n  announcement.setAttribute('aria-atomic', 'true');\n  announcement.className = 'sr-only';\n  announcement.textContent = message;\n  document.body.appendChild(announcement);\n\n  // Remove after announcement\n  setTimeout(() => {\n    document.body.removeChild(announcement);\n  }, 1000);\n};","map":{"version":3,"names":["testAriaLabels","element","hasAriaLabel","hasAttribute","hasAriaLabelledBy","hasAriaDescribedBy","passed","message","testKeyboardAccessibility","tabIndex","getAttribute","isFocusable","matches","testColorContrast","computedStyle","window","getComputedStyle","backgroundColor","color","testHeadingHierarchy","headings","document","querySelectorAll","headingLevels","Array","from","map","h","parseInt","tagName","charAt","previousLevel","hasError","level","testFocusManagement","focusableElements","length","testImageAltText","images","imagesWithoutAlt","filter","img","alt","runAccessibilityTests","results","push","interactiveElements","forEach","generateAccessibilityReport","r","total","report","result","index","announceToScreenReader","priority","announcement","createElement","setAttribute","className","textContent","body","appendChild","setTimeout","removeChild"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/utils/accessibility.ts"],"sourcesContent":["/**\n * Accessibility utility functions for testing and validation\n */\n\nexport interface AccessibilityTestResult {\n  passed: boolean;\n  message: string;\n  element?: HTMLElement;\n}\n\n/**\n * Test if an element has proper ARIA labels\n */\nexport const testAriaLabels = (element: HTMLElement): AccessibilityTestResult => {\n  const hasAriaLabel = element.hasAttribute('aria-label');\n  const hasAriaLabelledBy = element.hasAttribute('aria-labelledby');\n  const hasAriaDescribedBy = element.hasAttribute('aria-describedby');\n  \n  if (hasAriaLabel || hasAriaLabelledBy || hasAriaDescribedBy) {\n    return {\n      passed: true,\n      message: 'Element has proper ARIA labeling',\n      element\n    };\n  }\n  \n  return {\n    passed: false,\n    message: 'Element missing ARIA labels',\n    element\n  };\n};\n\n/**\n * Test if an element is keyboard accessible\n */\nexport const testKeyboardAccessibility = (element: HTMLElement): AccessibilityTestResult => {\n  const tabIndex = element.getAttribute('tabindex');\n  const isFocusable = element.matches('button, input, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])');\n  \n  if (isFocusable || tabIndex !== null) {\n    return {\n      passed: true,\n      message: 'Element is keyboard accessible',\n      element\n    };\n  }\n  \n  return {\n    passed: false,\n    message: 'Element is not keyboard accessible',\n    element\n  };\n};\n\n/**\n * Test if an element has proper color contrast\n */\nexport const testColorContrast = (element: HTMLElement): AccessibilityTestResult => {\n  const computedStyle = window.getComputedStyle(element);\n  const backgroundColor = computedStyle.backgroundColor;\n  const color = computedStyle.color;\n  \n  // This is a simplified check - in a real implementation, you'd use a proper contrast ratio calculator\n  if (backgroundColor && color) {\n    return {\n      passed: true,\n      message: 'Element has color contrast (manual verification recommended)',\n      element\n    };\n  }\n  \n  return {\n    passed: false,\n    message: 'Element missing color contrast information',\n    element\n  };\n};\n\n/**\n * Test if an element has proper heading hierarchy\n */\nexport const testHeadingHierarchy = (): AccessibilityTestResult => {\n  const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n  const headingLevels = Array.from(headings).map(h => parseInt(h.tagName.charAt(1)));\n  \n  let previousLevel = 0;\n  let hasError = false;\n  \n  for (const level of headingLevels) {\n    if (level > previousLevel + 1) {\n      hasError = true;\n      break;\n    }\n    previousLevel = level;\n  }\n  \n  if (!hasError) {\n    return {\n      passed: true,\n      message: 'Heading hierarchy is correct',\n    };\n  }\n  \n  return {\n    passed: false,\n    message: 'Heading hierarchy has gaps or is incorrect',\n  };\n};\n\n/**\n * Test if the page has proper focus management\n */\nexport const testFocusManagement = (): AccessibilityTestResult => {\n  const focusableElements = document.querySelectorAll(\n    'button, input, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])'\n  );\n  \n  if (focusableElements.length > 0) {\n    return {\n      passed: true,\n      message: `Found ${focusableElements.length} focusable elements`,\n    };\n  }\n  \n  return {\n    passed: false,\n    message: 'No focusable elements found',\n  };\n};\n\n/**\n * Test if images have proper alt text\n */\nexport const testImageAltText = (): AccessibilityTestResult => {\n  const images = document.querySelectorAll('img');\n  const imagesWithoutAlt = Array.from(images).filter(img => !img.alt);\n  \n  if (imagesWithoutAlt.length === 0) {\n    return {\n      passed: true,\n      message: 'All images have alt text',\n    };\n  }\n  \n  return {\n    passed: false,\n    message: `${imagesWithoutAlt.length} images missing alt text`,\n  };\n};\n\n/**\n * Run all accessibility tests\n */\nexport const runAccessibilityTests = (): AccessibilityTestResult[] => {\n  const results: AccessibilityTestResult[] = [];\n  \n  // Test heading hierarchy\n  results.push(testHeadingHierarchy());\n  \n  // Test focus management\n  results.push(testFocusManagement());\n  \n  // Test image alt text\n  results.push(testImageAltText());\n  \n  // Test interactive elements\n  const interactiveElements = document.querySelectorAll('button, input, select, textarea, a[href]');\n  interactiveElements.forEach(element => {\n    results.push(testAriaLabels(element as HTMLElement));\n    results.push(testKeyboardAccessibility(element as HTMLElement));\n  });\n  \n  return results;\n};\n\n/**\n * Generate accessibility report\n */\nexport const generateAccessibilityReport = (): string => {\n  const results = runAccessibilityTests();\n  const passed = results.filter(r => r.passed).length;\n  const total = results.length;\n  \n  let report = `Accessibility Test Report\\n`;\n  report += `========================\\n`;\n  report += `Passed: ${passed}/${total}\\n\\n`;\n  \n  results.forEach((result, index) => {\n    report += `${index + 1}. ${result.passed ? '✅' : '❌'} ${result.message}\\n`;\n  });\n  \n  return report;\n};\n\n/**\n * Announce to screen readers\n */\nexport const announceToScreenReader = (message: string, priority: 'polite' | 'assertive' = 'polite'): void => {\n  const announcement = document.createElement('div');\n  announcement.setAttribute('aria-live', priority);\n  announcement.setAttribute('aria-atomic', 'true');\n  announcement.className = 'sr-only';\n  announcement.textContent = message;\n  \n  document.body.appendChild(announcement);\n  \n  // Remove after announcement\n  setTimeout(() => {\n    document.body.removeChild(announcement);\n  }, 1000);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}