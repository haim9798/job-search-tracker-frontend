{"ast":null,"code":"// Cache configuration for different data types\nexport const cacheConfigs = {\n  // Frequently changing data\n  positions: {\n    staleTime: 2 * 60 * 1000,\n    // 2 minutes\n    cacheTime: 5 * 60 * 1000,\n    // 5 minutes\n    refetchOnMount: true\n  },\n  // Moderately changing data\n  interviews: {\n    staleTime: 5 * 60 * 1000,\n    // 5 minutes\n    cacheTime: 10 * 60 * 1000,\n    // 10 minutes\n    refetchOnMount: false\n  },\n  // Rarely changing data\n  userProfile: {\n    staleTime: 30 * 60 * 1000,\n    // 30 minutes\n    cacheTime: 60 * 60 * 1000,\n    // 1 hour\n    refetchOnMount: false\n  },\n  // Statistics (expensive to calculate)\n  statistics: {\n    staleTime: 10 * 60 * 1000,\n    // 10 minutes\n    cacheTime: 30 * 60 * 1000,\n    // 30 minutes\n    refetchOnMount: false\n  }\n};\n\n// User preferences interface\n\n// Form draft interface\n\n// Cache entry interface\n\n// Browser storage cache manager\nexport class CacheManager {\n  // 24 hours\n\n  // User preferences management\n  static setUserPreferences(prefs) {\n    try {\n      const existing = this.getUserPreferences();\n      const updated = {\n        ...existing,\n        ...prefs\n      };\n      localStorage.setItem('user_preferences', JSON.stringify(updated));\n    } catch (error) {\n      console.warn('Failed to save user preferences:', error);\n    }\n  }\n  static getUserPreferences() {\n    try {\n      const stored = localStorage.getItem('user_preferences');\n      if (!stored) {\n        return this.getDefaultPreferences();\n      }\n      const parsed = JSON.parse(stored);\n      return {\n        ...this.getDefaultPreferences(),\n        ...parsed\n      };\n    } catch (error) {\n      console.warn('Failed to load user preferences:', error);\n      return this.getDefaultPreferences();\n    }\n  }\n  static getDefaultPreferences() {\n    return {\n      theme: 'system',\n      sidebarCollapsed: false,\n      defaultPositionView: 'grid',\n      defaultPositionSort: 'updated_at',\n      notificationsEnabled: true,\n      autoRefreshInterval: 5 * 60 * 1000,\n      // 5 minutes\n      compactMode: false,\n      dateFormat: 'MM/dd/yyyy',\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    };\n  }\n\n  // Form drafts management\n  static saveDraft(key, data, type = 'position') {\n    try {\n      const draft = {\n        id: key,\n        type,\n        data,\n        timestamp: Date.now(),\n        expiresAt: Date.now() + 7 * 24 * 60 * 60 * 1000 // 7 days\n      };\n      localStorage.setItem(`draft_${key}`, JSON.stringify(draft));\n\n      // Clean up expired drafts\n      this.cleanupExpiredDrafts();\n    } catch (error) {\n      console.warn('Failed to save draft:', error);\n    }\n  }\n  static getDraft(key) {\n    try {\n      const stored = localStorage.getItem(`draft_${key}`);\n      if (!stored) {\n        return null;\n      }\n      const draft = JSON.parse(stored);\n\n      // Check if draft has expired\n      if (Date.now() > draft.expiresAt) {\n        this.clearDraft(key);\n        return null;\n      }\n      return draft;\n    } catch (error) {\n      console.warn('Failed to load draft:', error);\n      return null;\n    }\n  }\n  static clearDraft(key) {\n    try {\n      localStorage.removeItem(`draft_${key}`);\n    } catch (error) {\n      console.warn('Failed to clear draft:', error);\n    }\n  }\n  static getAllDrafts() {\n    const drafts = [];\n    try {\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key !== null && key !== void 0 && key.startsWith('draft_')) {\n          const draft = this.getDraft(key.replace('draft_', ''));\n          if (draft) {\n            drafts.push(draft);\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load drafts:', error);\n    }\n    return drafts.sort((a, b) => b.timestamp - a.timestamp);\n  }\n  static cleanupExpiredDrafts() {\n    try {\n      const keysToRemove = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key !== null && key !== void 0 && key.startsWith('draft_')) {\n          const stored = localStorage.getItem(key);\n          if (stored) {\n            const draft = JSON.parse(stored);\n            if (Date.now() > draft.expiresAt) {\n              keysToRemove.push(key);\n            }\n          }\n        }\n      }\n      keysToRemove.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      console.warn('Failed to cleanup expired drafts:', error);\n    }\n  }\n\n  // Filter states management\n  static saveFilters(filters) {\n    try {\n      localStorage.setItem('position_filters', JSON.stringify(filters));\n    } catch (error) {\n      console.warn('Failed to save filters:', error);\n    }\n  }\n  static getFilters() {\n    try {\n      const stored = localStorage.getItem('position_filters');\n      return stored ? JSON.parse(stored) : null;\n    } catch (error) {\n      console.warn('Failed to load filters:', error);\n      return null;\n    }\n  }\n  static clearFilters() {\n    try {\n      localStorage.removeItem('position_filters');\n    } catch (error) {\n      console.warn('Failed to clear filters:', error);\n    }\n  }\n\n  // Generic cache persistence\n  static save(key, data, maxAge = this.DEFAULT_MAX_AGE) {\n    try {\n      const entry = {\n        data,\n        timestamp: Date.now(),\n        version: this.VERSION,\n        expiresAt: Date.now() + maxAge\n      };\n      localStorage.setItem(`cache_${key}`, JSON.stringify(entry));\n    } catch (error) {\n      console.warn('Failed to persist cache:', error);\n      // If localStorage is full, try to clear some space\n      this.clearExpiredCache();\n    }\n  }\n  static load(key, maxAge = this.DEFAULT_MAX_AGE) {\n    try {\n      const cached = localStorage.getItem(`cache_${key}`);\n      if (!cached) {\n        return null;\n      }\n      const entry = JSON.parse(cached);\n\n      // Check version compatibility\n      if (entry.version !== this.VERSION) {\n        localStorage.removeItem(`cache_${key}`);\n        return null;\n      }\n\n      // Check if cache has expired\n      const isExpired = entry.expiresAt ? Date.now() > entry.expiresAt : Date.now() - entry.timestamp > maxAge;\n      if (isExpired) {\n        localStorage.removeItem(`cache_${key}`);\n        return null;\n      }\n      return entry.data;\n    } catch (error) {\n      console.warn('Failed to load cache:', error);\n      return null;\n    }\n  }\n  static remove(key) {\n    try {\n      localStorage.removeItem(`cache_${key}`);\n    } catch (error) {\n      console.warn('Failed to remove cache:', error);\n    }\n  }\n  static clearExpiredCache() {\n    try {\n      const keysToRemove = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key !== null && key !== void 0 && key.startsWith('cache_')) {\n          const stored = localStorage.getItem(key);\n          if (stored) {\n            try {\n              const entry = JSON.parse(stored);\n              const isExpired = entry.expiresAt ? Date.now() > entry.expiresAt : Date.now() - entry.timestamp > this.DEFAULT_MAX_AGE;\n              if (isExpired || entry.version !== this.VERSION) {\n                keysToRemove.push(key);\n              }\n            } catch {\n              // Invalid cache entry, remove it\n              keysToRemove.push(key);\n            }\n          }\n        }\n      }\n      keysToRemove.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      console.warn('Failed to clear expired cache:', error);\n    }\n  }\n  static clearAllCache() {\n    try {\n      const keysToRemove = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key !== null && key !== void 0 && key.startsWith('cache_') || key !== null && key !== void 0 && key.startsWith('draft_')) {\n          keysToRemove.push(key);\n        }\n      }\n      keysToRemove.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      console.warn('Failed to clear all cache:', error);\n    }\n  }\n\n  // Cache size management\n  static getCacheSize() {\n    let totalSize = 0;\n    let itemCount = 0;\n    try {\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key !== null && key !== void 0 && key.startsWith('cache_') || key !== null && key !== void 0 && key.startsWith('draft_') || key === 'user_preferences' || key === 'position_filters') {\n          const value = localStorage.getItem(key);\n          if (value) {\n            totalSize += new Blob([value]).size;\n            itemCount++;\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to calculate cache size:', error);\n    }\n    return {\n      totalSize,\n      itemCount\n    };\n  }\n\n  // Initialize cache manager\n  static initialize() {\n    // Clean up expired items on initialization\n    this.cleanupExpiredDrafts();\n    this.clearExpiredCache();\n\n    // Set up periodic cleanup\n    setInterval(() => {\n      this.cleanupExpiredDrafts();\n      this.clearExpiredCache();\n    }, 60 * 60 * 1000); // Every hour\n  }\n}\n\n// Session storage cache manager for temporary data\nCacheManager.VERSION = '1.0';\nCacheManager.DEFAULT_MAX_AGE = 24 * 60 * 60 * 1000;\nexport class SessionCache {\n  // Navigation state management\n  static saveScrollPosition(route, position) {\n    try {\n      sessionStorage.setItem(`scroll_${route}`, position.toString());\n    } catch (error) {\n      console.warn('Failed to save scroll position:', error);\n    }\n  }\n  static getScrollPosition(route) {\n    try {\n      const stored = sessionStorage.getItem(`scroll_${route}`);\n      return stored ? parseInt(stored, 10) : 0;\n    } catch (error) {\n      console.warn('Failed to load scroll position:', error);\n      return 0;\n    }\n  }\n\n  // Form state management\n  static saveFormState(formId, state) {\n    try {\n      sessionStorage.setItem(`form_${formId}`, JSON.stringify({\n        state,\n        timestamp: Date.now()\n      }));\n    } catch (error) {\n      console.warn('Failed to save form state:', error);\n    }\n  }\n  static getFormState(formId) {\n    try {\n      const stored = sessionStorage.getItem(`form_${formId}`);\n      if (!stored) {\n        return null;\n      }\n      const {\n        state,\n        timestamp\n      } = JSON.parse(stored);\n\n      // Expire form state after 1 hour\n      if (Date.now() - timestamp > 60 * 60 * 1000) {\n        sessionStorage.removeItem(`form_${formId}`);\n        return null;\n      }\n      return state;\n    } catch (error) {\n      console.warn('Failed to load form state:', error);\n      return null;\n    }\n  }\n  static clearFormState(formId) {\n    try {\n      sessionStorage.removeItem(`form_${formId}`);\n    } catch (error) {\n      console.warn('Failed to clear form state:', error);\n    }\n  }\n\n  // Tab state management\n  static saveTabState(tabId, state) {\n    try {\n      sessionStorage.setItem(`tab_${tabId}`, JSON.stringify(state));\n    } catch (error) {\n      console.warn('Failed to save tab state:', error);\n    }\n  }\n  static getTabState(tabId) {\n    try {\n      const stored = sessionStorage.getItem(`tab_${tabId}`);\n      return stored ? JSON.parse(stored) : null;\n    } catch (error) {\n      console.warn('Failed to load tab state:', error);\n      return null;\n    }\n  }\n\n  // Clear all session data\n  static clearAll() {\n    try {\n      sessionStorage.clear();\n    } catch (error) {\n      console.warn('Failed to clear session storage:', error);\n    }\n  }\n}\n\n// Initialize cache manager when module is loaded\nif (typeof window !== 'undefined') {\n  CacheManager.initialize();\n}","map":{"version":3,"names":["cacheConfigs","positions","staleTime","cacheTime","refetchOnMount","interviews","userProfile","statistics","CacheManager","setUserPreferences","prefs","existing","getUserPreferences","updated","localStorage","setItem","JSON","stringify","error","console","warn","stored","getItem","getDefaultPreferences","parsed","parse","theme","sidebarCollapsed","defaultPositionView","defaultPositionSort","notificationsEnabled","autoRefreshInterval","compactMode","dateFormat","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","saveDraft","key","data","type","draft","id","timestamp","Date","now","expiresAt","cleanupExpiredDrafts","getDraft","clearDraft","removeItem","getAllDrafts","drafts","i","length","startsWith","replace","push","sort","a","b","keysToRemove","forEach","saveFilters","filters","getFilters","clearFilters","save","maxAge","DEFAULT_MAX_AGE","entry","version","VERSION","clearExpiredCache","load","cached","isExpired","remove","clearAllCache","getCacheSize","totalSize","itemCount","value","Blob","size","initialize","setInterval","SessionCache","saveScrollPosition","route","position","sessionStorage","toString","getScrollPosition","parseInt","saveFormState","formId","state","getFormState","clearFormState","saveTabState","tabId","getTabState","clearAll","clear","window"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/utils/cacheManager.ts"],"sourcesContent":["import { PositionFilters } from '../types';\n\n// Cache configuration for different data types\nexport const cacheConfigs = {\n  // Frequently changing data\n  positions: {\n    staleTime: 2 * 60 * 1000, // 2 minutes\n    cacheTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnMount: true,\n  },\n  \n  // Moderately changing data\n  interviews: {\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    cacheTime: 10 * 60 * 1000, // 10 minutes\n    refetchOnMount: false,\n  },\n  \n  // Rarely changing data\n  userProfile: {\n    staleTime: 30 * 60 * 1000, // 30 minutes\n    cacheTime: 60 * 60 * 1000, // 1 hour\n    refetchOnMount: false,\n  },\n  \n  // Statistics (expensive to calculate)\n  statistics: {\n    staleTime: 10 * 60 * 1000, // 10 minutes\n    cacheTime: 30 * 60 * 1000, // 30 minutes\n    refetchOnMount: false,\n  },\n} as const;\n\n// User preferences interface\nexport interface UserPreferences {\n  theme: 'light' | 'dark' | 'system';\n  sidebarCollapsed: boolean;\n  defaultPositionView: 'grid' | 'list';\n  defaultPositionSort: string;\n  notificationsEnabled: boolean;\n  autoRefreshInterval: number;\n  compactMode: boolean;\n  dateFormat: string;\n  timezone: string;\n}\n\n// Form draft interface\nexport interface FormDraft {\n  id: string;\n  type: 'position' | 'interview';\n  data: any;\n  timestamp: number;\n  expiresAt: number;\n}\n\n// Cache entry interface\ninterface CacheEntry<T = any> {\n  data: T;\n  timestamp: number;\n  version: string;\n  expiresAt?: number;\n}\n\n// Browser storage cache manager\nexport class CacheManager {\n  private static readonly VERSION = '1.0';\n  private static readonly DEFAULT_MAX_AGE = 24 * 60 * 60 * 1000; // 24 hours\n\n  // User preferences management\n  static setUserPreferences(prefs: Partial<UserPreferences>): void {\n    try {\n      const existing = this.getUserPreferences();\n      const updated = { ...existing, ...prefs };\n      localStorage.setItem('user_preferences', JSON.stringify(updated));\n    } catch (error) {\n      console.warn('Failed to save user preferences:', error);\n    }\n  }\n\n  static getUserPreferences(): UserPreferences {\n    try {\n      const stored = localStorage.getItem('user_preferences');\n      if (!stored) {\n        return this.getDefaultPreferences();\n      }\n      \n      const parsed = JSON.parse(stored);\n      return { ...this.getDefaultPreferences(), ...parsed };\n    } catch (error) {\n      console.warn('Failed to load user preferences:', error);\n      return this.getDefaultPreferences();\n    }\n  }\n\n  private static getDefaultPreferences(): UserPreferences {\n    return {\n      theme: 'system',\n      sidebarCollapsed: false,\n      defaultPositionView: 'grid',\n      defaultPositionSort: 'updated_at',\n      notificationsEnabled: true,\n      autoRefreshInterval: 5 * 60 * 1000, // 5 minutes\n      compactMode: false,\n      dateFormat: 'MM/dd/yyyy',\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    };\n  }\n\n  // Form drafts management\n  static saveDraft(key: string, data: any, type: 'position' | 'interview' = 'position'): void {\n    try {\n      const draft: FormDraft = {\n        id: key,\n        type,\n        data,\n        timestamp: Date.now(),\n        expiresAt: Date.now() + (7 * 24 * 60 * 60 * 1000), // 7 days\n      };\n      \n      localStorage.setItem(`draft_${key}`, JSON.stringify(draft));\n      \n      // Clean up expired drafts\n      this.cleanupExpiredDrafts();\n    } catch (error) {\n      console.warn('Failed to save draft:', error);\n    }\n  }\n\n  static getDraft(key: string): FormDraft | null {\n    try {\n      const stored = localStorage.getItem(`draft_${key}`);\n      if (!stored) {\n        return null;\n      }\n      \n      const draft: FormDraft = JSON.parse(stored);\n      \n      // Check if draft has expired\n      if (Date.now() > draft.expiresAt) {\n        this.clearDraft(key);\n        return null;\n      }\n      \n      return draft;\n    } catch (error) {\n      console.warn('Failed to load draft:', error);\n      return null;\n    }\n  }\n\n  static clearDraft(key: string): void {\n    try {\n      localStorage.removeItem(`draft_${key}`);\n    } catch (error) {\n      console.warn('Failed to clear draft:', error);\n    }\n  }\n\n  static getAllDrafts(): FormDraft[] {\n    const drafts: FormDraft[] = [];\n    \n    try {\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith('draft_')) {\n          const draft = this.getDraft(key.replace('draft_', ''));\n          if (draft) {\n            drafts.push(draft);\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load drafts:', error);\n    }\n    \n    return drafts.sort((a, b) => b.timestamp - a.timestamp);\n  }\n\n  private static cleanupExpiredDrafts(): void {\n    try {\n      const keysToRemove: string[] = [];\n      \n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith('draft_')) {\n          const stored = localStorage.getItem(key);\n          if (stored) {\n            const draft: FormDraft = JSON.parse(stored);\n            if (Date.now() > draft.expiresAt) {\n              keysToRemove.push(key);\n            }\n          }\n        }\n      }\n      \n      keysToRemove.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      console.warn('Failed to cleanup expired drafts:', error);\n    }\n  }\n\n  // Filter states management\n  static saveFilters(filters: PositionFilters): void {\n    try {\n      localStorage.setItem('position_filters', JSON.stringify(filters));\n    } catch (error) {\n      console.warn('Failed to save filters:', error);\n    }\n  }\n\n  static getFilters(): PositionFilters | null {\n    try {\n      const stored = localStorage.getItem('position_filters');\n      return stored ? JSON.parse(stored) : null;\n    } catch (error) {\n      console.warn('Failed to load filters:', error);\n      return null;\n    }\n  }\n\n  static clearFilters(): void {\n    try {\n      localStorage.removeItem('position_filters');\n    } catch (error) {\n      console.warn('Failed to clear filters:', error);\n    }\n  }\n\n  // Generic cache persistence\n  static save<T>(key: string, data: T, maxAge: number = this.DEFAULT_MAX_AGE): void {\n    try {\n      const entry: CacheEntry<T> = {\n        data,\n        timestamp: Date.now(),\n        version: this.VERSION,\n        expiresAt: Date.now() + maxAge,\n      };\n      \n      localStorage.setItem(`cache_${key}`, JSON.stringify(entry));\n    } catch (error) {\n      console.warn('Failed to persist cache:', error);\n      // If localStorage is full, try to clear some space\n      this.clearExpiredCache();\n    }\n  }\n\n  static load<T>(key: string, maxAge: number = this.DEFAULT_MAX_AGE): T | null {\n    try {\n      const cached = localStorage.getItem(`cache_${key}`);\n      if (!cached) {\n        return null;\n      }\n\n      const entry: CacheEntry<T> = JSON.parse(cached);\n\n      // Check version compatibility\n      if (entry.version !== this.VERSION) {\n        localStorage.removeItem(`cache_${key}`);\n        return null;\n      }\n\n      // Check if cache has expired\n      const isExpired = entry.expiresAt \n        ? Date.now() > entry.expiresAt \n        : Date.now() - entry.timestamp > maxAge;\n        \n      if (isExpired) {\n        localStorage.removeItem(`cache_${key}`);\n        return null;\n      }\n\n      return entry.data;\n    } catch (error) {\n      console.warn('Failed to load cache:', error);\n      return null;\n    }\n  }\n\n  static remove(key: string): void {\n    try {\n      localStorage.removeItem(`cache_${key}`);\n    } catch (error) {\n      console.warn('Failed to remove cache:', error);\n    }\n  }\n\n  static clearExpiredCache(): void {\n    try {\n      const keysToRemove: string[] = [];\n      \n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith('cache_')) {\n          const stored = localStorage.getItem(key);\n          if (stored) {\n            try {\n              const entry: CacheEntry = JSON.parse(stored);\n              const isExpired = entry.expiresAt \n                ? Date.now() > entry.expiresAt \n                : Date.now() - entry.timestamp > this.DEFAULT_MAX_AGE;\n                \n              if (isExpired || entry.version !== this.VERSION) {\n                keysToRemove.push(key);\n              }\n            } catch {\n              // Invalid cache entry, remove it\n              keysToRemove.push(key);\n            }\n          }\n        }\n      }\n      \n      keysToRemove.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      console.warn('Failed to clear expired cache:', error);\n    }\n  }\n\n  static clearAllCache(): void {\n    try {\n      const keysToRemove: string[] = [];\n      \n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith('cache_') || key?.startsWith('draft_')) {\n          keysToRemove.push(key);\n        }\n      }\n      \n      keysToRemove.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      console.warn('Failed to clear all cache:', error);\n    }\n  }\n\n  // Cache size management\n  static getCacheSize(): { totalSize: number; itemCount: number } {\n    let totalSize = 0;\n    let itemCount = 0;\n    \n    try {\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith('cache_') || key?.startsWith('draft_') || key === 'user_preferences' || key === 'position_filters') {\n          const value = localStorage.getItem(key);\n          if (value) {\n            totalSize += new Blob([value]).size;\n            itemCount++;\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to calculate cache size:', error);\n    }\n    \n    return { totalSize, itemCount };\n  }\n\n  // Initialize cache manager\n  static initialize(): void {\n    // Clean up expired items on initialization\n    this.cleanupExpiredDrafts();\n    this.clearExpiredCache();\n    \n    // Set up periodic cleanup\n    setInterval(() => {\n      this.cleanupExpiredDrafts();\n      this.clearExpiredCache();\n    }, 60 * 60 * 1000); // Every hour\n  }\n}\n\n// Session storage cache manager for temporary data\nexport class SessionCache {\n  // Navigation state management\n  static saveScrollPosition(route: string, position: number): void {\n    try {\n      sessionStorage.setItem(`scroll_${route}`, position.toString());\n    } catch (error) {\n      console.warn('Failed to save scroll position:', error);\n    }\n  }\n\n  static getScrollPosition(route: string): number {\n    try {\n      const stored = sessionStorage.getItem(`scroll_${route}`);\n      return stored ? parseInt(stored, 10) : 0;\n    } catch (error) {\n      console.warn('Failed to load scroll position:', error);\n      return 0;\n    }\n  }\n\n  // Form state management\n  static saveFormState(formId: string, state: any): void {\n    try {\n      sessionStorage.setItem(`form_${formId}`, JSON.stringify({\n        state,\n        timestamp: Date.now(),\n      }));\n    } catch (error) {\n      console.warn('Failed to save form state:', error);\n    }\n  }\n\n  static getFormState(formId: string): any | null {\n    try {\n      const stored = sessionStorage.getItem(`form_${formId}`);\n      if (!stored) {\n        return null;\n      }\n      \n      const { state, timestamp } = JSON.parse(stored);\n      \n      // Expire form state after 1 hour\n      if (Date.now() - timestamp > 60 * 60 * 1000) {\n        sessionStorage.removeItem(`form_${formId}`);\n        return null;\n      }\n      \n      return state;\n    } catch (error) {\n      console.warn('Failed to load form state:', error);\n      return null;\n    }\n  }\n\n  static clearFormState(formId: string): void {\n    try {\n      sessionStorage.removeItem(`form_${formId}`);\n    } catch (error) {\n      console.warn('Failed to clear form state:', error);\n    }\n  }\n\n  // Tab state management\n  static saveTabState(tabId: string, state: any): void {\n    try {\n      sessionStorage.setItem(`tab_${tabId}`, JSON.stringify(state));\n    } catch (error) {\n      console.warn('Failed to save tab state:', error);\n    }\n  }\n\n  static getTabState(tabId: string): any | null {\n    try {\n      const stored = sessionStorage.getItem(`tab_${tabId}`);\n      return stored ? JSON.parse(stored) : null;\n    } catch (error) {\n      console.warn('Failed to load tab state:', error);\n      return null;\n    }\n  }\n\n  // Clear all session data\n  static clearAll(): void {\n    try {\n      sessionStorage.clear();\n    } catch (error) {\n      console.warn('Failed to clear session storage:', error);\n    }\n  }\n}\n\n// Initialize cache manager when module is loaded\nif (typeof window !== 'undefined') {\n  CacheManager.initialize();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}