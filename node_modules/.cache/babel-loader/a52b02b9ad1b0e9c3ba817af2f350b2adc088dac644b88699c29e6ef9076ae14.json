{"ast":null,"code":"export const defaultRetryConfig = {\n  maxRetries: 3,\n  baseDelay: 1000,\n  // 1 second\n  maxDelay: 10000,\n  // 10 seconds\n  backoffFactor: 2,\n  retryCondition: error => {\n    var _error$response;\n    // Retry on network errors or 5xx server errors\n    if (!error.response) return true; // Network error\n    const status = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || error.status;\n    return status >= 500 && status < 600;\n  }\n};\nexport class RetryableError extends Error {\n  constructor(originalError, attempt, maxRetries) {\n    super(`Retry attempt ${attempt}/${maxRetries} failed: ${originalError.message}`);\n    this.originalError = void 0;\n    this.attempt = void 0;\n    this.maxRetries = void 0;\n    this.name = 'RetryableError';\n    this.originalError = originalError;\n    this.attempt = attempt;\n    this.maxRetries = maxRetries;\n  }\n}\nexport async function withRetry(operation, config = {}) {\n  const finalConfig = {\n    ...defaultRetryConfig,\n    ...config\n  };\n  let lastError;\n  for (let attempt = 1; attempt <= finalConfig.maxRetries + 1; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error;\n\n      // Don't retry if this is the last attempt\n      if (attempt > finalConfig.maxRetries) {\n        break;\n      }\n\n      // Check if we should retry this error\n      if (finalConfig.retryCondition && !finalConfig.retryCondition(error)) {\n        break;\n      }\n\n      // Call retry callback if provided\n      if (finalConfig.onRetry) {\n        finalConfig.onRetry(attempt, error);\n      }\n\n      // Calculate delay with exponential backoff\n      const delay = Math.min(finalConfig.baseDelay * Math.pow(finalConfig.backoffFactor, attempt - 1), finalConfig.maxDelay);\n\n      // Add jitter to prevent thundering herd\n      const jitteredDelay = delay + Math.random() * 1000;\n      await new Promise(resolve => setTimeout(resolve, jitteredDelay));\n    }\n  }\n  throw new RetryableError(lastError, finalConfig.maxRetries + 1, finalConfig.maxRetries);\n}\n\n// Specialized retry functions for different scenarios\nexport const retryApiCall = (apiCall, options = {}) => {\n  return withRetry(apiCall, {\n    ...defaultRetryConfig,\n    retryCondition: error => {\n      var _error$response2;\n      // Don't retry client errors (4xx) except for 408, 429\n      if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && _error$response2.status) {\n        const status = error.response.status;\n        if (status >= 400 && status < 500) {\n          return status === 408 || status === 429; // Timeout or Rate Limited\n        }\n      }\n      // Retry network errors and server errors\n      return !error.response || error.response.status >= 500;\n    },\n    onRetry: (attempt, error) => {\n      console.warn(`API call retry attempt ${attempt}:`, error.message);\n    },\n    ...options\n  });\n};\nexport const retryWithExponentialBackoff = (operation, maxRetries = 3) => {\n  return withRetry(operation, {\n    maxRetries,\n    baseDelay: 1000,\n    backoffFactor: 2,\n    maxDelay: 30000\n  });\n};\nexport const retryNetworkOperation = (operation, options = {}) => {\n  return withRetry(operation, {\n    maxRetries: 5,\n    baseDelay: 2000,\n    backoffFactor: 1.5,\n    maxDelay: 15000,\n    retryCondition: error => {\n      // Only retry on network errors\n      return !error.response;\n    },\n    ...options\n  });\n};\n\n// Hook for using retry mechanism in React components\nexport const useRetry = () => {\n  const retry = async (operation, config) => {\n    return withRetry(operation, config);\n  };\n  const retryApi = async (apiCall, options) => {\n    return retryApiCall(apiCall, options);\n  };\n  return {\n    retry,\n    retryApi\n  };\n};\n\n// Error recovery utilities\nexport const createRecoveryActions = error => {\n  var _error$response3, _error$response4, _error$response5;\n  const actions = [];\n\n  // Add refresh action for network errors\n  if (!error.response) {\n    actions.push({\n      label: 'Refresh Page',\n      action: () => window.location.reload()\n    });\n  }\n\n  // Add retry action for retryable errors\n  if (error instanceof RetryableError || ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) >= 500) {\n    actions.push({\n      label: 'Try Again',\n      action: () => {\n        // This would need to be implemented by the calling component\n        console.log('Retry action triggered');\n      }\n    });\n  }\n\n  // Add navigation actions for certain errors\n  if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 404) {\n    actions.push({\n      label: 'Go Home',\n      action: () => window.location.href = '/'\n    });\n  }\n  if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 401) {\n    actions.push({\n      label: 'Login',\n      action: () => window.location.href = '/login'\n    });\n  }\n  return actions;\n};\n\n// Error classification utility\nexport const classifyError = error => {\n  // Network errors\n  if (!error.response) {\n    return {\n      type: 'network',\n      severity: 'medium',\n      recoverable: true,\n      userMessage: 'Network connection issue. Please check your internet connection and try again.'\n    };\n  }\n  const status = error.response.status;\n\n  // Authentication errors\n  if (status === 401) {\n    return {\n      type: 'authentication',\n      severity: 'high',\n      recoverable: true,\n      userMessage: 'Your session has expired. Please log in again.'\n    };\n  }\n\n  // Validation errors\n  if (status === 400 || status === 422) {\n    return {\n      type: 'validation',\n      severity: 'low',\n      recoverable: true,\n      userMessage: 'Please check your input and try again.'\n    };\n  }\n\n  // Client errors\n  if (status >= 400 && status < 500) {\n    return {\n      type: 'client',\n      severity: status === 404 ? 'medium' : 'low',\n      recoverable: status === 404 || status === 403,\n      userMessage: status === 404 ? 'The requested resource was not found.' : 'There was an issue with your request.'\n    };\n  }\n\n  // Server errors\n  if (status >= 500) {\n    return {\n      type: 'server',\n      severity: 'high',\n      recoverable: true,\n      userMessage: 'Server error. Please try again in a few moments.'\n    };\n  }\n\n  // Unknown errors\n  return {\n    type: 'unknown',\n    severity: 'medium',\n    recoverable: true,\n    userMessage: 'An unexpected error occurred. Please try again.'\n  };\n};","map":{"version":3,"names":["defaultRetryConfig","maxRetries","baseDelay","maxDelay","backoffFactor","retryCondition","error","_error$response","response","status","RetryableError","Error","constructor","originalError","attempt","message","name","withRetry","operation","config","finalConfig","lastError","onRetry","delay","Math","min","pow","jitteredDelay","random","Promise","resolve","setTimeout","retryApiCall","apiCall","options","_error$response2","console","warn","retryWithExponentialBackoff","retryNetworkOperation","useRetry","retry","retryApi","createRecoveryActions","_error$response3","_error$response4","_error$response5","actions","push","label","action","window","location","reload","log","href","classifyError","type","severity","recoverable","userMessage"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/utils/retryMechanism.ts"],"sourcesContent":["import { ApiError } from '../types';\n\nexport interface RetryConfig {\n  maxRetries: number;\n  baseDelay: number;\n  maxDelay: number;\n  backoffFactor: number;\n  retryCondition?: (error: any) => boolean;\n  onRetry?: (attempt: number, error: any) => void;\n}\n\nexport const defaultRetryConfig: RetryConfig = {\n  maxRetries: 3,\n  baseDelay: 1000, // 1 second\n  maxDelay: 10000, // 10 seconds\n  backoffFactor: 2,\n  retryCondition: (error: any) => {\n    // Retry on network errors or 5xx server errors\n    if (!error.response) return true; // Network error\n    const status = error.response?.status || error.status;\n    return status >= 500 && status < 600;\n  },\n};\n\nexport class RetryableError extends Error {\n  public readonly originalError: any;\n  public readonly attempt: number;\n  public readonly maxRetries: number;\n\n  constructor(originalError: any, attempt: number, maxRetries: number) {\n    super(`Retry attempt ${attempt}/${maxRetries} failed: ${originalError.message}`);\n    this.name = 'RetryableError';\n    this.originalError = originalError;\n    this.attempt = attempt;\n    this.maxRetries = maxRetries;\n  }\n}\n\nexport async function withRetry<T>(\n  operation: () => Promise<T>,\n  config: Partial<RetryConfig> = {}\n): Promise<T> {\n  const finalConfig = { ...defaultRetryConfig, ...config };\n  let lastError: any;\n\n  for (let attempt = 1; attempt <= finalConfig.maxRetries + 1; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error;\n\n      // Don't retry if this is the last attempt\n      if (attempt > finalConfig.maxRetries) {\n        break;\n      }\n\n      // Check if we should retry this error\n      if (finalConfig.retryCondition && !finalConfig.retryCondition(error)) {\n        break;\n      }\n\n      // Call retry callback if provided\n      if (finalConfig.onRetry) {\n        finalConfig.onRetry(attempt, error);\n      }\n\n      // Calculate delay with exponential backoff\n      const delay = Math.min(\n        finalConfig.baseDelay * Math.pow(finalConfig.backoffFactor, attempt - 1),\n        finalConfig.maxDelay\n      );\n\n      // Add jitter to prevent thundering herd\n      const jitteredDelay = delay + Math.random() * 1000;\n\n      await new Promise(resolve => setTimeout(resolve, jitteredDelay));\n    }\n  }\n\n  throw new RetryableError(lastError, finalConfig.maxRetries + 1, finalConfig.maxRetries);\n}\n\n// Specialized retry functions for different scenarios\nexport const retryApiCall = <T>(\n  apiCall: () => Promise<T>,\n  options: Partial<RetryConfig> = {}\n): Promise<T> => {\n  return withRetry(apiCall, {\n    ...defaultRetryConfig,\n    retryCondition: (error: any) => {\n      // Don't retry client errors (4xx) except for 408, 429\n      if (error.response?.status) {\n        const status = error.response.status;\n        if (status >= 400 && status < 500) {\n          return status === 408 || status === 429; // Timeout or Rate Limited\n        }\n      }\n      // Retry network errors and server errors\n      return !error.response || (error.response.status >= 500);\n    },\n    onRetry: (attempt, error) => {\n      console.warn(`API call retry attempt ${attempt}:`, error.message);\n    },\n    ...options,\n  });\n};\n\nexport const retryWithExponentialBackoff = <T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3\n): Promise<T> => {\n  return withRetry(operation, {\n    maxRetries,\n    baseDelay: 1000,\n    backoffFactor: 2,\n    maxDelay: 30000,\n  });\n};\n\nexport const retryNetworkOperation = <T>(\n  operation: () => Promise<T>,\n  options: Partial<RetryConfig> = {}\n): Promise<T> => {\n  return withRetry(operation, {\n    maxRetries: 5,\n    baseDelay: 2000,\n    backoffFactor: 1.5,\n    maxDelay: 15000,\n    retryCondition: (error: any) => {\n      // Only retry on network errors\n      return !error.response;\n    },\n    ...options,\n  });\n};\n\n// Hook for using retry mechanism in React components\nexport const useRetry = () => {\n  const retry = async <T>(\n    operation: () => Promise<T>,\n    config?: Partial<RetryConfig>\n  ): Promise<T> => {\n    return withRetry(operation, config);\n  };\n\n  const retryApi = async <T>(\n    apiCall: () => Promise<T>,\n    options?: Partial<RetryConfig>\n  ): Promise<T> => {\n    return retryApiCall(apiCall, options);\n  };\n\n  return { retry, retryApi };\n};\n\n// Error recovery utilities\nexport const createRecoveryActions = (error: any) => {\n  const actions: Array<{ label: string; action: () => void }> = [];\n\n  // Add refresh action for network errors\n  if (!error.response) {\n    actions.push({\n      label: 'Refresh Page',\n      action: () => window.location.reload(),\n    });\n  }\n\n  // Add retry action for retryable errors\n  if (error instanceof RetryableError || error.response?.status >= 500) {\n    actions.push({\n      label: 'Try Again',\n      action: () => {\n        // This would need to be implemented by the calling component\n        console.log('Retry action triggered');\n      },\n    });\n  }\n\n  // Add navigation actions for certain errors\n  if (error.response?.status === 404) {\n    actions.push({\n      label: 'Go Home',\n      action: () => window.location.href = '/',\n    });\n  }\n\n  if (error.response?.status === 401) {\n    actions.push({\n      label: 'Login',\n      action: () => window.location.href = '/login',\n    });\n  }\n\n  return actions;\n};\n\n// Error classification utility\nexport const classifyError = (error: any): {\n  type: 'network' | 'client' | 'server' | 'validation' | 'authentication' | 'unknown';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  recoverable: boolean;\n  userMessage: string;\n} => {\n  // Network errors\n  if (!error.response) {\n    return {\n      type: 'network',\n      severity: 'medium',\n      recoverable: true,\n      userMessage: 'Network connection issue. Please check your internet connection and try again.',\n    };\n  }\n\n  const status = error.response.status;\n\n  // Authentication errors\n  if (status === 401) {\n    return {\n      type: 'authentication',\n      severity: 'high',\n      recoverable: true,\n      userMessage: 'Your session has expired. Please log in again.',\n    };\n  }\n\n  // Validation errors\n  if (status === 400 || status === 422) {\n    return {\n      type: 'validation',\n      severity: 'low',\n      recoverable: true,\n      userMessage: 'Please check your input and try again.',\n    };\n  }\n\n  // Client errors\n  if (status >= 400 && status < 500) {\n    return {\n      type: 'client',\n      severity: status === 404 ? 'medium' : 'low',\n      recoverable: status === 404 || status === 403,\n      userMessage: status === 404 \n        ? 'The requested resource was not found.'\n        : 'There was an issue with your request.',\n    };\n  }\n\n  // Server errors\n  if (status >= 500) {\n    return {\n      type: 'server',\n      severity: 'high',\n      recoverable: true,\n      userMessage: 'Server error. Please try again in a few moments.',\n    };\n  }\n\n  // Unknown errors\n  return {\n    type: 'unknown',\n    severity: 'medium',\n    recoverable: true,\n    userMessage: 'An unexpected error occurred. Please try again.',\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}