{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { CacheManager } from '../utils/cacheManager';\n\n// Cache metrics interface\n\n// Performance metrics interface\n\n// Cache hit/miss tracking hook\nexport const useCacheMetrics = () => {\n  _s();\n  const queryClient = useQueryClient();\n  const [metrics, setMetrics] = useState({\n    hits: 0,\n    misses: 0,\n    totalRequests: 0,\n    hitRate: 0,\n    cacheSize: 0,\n    itemCount: 0,\n    queryCount: 0,\n    mutationCount: 0,\n    staleCacheCount: 0,\n    errorRate: 0,\n    averageResponseTime: 0\n  });\n  const [performanceMetrics, setPerformanceMetrics] = useState({\n    queryTimes: {},\n    mutationTimes: {},\n    cacheOperationTimes: [],\n    networkRequestTimes: []\n  });\n  const [errors, setErrors] = useState(0);\n  const [totalOperations, setTotalOperations] = useState(0);\n\n  // Track cache hit\n  const trackCacheHit = useCallback(() => {\n    setMetrics(prev => {\n      const newHits = prev.hits + 1;\n      const newTotal = prev.totalRequests + 1;\n      return {\n        ...prev,\n        hits: newHits,\n        totalRequests: newTotal,\n        hitRate: newTotal > 0 ? newHits / newTotal : 0\n      };\n    });\n  }, []);\n\n  // Track cache miss\n  const trackCacheMiss = useCallback(() => {\n    setMetrics(prev => {\n      const newMisses = prev.misses + 1;\n      const newTotal = prev.totalRequests + 1;\n      return {\n        ...prev,\n        misses: newMisses,\n        totalRequests: newTotal,\n        hitRate: newTotal > 0 ? prev.hits / newTotal : 0\n      };\n    });\n  }, []);\n\n  // Track query performance\n  const trackQueryTime = useCallback((queryKey, duration) => {\n    setPerformanceMetrics(prev => ({\n      ...prev,\n      queryTimes: {\n        ...prev.queryTimes,\n        [queryKey]: [...(prev.queryTimes[queryKey] || []), duration].slice(-10) // Keep last 10 measurements\n      }\n    }));\n  }, []);\n\n  // Track mutation performance\n  const trackMutationTime = useCallback((mutationKey, duration) => {\n    setPerformanceMetrics(prev => ({\n      ...prev,\n      mutationTimes: {\n        ...prev.mutationTimes,\n        [mutationKey]: [...(prev.mutationTimes[mutationKey] || []), duration].slice(-10)\n      }\n    }));\n  }, []);\n\n  // Track cache operation performance\n  const trackCacheOperation = useCallback(duration => {\n    setPerformanceMetrics(prev => ({\n      ...prev,\n      cacheOperationTimes: [...prev.cacheOperationTimes, duration].slice(-50) // Keep last 50 measurements\n    }));\n  }, []);\n\n  // Track network request performance\n  const trackNetworkRequest = useCallback(duration => {\n    setPerformanceMetrics(prev => ({\n      ...prev,\n      networkRequestTimes: [...prev.networkRequestTimes, duration].slice(-50)\n    }));\n  }, []);\n\n  // Track errors\n  const trackError = useCallback(() => {\n    setErrors(prev => prev + 1);\n    setTotalOperations(prev => prev + 1);\n  }, []);\n\n  // Track successful operations\n  const trackSuccess = useCallback(() => {\n    setTotalOperations(prev => prev + 1);\n  }, []);\n\n  // Update cache size metrics\n  const updateCacheSize = useCallback(() => {\n    const {\n      totalSize,\n      itemCount\n    } = CacheManager.getCacheSize();\n    const queryCache = queryClient.getQueryCache();\n    const mutationCache = queryClient.getMutationCache();\n    const queries = queryCache.getAll();\n    const mutations = mutationCache.getAll();\n    const staleQueries = queries.filter(query => query.isStale()).length;\n    setMetrics(prev => ({\n      ...prev,\n      cacheSize: totalSize,\n      itemCount,\n      queryCount: queries.length,\n      mutationCount: mutations.length,\n      staleCacheCount: staleQueries,\n      errorRate: totalOperations > 0 ? errors / totalOperations : 0\n    }));\n  }, [queryClient, errors, totalOperations]);\n\n  // Calculate average response times\n  const calculateAverageResponseTime = useCallback(() => {\n    const allTimes = [...Object.values(performanceMetrics.queryTimes).flat(), ...Object.values(performanceMetrics.mutationTimes).flat(), ...performanceMetrics.networkRequestTimes];\n    const average = allTimes.length > 0 ? allTimes.reduce((sum, time) => sum + time, 0) / allTimes.length : 0;\n    setMetrics(prev => ({\n      ...prev,\n      averageResponseTime: average\n    }));\n  }, [performanceMetrics]);\n\n  // Update metrics periodically\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateCacheSize();\n      calculateAverageResponseTime();\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [updateCacheSize, calculateAverageResponseTime]);\n\n  // Get detailed performance statistics\n  const getPerformanceStats = useCallback(() => {\n    const queryStats = Object.entries(performanceMetrics.queryTimes).map(([key, times]) => ({\n      queryKey: key,\n      averageTime: times.reduce((sum, time) => sum + time, 0) / times.length,\n      minTime: Math.min(...times),\n      maxTime: Math.max(...times),\n      sampleCount: times.length\n    }));\n    const mutationStats = Object.entries(performanceMetrics.mutationTimes).map(([key, times]) => ({\n      mutationKey: key,\n      averageTime: times.reduce((sum, time) => sum + time, 0) / times.length,\n      minTime: Math.min(...times),\n      maxTime: Math.max(...times),\n      sampleCount: times.length\n    }));\n    const cacheOperationAvg = performanceMetrics.cacheOperationTimes.length > 0 ? performanceMetrics.cacheOperationTimes.reduce((sum, time) => sum + time, 0) / performanceMetrics.cacheOperationTimes.length : 0;\n    const networkRequestAvg = performanceMetrics.networkRequestTimes.length > 0 ? performanceMetrics.networkRequestTimes.reduce((sum, time) => sum + time, 0) / performanceMetrics.networkRequestTimes.length : 0;\n    return {\n      queries: queryStats,\n      mutations: mutationStats,\n      cacheOperationAverage: cacheOperationAvg,\n      networkRequestAverage: networkRequestAvg\n    };\n  }, [performanceMetrics]);\n\n  // Get cache health score (0-100)\n  const getCacheHealthScore = useCallback(() => {\n    let score = 100;\n\n    // Deduct points for low hit rate\n    if (metrics.hitRate < 0.8) {\n      score -= (0.8 - metrics.hitRate) * 50;\n    }\n\n    // Deduct points for high error rate\n    if (metrics.errorRate > 0.1) {\n      score -= (metrics.errorRate - 0.1) * 100;\n    }\n\n    // Deduct points for slow response times\n    if (metrics.averageResponseTime > 1000) {\n      score -= Math.min(30, (metrics.averageResponseTime - 1000) / 100);\n    }\n\n    // Deduct points for too many stale cache entries\n    const staleRatio = metrics.queryCount > 0 ? metrics.staleCacheCount / metrics.queryCount : 0;\n    if (staleRatio > 0.3) {\n      score -= (staleRatio - 0.3) * 50;\n    }\n    return Math.max(0, Math.round(score));\n  }, [metrics]);\n\n  // Reset metrics\n  const resetMetrics = useCallback(() => {\n    setMetrics({\n      hits: 0,\n      misses: 0,\n      totalRequests: 0,\n      hitRate: 0,\n      cacheSize: 0,\n      itemCount: 0,\n      queryCount: 0,\n      mutationCount: 0,\n      staleCacheCount: 0,\n      errorRate: 0,\n      averageResponseTime: 0\n    });\n    setPerformanceMetrics({\n      queryTimes: {},\n      mutationTimes: {},\n      cacheOperationTimes: [],\n      networkRequestTimes: []\n    });\n    setErrors(0);\n    setTotalOperations(0);\n  }, []);\n\n  // Export metrics to JSON\n  const exportMetrics = useCallback(() => {\n    const exportData = {\n      metrics,\n      performanceMetrics,\n      performanceStats: getPerformanceStats(),\n      healthScore: getCacheHealthScore(),\n      timestamp: new Date().toISOString()\n    };\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `cache-metrics-${Date.now()}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }, [metrics, performanceMetrics, getPerformanceStats, getCacheHealthScore]);\n  return {\n    metrics,\n    performanceMetrics,\n    trackCacheHit,\n    trackCacheMiss,\n    trackQueryTime,\n    trackMutationTime,\n    trackCacheOperation,\n    trackNetworkRequest,\n    trackError,\n    trackSuccess,\n    getPerformanceStats,\n    getCacheHealthScore,\n    resetMetrics,\n    exportMetrics\n  };\n};\n\n// Hook for monitoring React Query cache specifically\n_s(useCacheMetrics, \"JUg4e5dSPuRkZyiMZkUtU1Vi61I=\", false, function () {\n  return [useQueryClient];\n});\nexport const useQueryCacheMetrics = () => {\n  _s2();\n  const queryClient = useQueryClient();\n  const [queryMetrics, setQueryMetrics] = useState({\n    totalQueries: 0,\n    activeQueries: 0,\n    staleQueries: 0,\n    fetchingQueries: 0,\n    errorQueries: 0,\n    cacheSize: 0\n  });\n  const updateQueryMetrics = useCallback(() => {\n    const queryCache = queryClient.getQueryCache();\n    const queries = queryCache.getAll();\n    const activeQueries = queries.filter(query => query.getObserversCount() > 0);\n    const staleQueries = queries.filter(query => query.isStale());\n    const fetchingQueries = queries.filter(query => query.state.isFetching);\n    const errorQueries = queries.filter(query => query.state.status === 'error');\n\n    // Estimate cache size (rough approximation)\n    const estimatedSize = queries.reduce((size, query) => {\n      const dataSize = query.state.data ? JSON.stringify(query.state.data).length : 0;\n      return size + dataSize;\n    }, 0);\n    setQueryMetrics({\n      totalQueries: queries.length,\n      activeQueries: activeQueries.length,\n      staleQueries: staleQueries.length,\n      fetchingQueries: fetchingQueries.length,\n      errorQueries: errorQueries.length,\n      cacheSize: estimatedSize\n    });\n  }, [queryClient]);\n  useEffect(() => {\n    // Update metrics immediately\n    updateQueryMetrics();\n\n    // Set up periodic updates\n    const interval = setInterval(updateQueryMetrics, 2000);\n\n    // Listen to query cache events\n    const unsubscribe = queryClient.getQueryCache().subscribe(() => {\n      updateQueryMetrics();\n    });\n    return () => {\n      clearInterval(interval);\n      unsubscribe();\n    };\n  }, [queryClient, updateQueryMetrics]);\n  const getQueryDetails = useCallback(() => {\n    const queryCache = queryClient.getQueryCache();\n    const queries = queryCache.getAll();\n    return queries.map(query => ({\n      queryKey: query.queryKey,\n      status: query.state.status,\n      isFetching: query.state.isFetching,\n      isStale: query.isStale(),\n      observersCount: query.getObserversCount(),\n      dataUpdatedAt: query.state.dataUpdatedAt,\n      errorUpdatedAt: query.state.errorUpdatedAt,\n      fetchFailureCount: query.state.fetchFailureCount,\n      dataSize: query.state.data ? JSON.stringify(query.state.data).length : 0\n    }));\n  }, [queryClient]);\n  const clearStaleQueries = useCallback(() => {\n    queryClient.removeQueries({\n      predicate: query => query.isStale() && query.getObserversCount() === 0\n    });\n  }, [queryClient]);\n  const clearErrorQueries = useCallback(() => {\n    queryClient.removeQueries({\n      predicate: query => query.state.status === 'error'\n    });\n  }, [queryClient]);\n  return {\n    queryMetrics,\n    getQueryDetails,\n    clearStaleQueries,\n    clearErrorQueries,\n    updateQueryMetrics\n  };\n};\n_s2(useQueryCacheMetrics, \"MfVIcZY1IsCFpoq4bxwT8KtzmG8=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"names":["useState","useCallback","useEffect","useQueryClient","CacheManager","useCacheMetrics","_s","queryClient","metrics","setMetrics","hits","misses","totalRequests","hitRate","cacheSize","itemCount","queryCount","mutationCount","staleCacheCount","errorRate","averageResponseTime","performanceMetrics","setPerformanceMetrics","queryTimes","mutationTimes","cacheOperationTimes","networkRequestTimes","errors","setErrors","totalOperations","setTotalOperations","trackCacheHit","prev","newHits","newTotal","trackCacheMiss","newMisses","trackQueryTime","queryKey","duration","slice","trackMutationTime","mutationKey","trackCacheOperation","trackNetworkRequest","trackError","trackSuccess","updateCacheSize","totalSize","getCacheSize","queryCache","getQueryCache","mutationCache","getMutationCache","queries","getAll","mutations","staleQueries","filter","query","isStale","length","calculateAverageResponseTime","allTimes","Object","values","flat","average","reduce","sum","time","interval","setInterval","clearInterval","getPerformanceStats","queryStats","entries","map","key","times","averageTime","minTime","Math","min","maxTime","max","sampleCount","mutationStats","cacheOperationAvg","networkRequestAvg","cacheOperationAverage","networkRequestAverage","getCacheHealthScore","score","staleRatio","round","resetMetrics","exportMetrics","exportData","performanceStats","healthScore","timestamp","Date","toISOString","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","a","document","createElement","href","download","now","body","appendChild","click","removeChild","revokeObjectURL","useQueryCacheMetrics","_s2","queryMetrics","setQueryMetrics","totalQueries","activeQueries","fetchingQueries","errorQueries","updateQueryMetrics","getObserversCount","state","isFetching","status","estimatedSize","size","dataSize","data","unsubscribe","subscribe","getQueryDetails","observersCount","dataUpdatedAt","errorUpdatedAt","fetchFailureCount","clearStaleQueries","removeQueries","predicate","clearErrorQueries"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/hooks/useCacheMetrics.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { CacheManager } from '../utils/cacheManager';\n\n// Cache metrics interface\nexport interface CacheMetrics {\n  hits: number;\n  misses: number;\n  totalRequests: number;\n  hitRate: number;\n  cacheSize: number;\n  itemCount: number;\n  queryCount: number;\n  mutationCount: number;\n  staleCacheCount: number;\n  errorRate: number;\n  averageResponseTime: number;\n}\n\n// Performance metrics interface\nexport interface PerformanceMetrics {\n  queryTimes: Record<string, number[]>;\n  mutationTimes: Record<string, number[]>;\n  cacheOperationTimes: number[];\n  networkRequestTimes: number[];\n}\n\n// Cache hit/miss tracking hook\nexport const useCacheMetrics = () => {\n  const queryClient = useQueryClient();\n  const [metrics, setMetrics] = useState<CacheMetrics>({\n    hits: 0,\n    misses: 0,\n    totalRequests: 0,\n    hitRate: 0,\n    cacheSize: 0,\n    itemCount: 0,\n    queryCount: 0,\n    mutationCount: 0,\n    staleCacheCount: 0,\n    errorRate: 0,\n    averageResponseTime: 0,\n  });\n\n  const [performanceMetrics, setPerformanceMetrics] = useState<PerformanceMetrics>({\n    queryTimes: {},\n    mutationTimes: {},\n    cacheOperationTimes: [],\n    networkRequestTimes: [],\n  });\n\n  const [errors, setErrors] = useState<number>(0);\n  const [totalOperations, setTotalOperations] = useState<number>(0);\n\n  // Track cache hit\n  const trackCacheHit = useCallback(() => {\n    setMetrics(prev => {\n      const newHits = prev.hits + 1;\n      const newTotal = prev.totalRequests + 1;\n      return {\n        ...prev,\n        hits: newHits,\n        totalRequests: newTotal,\n        hitRate: newTotal > 0 ? newHits / newTotal : 0,\n      };\n    });\n  }, []);\n\n  // Track cache miss\n  const trackCacheMiss = useCallback(() => {\n    setMetrics(prev => {\n      const newMisses = prev.misses + 1;\n      const newTotal = prev.totalRequests + 1;\n      return {\n        ...prev,\n        misses: newMisses,\n        totalRequests: newTotal,\n        hitRate: newTotal > 0 ? prev.hits / newTotal : 0,\n      };\n    });\n  }, []);\n\n  // Track query performance\n  const trackQueryTime = useCallback((queryKey: string, duration: number) => {\n    setPerformanceMetrics(prev => ({\n      ...prev,\n      queryTimes: {\n        ...prev.queryTimes,\n        [queryKey]: [...(prev.queryTimes[queryKey] || []), duration].slice(-10), // Keep last 10 measurements\n      },\n    }));\n  }, []);\n\n  // Track mutation performance\n  const trackMutationTime = useCallback((mutationKey: string, duration: number) => {\n    setPerformanceMetrics(prev => ({\n      ...prev,\n      mutationTimes: {\n        ...prev.mutationTimes,\n        [mutationKey]: [...(prev.mutationTimes[mutationKey] || []), duration].slice(-10),\n      },\n    }));\n  }, []);\n\n  // Track cache operation performance\n  const trackCacheOperation = useCallback((duration: number) => {\n    setPerformanceMetrics(prev => ({\n      ...prev,\n      cacheOperationTimes: [...prev.cacheOperationTimes, duration].slice(-50), // Keep last 50 measurements\n    }));\n  }, []);\n\n  // Track network request performance\n  const trackNetworkRequest = useCallback((duration: number) => {\n    setPerformanceMetrics(prev => ({\n      ...prev,\n      networkRequestTimes: [...prev.networkRequestTimes, duration].slice(-50),\n    }));\n  }, []);\n\n  // Track errors\n  const trackError = useCallback(() => {\n    setErrors(prev => prev + 1);\n    setTotalOperations(prev => prev + 1);\n  }, []);\n\n  // Track successful operations\n  const trackSuccess = useCallback(() => {\n    setTotalOperations(prev => prev + 1);\n  }, []);\n\n  // Update cache size metrics\n  const updateCacheSize = useCallback(() => {\n    const { totalSize, itemCount } = CacheManager.getCacheSize();\n    const queryCache = queryClient.getQueryCache();\n    const mutationCache = queryClient.getMutationCache();\n    \n    const queries = queryCache.getAll();\n    const mutations = mutationCache.getAll();\n    \n    const staleQueries = queries.filter(query => query.isStale()).length;\n\n    setMetrics(prev => ({\n      ...prev,\n      cacheSize: totalSize,\n      itemCount,\n      queryCount: queries.length,\n      mutationCount: mutations.length,\n      staleCacheCount: staleQueries,\n      errorRate: totalOperations > 0 ? errors / totalOperations : 0,\n    }));\n  }, [queryClient, errors, totalOperations]);\n\n  // Calculate average response times\n  const calculateAverageResponseTime = useCallback(() => {\n    const allTimes = [\n      ...Object.values(performanceMetrics.queryTimes).flat(),\n      ...Object.values(performanceMetrics.mutationTimes).flat(),\n      ...performanceMetrics.networkRequestTimes,\n    ];\n\n    const average = allTimes.length > 0 \n      ? allTimes.reduce((sum, time) => sum + time, 0) / allTimes.length \n      : 0;\n\n    setMetrics(prev => ({\n      ...prev,\n      averageResponseTime: average,\n    }));\n  }, [performanceMetrics]);\n\n  // Update metrics periodically\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateCacheSize();\n      calculateAverageResponseTime();\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [updateCacheSize, calculateAverageResponseTime]);\n\n  // Get detailed performance statistics\n  const getPerformanceStats = useCallback(() => {\n    const queryStats = Object.entries(performanceMetrics.queryTimes).map(([key, times]) => ({\n      queryKey: key,\n      averageTime: times.reduce((sum, time) => sum + time, 0) / times.length,\n      minTime: Math.min(...times),\n      maxTime: Math.max(...times),\n      sampleCount: times.length,\n    }));\n\n    const mutationStats = Object.entries(performanceMetrics.mutationTimes).map(([key, times]) => ({\n      mutationKey: key,\n      averageTime: times.reduce((sum, time) => sum + time, 0) / times.length,\n      minTime: Math.min(...times),\n      maxTime: Math.max(...times),\n      sampleCount: times.length,\n    }));\n\n    const cacheOperationAvg = performanceMetrics.cacheOperationTimes.length > 0\n      ? performanceMetrics.cacheOperationTimes.reduce((sum, time) => sum + time, 0) / performanceMetrics.cacheOperationTimes.length\n      : 0;\n\n    const networkRequestAvg = performanceMetrics.networkRequestTimes.length > 0\n      ? performanceMetrics.networkRequestTimes.reduce((sum, time) => sum + time, 0) / performanceMetrics.networkRequestTimes.length\n      : 0;\n\n    return {\n      queries: queryStats,\n      mutations: mutationStats,\n      cacheOperationAverage: cacheOperationAvg,\n      networkRequestAverage: networkRequestAvg,\n    };\n  }, [performanceMetrics]);\n\n  // Get cache health score (0-100)\n  const getCacheHealthScore = useCallback(() => {\n    let score = 100;\n\n    // Deduct points for low hit rate\n    if (metrics.hitRate < 0.8) {\n      score -= (0.8 - metrics.hitRate) * 50;\n    }\n\n    // Deduct points for high error rate\n    if (metrics.errorRate > 0.1) {\n      score -= (metrics.errorRate - 0.1) * 100;\n    }\n\n    // Deduct points for slow response times\n    if (metrics.averageResponseTime > 1000) {\n      score -= Math.min(30, (metrics.averageResponseTime - 1000) / 100);\n    }\n\n    // Deduct points for too many stale cache entries\n    const staleRatio = metrics.queryCount > 0 ? metrics.staleCacheCount / metrics.queryCount : 0;\n    if (staleRatio > 0.3) {\n      score -= (staleRatio - 0.3) * 50;\n    }\n\n    return Math.max(0, Math.round(score));\n  }, [metrics]);\n\n  // Reset metrics\n  const resetMetrics = useCallback(() => {\n    setMetrics({\n      hits: 0,\n      misses: 0,\n      totalRequests: 0,\n      hitRate: 0,\n      cacheSize: 0,\n      itemCount: 0,\n      queryCount: 0,\n      mutationCount: 0,\n      staleCacheCount: 0,\n      errorRate: 0,\n      averageResponseTime: 0,\n    });\n    setPerformanceMetrics({\n      queryTimes: {},\n      mutationTimes: {},\n      cacheOperationTimes: [],\n      networkRequestTimes: [],\n    });\n    setErrors(0);\n    setTotalOperations(0);\n  }, []);\n\n  // Export metrics to JSON\n  const exportMetrics = useCallback(() => {\n    const exportData = {\n      metrics,\n      performanceMetrics,\n      performanceStats: getPerformanceStats(),\n      healthScore: getCacheHealthScore(),\n      timestamp: new Date().toISOString(),\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `cache-metrics-${Date.now()}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }, [metrics, performanceMetrics, getPerformanceStats, getCacheHealthScore]);\n\n  return {\n    metrics,\n    performanceMetrics,\n    trackCacheHit,\n    trackCacheMiss,\n    trackQueryTime,\n    trackMutationTime,\n    trackCacheOperation,\n    trackNetworkRequest,\n    trackError,\n    trackSuccess,\n    getPerformanceStats,\n    getCacheHealthScore,\n    resetMetrics,\n    exportMetrics,\n  };\n};\n\n// Hook for monitoring React Query cache specifically\nexport const useQueryCacheMetrics = () => {\n  const queryClient = useQueryClient();\n  const [queryMetrics, setQueryMetrics] = useState({\n    totalQueries: 0,\n    activeQueries: 0,\n    staleQueries: 0,\n    fetchingQueries: 0,\n    errorQueries: 0,\n    cacheSize: 0,\n  });\n\n  const updateQueryMetrics = useCallback(() => {\n    const queryCache = queryClient.getQueryCache();\n    const queries = queryCache.getAll();\n\n    const activeQueries = queries.filter(query => query.getObserversCount() > 0);\n    const staleQueries = queries.filter(query => query.isStale());\n    const fetchingQueries = queries.filter(query => query.state.isFetching);\n    const errorQueries = queries.filter(query => query.state.status === 'error');\n\n    // Estimate cache size (rough approximation)\n    const estimatedSize = queries.reduce((size, query) => {\n      const dataSize = query.state.data ? JSON.stringify(query.state.data).length : 0;\n      return size + dataSize;\n    }, 0);\n\n    setQueryMetrics({\n      totalQueries: queries.length,\n      activeQueries: activeQueries.length,\n      staleQueries: staleQueries.length,\n      fetchingQueries: fetchingQueries.length,\n      errorQueries: errorQueries.length,\n      cacheSize: estimatedSize,\n    });\n  }, [queryClient]);\n\n  useEffect(() => {\n    // Update metrics immediately\n    updateQueryMetrics();\n\n    // Set up periodic updates\n    const interval = setInterval(updateQueryMetrics, 2000);\n\n    // Listen to query cache events\n    const unsubscribe = queryClient.getQueryCache().subscribe(() => {\n      updateQueryMetrics();\n    });\n\n    return () => {\n      clearInterval(interval);\n      unsubscribe();\n    };\n  }, [queryClient, updateQueryMetrics]);\n\n  const getQueryDetails = useCallback(() => {\n    const queryCache = queryClient.getQueryCache();\n    const queries = queryCache.getAll();\n\n    return queries.map(query => ({\n      queryKey: query.queryKey,\n      status: query.state.status,\n      isFetching: query.state.isFetching,\n      isStale: query.isStale(),\n      observersCount: query.getObserversCount(),\n      dataUpdatedAt: query.state.dataUpdatedAt,\n      errorUpdatedAt: query.state.errorUpdatedAt,\n      fetchFailureCount: query.state.fetchFailureCount,\n      dataSize: query.state.data ? JSON.stringify(query.state.data).length : 0,\n    }));\n  }, [queryClient]);\n\n  const clearStaleQueries = useCallback(() => {\n    queryClient.removeQueries({\n      predicate: (query) => query.isStale() && query.getObserversCount() === 0,\n    });\n  }, [queryClient]);\n\n  const clearErrorQueries = useCallback(() => {\n    queryClient.removeQueries({\n      predicate: (query) => query.state.status === 'error',\n    });\n  }, [queryClient]);\n\n  return {\n    queryMetrics,\n    getQueryDetails,\n    clearStaleQueries,\n    clearErrorQueries,\n    updateQueryMetrics,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}