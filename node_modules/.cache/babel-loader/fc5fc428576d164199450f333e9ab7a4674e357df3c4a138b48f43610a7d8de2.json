{"ast":null,"code":"import { QueryClient, QueryCache, MutationCache } from '@tanstack/react-query';\nimport { toast } from 'react-hot-toast';\n// Cache configuration for different data types\nexport const cacheConfigs = {\n  // Frequently changing data\n  positions: {\n    staleTime: 2 * 60 * 1000,\n    // 2 minutes\n    cacheTime: 5 * 60 * 1000,\n    // 5 minutes\n    refetchOnMount: true\n  },\n  // Moderately changing data\n  interviews: {\n    staleTime: 5 * 60 * 1000,\n    // 5 minutes\n    cacheTime: 10 * 60 * 1000,\n    // 10 minutes\n    refetchOnMount: false\n  },\n  // Rarely changing data\n  userProfile: {\n    staleTime: 30 * 60 * 1000,\n    // 30 minutes\n    cacheTime: 60 * 60 * 1000,\n    // 1 hour\n    refetchOnMount: false\n  },\n  // Statistics (expensive to calculate)\n  statistics: {\n    staleTime: 10 * 60 * 1000,\n    // 10 minutes\n    cacheTime: 30 * 60 * 1000,\n    // 30 minutes\n    refetchOnMount: false\n  }\n};\n\n// Create query client with comprehensive configuration\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // Stale time: how long data is considered fresh\n      staleTime: 5 * 60 * 1000,\n      // 5 minutes\n      // Cache time: how long data stays in cache after becoming unused\n      cacheTime: 10 * 60 * 1000,\n      // 10 minutes\n      // Retry configuration\n      retry: (failureCount, error) => {\n        // Don't retry on 4xx errors (client errors)\n        if (error && typeof error === 'object' && 'code' in error) {\n          const apiError = error;\n          if (apiError.code.startsWith('4')) {\n            return false;\n          }\n        }\n        // Retry up to 3 times for other errors\n        return failureCount < 3;\n      },\n      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n      // Don't refetch on window focus by default\n      refetchOnWindowFocus: false,\n      // Refetch on reconnect\n      refetchOnReconnect: true,\n      // Background refetch interval (disabled by default)\n      refetchInterval: false\n    },\n    mutations: {\n      // Retry mutations once on failure\n      retry: 1,\n      retryDelay: 1000\n    }\n  },\n  queryCache: new QueryCache({\n    onError: (error, query) => {\n      // Global error handling for queries\n      console.error('Query error:', error, query);\n      if (error && typeof error === 'object' && 'message' in error) {\n        const apiError = error;\n        // Don't show toast for background refetches\n        if (query.state.fetchStatus !== 'fetching' || query.state.dataUpdatedAt === 0) {\n          toast.error(apiError.message || 'An error occurred while fetching data');\n        }\n      }\n    },\n    onSuccess: (data, query) => {\n      // Optional: Log successful queries in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Query success:', query.queryKey, data);\n      }\n    }\n  }),\n  mutationCache: new MutationCache({\n    onError: (error, variables, _context, mutation) => {\n      // Global error handling for mutations\n      console.error('Mutation error:', error, variables, mutation);\n      if (error && typeof error === 'object' && 'message' in error) {\n        const apiError = error;\n        toast.error(apiError.message || 'An error occurred while saving data');\n      }\n    },\n    onSuccess: (data, _variables, _context, mutation) => {\n      // Optional: Show success toast for mutations\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Mutation success:', mutation.options.mutationKey, data);\n      }\n    }\n  })\n});\n\n// Query key factory for consistent key generation\nexport const queryKeys = {\n  // Auth keys\n  auth: {\n    user: ['auth', 'user'],\n    verify: ['auth', 'verify']\n  },\n  // Position keys\n  positions: {\n    all: ['positions'],\n    lists: () => [...queryKeys.positions.all, 'list'],\n    list: filters => [...queryKeys.positions.lists(), filters],\n    details: () => [...queryKeys.positions.all, 'detail'],\n    detail: id => [...queryKeys.positions.details(), id],\n    summary: () => [...queryKeys.positions.all, 'summary'],\n    byStatus: status => [...queryKeys.positions.all, 'status', status],\n    byCompany: company => [...queryKeys.positions.all, 'company', company],\n    recent: () => [...queryKeys.positions.all, 'recent']\n  },\n  // Interview keys\n  interviews: {\n    all: ['interviews'],\n    lists: () => [...queryKeys.interviews.all, 'list'],\n    list: positionId => [...queryKeys.interviews.lists(), positionId],\n    details: () => [...queryKeys.interviews.all, 'detail'],\n    detail: id => [...queryKeys.interviews.details(), id],\n    upcoming: () => [...queryKeys.interviews.all, 'upcoming'],\n    today: () => [...queryKeys.interviews.all, 'today'],\n    overdue: () => [...queryKeys.interviews.all, 'overdue'],\n    byOutcome: outcome => [...queryKeys.interviews.all, 'outcome', outcome],\n    stats: positionId => [...queryKeys.interviews.all, 'stats', positionId]\n  },\n  // Statistics keys\n  statistics: {\n    all: ['statistics'],\n    overview: () => [...queryKeys.statistics.all, 'overview'],\n    positions: () => [...queryKeys.statistics.all, 'positions'],\n    interviews: () => [...queryKeys.statistics.all, 'interviews'],\n    companies: () => [...queryKeys.statistics.all, 'companies'],\n    dashboard: () => [...queryKeys.statistics.all, 'dashboard'],\n    monthly: year => [...queryKeys.statistics.all, 'monthly', year],\n    custom: filters => [...queryKeys.statistics.all, 'custom', filters]\n  }\n};\n\n// Cache invalidation utilities\nexport const invalidateQueries = {\n  // Invalidate all position-related queries\n  positions: () => {\n    queryClient.invalidateQueries(queryKeys.positions.all);\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  // Invalidate specific position\n  position: id => {\n    queryClient.invalidateQueries(queryKeys.positions.detail(id));\n    queryClient.invalidateQueries(queryKeys.positions.lists());\n    queryClient.invalidateQueries(queryKeys.interviews.list(id));\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  // Invalidate all interview-related queries\n  interviews: () => {\n    queryClient.invalidateQueries(queryKeys.interviews.all);\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  // Invalidate specific interview\n  interview: (id, positionId) => {\n    queryClient.invalidateQueries(queryKeys.interviews.detail(id));\n    if (positionId) {\n      queryClient.invalidateQueries(queryKeys.interviews.list(positionId));\n      queryClient.invalidateQueries(queryKeys.positions.detail(positionId));\n    }\n    queryClient.invalidateQueries(queryKeys.interviews.upcoming());\n    queryClient.invalidateQueries(queryKeys.interviews.today());\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  // Invalidate all statistics\n  statistics: () => {\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  // Invalidate all data (nuclear option)\n  all: () => {\n    queryClient.invalidateQueries();\n  }\n};\n\n// Prefetch utilities\nexport const prefetchQueries = {\n  // Prefetch position details when hovering over position card\n  positionDetails: id => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.positions.detail(id),\n      queryFn: () => import('../services').then(({\n        positionService\n      }) => positionService.getPosition(id)),\n      staleTime: 2 * 60 * 1000 // 2 minutes\n    });\n  },\n  // Prefetch interviews when viewing position details\n  positionInterviews: positionId => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.interviews.list(positionId),\n      queryFn: () => import('../services').then(({\n        interviewService\n      }) => interviewService.getInterviews(positionId)),\n      staleTime: 2 * 60 * 1000\n    });\n  },\n  // Prefetch dashboard data\n  dashboard: () => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.statistics.dashboard(),\n      queryFn: () => import('../services').then(({\n        statisticsService\n      }) => statisticsService.getDashboardSummary()),\n      staleTime: 5 * 60 * 1000\n    });\n  }\n};\n\n// Optimistic update utilities\nexport const optimisticUpdates = {\n  // Optimistically update position in cache\n  updatePosition: (id, updates) => {\n    queryClient.setQueryData(queryKeys.positions.detail(id), old => {\n      if (!old) {\n        return old;\n      }\n      return {\n        ...old,\n        ...updates,\n        updated_at: new Date().toISOString()\n      };\n    });\n\n    // Also update in lists\n    queryClient.setQueriesData({\n      queryKey: queryKeys.positions.lists()\n    }, old => {\n      if (!(old !== null && old !== void 0 && old.positions)) {\n        return old;\n      }\n      return {\n        ...old,\n        positions: old.positions.map(position => position.id === id ? {\n          ...position,\n          ...updates,\n          updated_at: new Date().toISOString()\n        } : position)\n      };\n    });\n  },\n  // Optimistically update interview in cache\n  updateInterview: (id, positionId, updates) => {\n    queryClient.setQueryData(queryKeys.interviews.detail(id), old => {\n      if (!old) {\n        return old;\n      }\n      return {\n        ...old,\n        ...updates,\n        updated_at: new Date().toISOString()\n      };\n    });\n\n    // Update in position's interview list\n    queryClient.setQueryData(queryKeys.interviews.list(positionId), old => {\n      if (!old) {\n        return old;\n      }\n      return old.map(interview => interview.id === id ? {\n        ...interview,\n        ...updates,\n        updated_at: new Date().toISOString()\n      } : interview);\n    });\n  },\n  // Optimistically add new position\n  addPosition: newPosition => {\n    queryClient.setQueriesData({\n      queryKey: queryKeys.positions.lists()\n    }, old => {\n      if (!(old !== null && old !== void 0 && old.positions)) {\n        return old;\n      }\n      return {\n        ...old,\n        positions: [newPosition, ...old.positions],\n        total: old.total + 1\n      };\n    });\n  },\n  // Optimistically remove position\n  removePosition: id => {\n    queryClient.setQueriesData({\n      queryKey: queryKeys.positions.lists()\n    }, old => {\n      if (!(old !== null && old !== void 0 && old.positions)) {\n        return old;\n      }\n      return {\n        ...old,\n        positions: old.positions.filter(position => position.id !== id),\n        total: Math.max(0, old.total - 1)\n      };\n    });\n  }\n};\n\n// Background sync utilities\nexport const backgroundSync = {\n  // Start background sync for active queries\n  start: () => {\n    const interval = setInterval(() => {\n      // Refetch stale queries that are currently being observed\n      queryClient.refetchQueries({\n        type: 'active',\n        stale: true\n      });\n    }, 5 * 60 * 1000); // Every 5 minutes\n\n    return () => clearInterval(interval);\n  },\n  // Sync specific data types\n  syncPositions: () => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.positions.all,\n      type: 'active'\n    });\n  },\n  syncInterviews: () => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.interviews.all,\n      type: 'active'\n    });\n  },\n  syncStatistics: () => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.statistics.all,\n      type: 'active'\n    });\n  }\n};\nexport default queryClient;","map":{"version":3,"names":["QueryClient","QueryCache","MutationCache","toast","cacheConfigs","positions","staleTime","cacheTime","refetchOnMount","interviews","userProfile","statistics","queryClient","defaultOptions","queries","retry","failureCount","error","apiError","code","startsWith","retryDelay","attemptIndex","Math","min","refetchOnWindowFocus","refetchOnReconnect","refetchInterval","mutations","queryCache","onError","query","console","state","fetchStatus","dataUpdatedAt","message","onSuccess","data","process","env","NODE_ENV","log","queryKey","mutationCache","variables","_context","mutation","_variables","options","mutationKey","queryKeys","auth","user","verify","all","lists","list","filters","details","detail","id","summary","byStatus","status","byCompany","company","recent","positionId","upcoming","today","overdue","byOutcome","outcome","stats","overview","companies","dashboard","monthly","year","custom","invalidateQueries","position","interview","prefetchQueries","positionDetails","prefetchQuery","queryFn","then","positionService","getPosition","positionInterviews","interviewService","getInterviews","statisticsService","getDashboardSummary","optimisticUpdates","updatePosition","updates","setQueryData","old","updated_at","Date","toISOString","setQueriesData","map","updateInterview","addPosition","newPosition","total","removePosition","filter","max","backgroundSync","start","interval","setInterval","refetchQueries","type","stale","clearInterval","syncPositions","syncInterviews","syncStatistics"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/lib/queryClient.ts"],"sourcesContent":["import { QueryClient, QueryCache, MutationCache } from '@tanstack/react-query';\nimport { toast } from 'react-hot-toast';\nimport { ApiError } from '../types';\n\n// Cache configuration for different data types\nexport const cacheConfigs = {\n  // Frequently changing data\n  positions: {\n    staleTime: 2 * 60 * 1000, // 2 minutes\n    cacheTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnMount: true,\n  },\n  \n  // Moderately changing data\n  interviews: {\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    cacheTime: 10 * 60 * 1000, // 10 minutes\n    refetchOnMount: false,\n  },\n  \n  // Rarely changing data\n  userProfile: {\n    staleTime: 30 * 60 * 1000, // 30 minutes\n    cacheTime: 60 * 60 * 1000, // 1 hour\n    refetchOnMount: false,\n  },\n  \n  // Statistics (expensive to calculate)\n  statistics: {\n    staleTime: 10 * 60 * 1000, // 10 minutes\n    cacheTime: 30 * 60 * 1000, // 30 minutes\n    refetchOnMount: false,\n  },\n} as const;\n\n// Create query client with comprehensive configuration\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // Stale time: how long data is considered fresh\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      // Cache time: how long data stays in cache after becoming unused\n      cacheTime: 10 * 60 * 1000, // 10 minutes\n      // Retry configuration\n      retry: (failureCount, error) => {\n        // Don't retry on 4xx errors (client errors)\n        if (error && typeof error === 'object' && 'code' in error) {\n          const apiError = error as ApiError;\n          if (apiError.code.startsWith('4')) {\n            return false;\n          }\n        }\n        // Retry up to 3 times for other errors\n        return failureCount < 3;\n      },\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n      // Don't refetch on window focus by default\n      refetchOnWindowFocus: false,\n      // Refetch on reconnect\n      refetchOnReconnect: true,\n      // Background refetch interval (disabled by default)\n      refetchInterval: false,\n    },\n    mutations: {\n      // Retry mutations once on failure\n      retry: 1,\n      retryDelay: 1000,\n    },\n  },\n  queryCache: new QueryCache({\n    onError: (error, query) => {\n      // Global error handling for queries\n      console.error('Query error:', error, query);\n      \n      if (error && typeof error === 'object' && 'message' in error) {\n        const apiError = error as ApiError;\n        // Don't show toast for background refetches\n        if (query.state.fetchStatus !== 'fetching' || query.state.dataUpdatedAt === 0) {\n          toast.error(apiError.message || 'An error occurred while fetching data');\n        }\n      }\n    },\n    onSuccess: (data, query) => {\n      // Optional: Log successful queries in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Query success:', query.queryKey, data);\n      }\n    },\n  }),\n  mutationCache: new MutationCache({\n    onError: (error, variables, _context, mutation) => {\n      // Global error handling for mutations\n      console.error('Mutation error:', error, variables, mutation);\n      \n      if (error && typeof error === 'object' && 'message' in error) {\n        const apiError = error as ApiError;\n        toast.error(apiError.message || 'An error occurred while saving data');\n      }\n    },\n    onSuccess: (data, _variables, _context, mutation) => {\n      // Optional: Show success toast for mutations\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Mutation success:', mutation.options.mutationKey, data);\n      }\n    },\n  }),\n});\n\n// Query key factory for consistent key generation\nexport const queryKeys = {\n  // Auth keys\n  auth: {\n    user: ['auth', 'user'] as const,\n    verify: ['auth', 'verify'] as const,\n  },\n  \n  // Position keys\n  positions: {\n    all: ['positions'] as const,\n    lists: () => [...queryKeys.positions.all, 'list'] as const,\n    list: (filters?: any) => [...queryKeys.positions.lists(), filters] as const,\n    details: () => [...queryKeys.positions.all, 'detail'] as const,\n    detail: (id: string) => [...queryKeys.positions.details(), id] as const,\n    summary: () => [...queryKeys.positions.all, 'summary'] as const,\n    byStatus: (status: string) => [...queryKeys.positions.all, 'status', status] as const,\n    byCompany: (company: string) => [...queryKeys.positions.all, 'company', company] as const,\n    recent: () => [...queryKeys.positions.all, 'recent'] as const,\n  },\n  \n  // Interview keys\n  interviews: {\n    all: ['interviews'] as const,\n    lists: () => [...queryKeys.interviews.all, 'list'] as const,\n    list: (positionId?: string) => [...queryKeys.interviews.lists(), positionId] as const,\n    details: () => [...queryKeys.interviews.all, 'detail'] as const,\n    detail: (id: string) => [...queryKeys.interviews.details(), id] as const,\n    upcoming: () => [...queryKeys.interviews.all, 'upcoming'] as const,\n    today: () => [...queryKeys.interviews.all, 'today'] as const,\n    overdue: () => [...queryKeys.interviews.all, 'overdue'] as const,\n    byOutcome: (outcome: string) => [...queryKeys.interviews.all, 'outcome', outcome] as const,\n    stats: (positionId: string) => [...queryKeys.interviews.all, 'stats', positionId] as const,\n  },\n  \n  // Statistics keys\n  statistics: {\n    all: ['statistics'] as const,\n    overview: () => [...queryKeys.statistics.all, 'overview'] as const,\n    positions: () => [...queryKeys.statistics.all, 'positions'] as const,\n    interviews: () => [...queryKeys.statistics.all, 'interviews'] as const,\n    companies: () => [...queryKeys.statistics.all, 'companies'] as const,\n    dashboard: () => [...queryKeys.statistics.all, 'dashboard'] as const,\n    monthly: (year: number) => [...queryKeys.statistics.all, 'monthly', year] as const,\n    custom: (filters: any) => [...queryKeys.statistics.all, 'custom', filters] as const,\n  },\n} as const;\n\n// Cache invalidation utilities\nexport const invalidateQueries = {\n  // Invalidate all position-related queries\n  positions: () => {\n    queryClient.invalidateQueries(queryKeys.positions.all);\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  \n  // Invalidate specific position\n  position: (id: string) => {\n    queryClient.invalidateQueries(queryKeys.positions.detail(id));\n    queryClient.invalidateQueries(queryKeys.positions.lists());\n    queryClient.invalidateQueries(queryKeys.interviews.list(id));\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  \n  // Invalidate all interview-related queries\n  interviews: () => {\n    queryClient.invalidateQueries(queryKeys.interviews.all);\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  \n  // Invalidate specific interview\n  interview: (id: string, positionId?: string) => {\n    queryClient.invalidateQueries(queryKeys.interviews.detail(id));\n    if (positionId) {\n      queryClient.invalidateQueries(queryKeys.interviews.list(positionId));\n      queryClient.invalidateQueries(queryKeys.positions.detail(positionId));\n    }\n    queryClient.invalidateQueries(queryKeys.interviews.upcoming());\n    queryClient.invalidateQueries(queryKeys.interviews.today());\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  \n  // Invalidate all statistics\n  statistics: () => {\n    queryClient.invalidateQueries(queryKeys.statistics.all);\n  },\n  \n  // Invalidate all data (nuclear option)\n  all: () => {\n    queryClient.invalidateQueries();\n  },\n};\n\n// Prefetch utilities\nexport const prefetchQueries = {\n  // Prefetch position details when hovering over position card\n  positionDetails: (id: string) => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.positions.detail(id),\n      queryFn: () => import('../services').then(({ positionService }) => positionService.getPosition(id)),\n      staleTime: 2 * 60 * 1000, // 2 minutes\n    });\n  },\n  \n  // Prefetch interviews when viewing position details\n  positionInterviews: (positionId: string) => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.interviews.list(positionId),\n      queryFn: () => import('../services').then(({ interviewService }) => interviewService.getInterviews(positionId)),\n      staleTime: 2 * 60 * 1000,\n    });\n  },\n  \n  // Prefetch dashboard data\n  dashboard: () => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.statistics.dashboard(),\n      queryFn: () => import('../services').then(({ statisticsService }) => statisticsService.getDashboardSummary()),\n      staleTime: 5 * 60 * 1000,\n    });\n  },\n};\n\n// Optimistic update utilities\nexport const optimisticUpdates = {\n  // Optimistically update position in cache\n  updatePosition: (id: string, updates: any) => {\n    queryClient.setQueryData(queryKeys.positions.detail(id), (old: any) => {\n      if (!old) {\n        return old;\n      }\n      return {\n        ...old,\n        ...updates,\n        updated_at: new Date().toISOString(),\n      };\n    });\n    \n    // Also update in lists\n    queryClient.setQueriesData(\n      { queryKey: queryKeys.positions.lists() },\n      (old: any) => {\n        if (!old?.positions) {\n          return old;\n        }\n        return {\n          ...old,\n          positions: old.positions.map((position: any) =>\n            position.id === id ? { ...position, ...updates, updated_at: new Date().toISOString() } : position\n          ),\n        };\n      }\n    );\n  },\n  \n  // Optimistically update interview in cache\n  updateInterview: (id: string, positionId: string, updates: any) => {\n    queryClient.setQueryData(queryKeys.interviews.detail(id), (old: any) => {\n      if (!old) {\n        return old;\n      }\n      return {\n        ...old,\n        ...updates,\n        updated_at: new Date().toISOString(),\n      };\n    });\n    \n    // Update in position's interview list\n    queryClient.setQueryData(queryKeys.interviews.list(positionId), (old: any) => {\n      if (!old) {\n        return old;\n      }\n      return old.map((interview: any) =>\n        interview.id === id ? { ...interview, ...updates, updated_at: new Date().toISOString() } : interview\n      );\n    });\n  },\n  \n  // Optimistically add new position\n  addPosition: (newPosition: any) => {\n    queryClient.setQueriesData(\n      { queryKey: queryKeys.positions.lists() },\n      (old: any) => {\n        if (!old?.positions) {\n          return old;\n        }\n        return {\n          ...old,\n          positions: [newPosition, ...old.positions],\n          total: old.total + 1,\n        };\n      }\n    );\n  },\n  \n  // Optimistically remove position\n  removePosition: (id: string) => {\n    queryClient.setQueriesData(\n      { queryKey: queryKeys.positions.lists() },\n      (old: any) => {\n        if (!old?.positions) {\n          return old;\n        }\n        return {\n          ...old,\n          positions: old.positions.filter((position: any) => position.id !== id),\n          total: Math.max(0, old.total - 1),\n        };\n      }\n    );\n  },\n};\n\n// Background sync utilities\nexport const backgroundSync = {\n  // Start background sync for active queries\n  start: () => {\n    const interval = setInterval(() => {\n      // Refetch stale queries that are currently being observed\n      queryClient.refetchQueries({\n        type: 'active',\n        stale: true,\n      });\n    }, 5 * 60 * 1000); // Every 5 minutes\n    \n    return () => clearInterval(interval);\n  },\n  \n  // Sync specific data types\n  syncPositions: () => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.positions.all,\n      type: 'active',\n    });\n  },\n  \n  syncInterviews: () => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.interviews.all,\n      type: 'active',\n    });\n  },\n  \n  syncStatistics: () => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.statistics.all,\n      type: 'active',\n    });\n  },\n};\n\nexport default queryClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}