{"ast":null,"code":"/**\n * Service Worker Registration\n * Handles service worker lifecycle and updates\n */\n\nimport { Workbox } from 'workbox-window';\nclass ServiceWorkerManager {\n  constructor() {\n    this.workbox = null;\n    this.isSupported = false;\n    this.isSupported = 'serviceWorker' in navigator;\n  }\n  async register() {\n    if (!this.isSupported) {\n      console.log('Service Worker not supported');\n      return;\n    }\n    if (process.env.NODE_ENV === 'production') {\n      try {\n        this.workbox = new Workbox('/sw.js');\n\n        // Handle service worker updates\n        this.workbox.addEventListener('waiting', () => {\n          this.showUpdateNotification();\n        });\n\n        // Handle service worker activation\n        this.workbox.addEventListener('controlling', () => {\n          window.location.reload();\n        });\n\n        // Register the service worker\n        await this.workbox.register();\n        console.log('Service Worker registered successfully');\n      } catch (error) {\n        console.error('Service Worker registration failed:', error);\n      }\n    }\n  }\n  showUpdateNotification() {\n    if (confirm('A new version of the app is available. Would you like to update?')) {\n      var _this$workbox;\n      (_this$workbox = this.workbox) === null || _this$workbox === void 0 ? void 0 : _this$workbox.messageSkipWaiting();\n    }\n  }\n  async unregister() {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registrations = await navigator.serviceWorker.getRegistrations();\n        await Promise.all(registrations.map(registration => registration.unregister()));\n        console.log('Service Workers unregistered');\n      } catch (error) {\n        console.error('Service Worker unregistration failed:', error);\n      }\n    }\n  }\n  async checkForUpdates() {\n    if (this.workbox) {\n      await this.workbox.update();\n    }\n  }\n}\n\n// Create singleton instance\nconst serviceWorkerManager = new ServiceWorkerManager();\nexport default serviceWorkerManager;","map":{"version":3,"names":["Workbox","ServiceWorkerManager","constructor","workbox","isSupported","navigator","register","console","log","process","env","NODE_ENV","addEventListener","showUpdateNotification","window","location","reload","error","confirm","_this$workbox","messageSkipWaiting","unregister","registrations","serviceWorker","getRegistrations","Promise","all","map","registration","checkForUpdates","update","serviceWorkerManager"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/utils/serviceWorker.ts"],"sourcesContent":["/**\n * Service Worker Registration\n * Handles service worker lifecycle and updates\n */\n\nimport { Workbox } from 'workbox-window';\n\nclass ServiceWorkerManager {\n  private workbox: Workbox | null = null;\n  private isSupported: boolean = false;\n\n  constructor() {\n    this.isSupported = 'serviceWorker' in navigator;\n  }\n\n  public async register(): Promise<void> {\n    if (!this.isSupported) {\n      console.log('Service Worker not supported');\n      return;\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      try {\n        this.workbox = new Workbox('/sw.js');\n        \n        // Handle service worker updates\n        this.workbox.addEventListener('waiting', () => {\n          this.showUpdateNotification();\n        });\n\n        // Handle service worker activation\n        this.workbox.addEventListener('controlling', () => {\n          window.location.reload();\n        });\n\n        // Register the service worker\n        await this.workbox.register();\n        console.log('Service Worker registered successfully');\n      } catch (error) {\n        console.error('Service Worker registration failed:', error);\n      }\n    }\n  }\n\n  private showUpdateNotification(): void {\n    if (confirm('A new version of the app is available. Would you like to update?')) {\n      this.workbox?.messageSkipWaiting();\n    }\n  }\n\n  public async unregister(): Promise<void> {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registrations = await navigator.serviceWorker.getRegistrations();\n        await Promise.all(registrations.map(registration => registration.unregister()));\n        console.log('Service Workers unregistered');\n      } catch (error) {\n        console.error('Service Worker unregistration failed:', error);\n      }\n    }\n  }\n\n  public async checkForUpdates(): Promise<void> {\n    if (this.workbox) {\n      await this.workbox.update();\n    }\n  }\n}\n\n// Create singleton instance\nconst serviceWorkerManager = new ServiceWorkerManager();\n\nexport default serviceWorkerManager;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,QAAQ,gBAAgB;AAExC,MAAMC,oBAAoB,CAAC;EAIzBC,WAAWA,CAAA,EAAG;IAAA,KAHNC,OAAO,GAAmB,IAAI;IAAA,KAC9BC,WAAW,GAAY,KAAK;IAGlC,IAAI,CAACA,WAAW,GAAG,eAAe,IAAIC,SAAS;EACjD;EAEA,MAAaC,QAAQA,CAAA,EAAkB;IACrC,IAAI,CAAC,IAAI,CAACF,WAAW,EAAE;MACrBG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3C;IACF;IAEA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAI;QACF,IAAI,CAACR,OAAO,GAAG,IAAIH,OAAO,CAAC,QAAQ,CAAC;;QAEpC;QACA,IAAI,CAACG,OAAO,CAACS,gBAAgB,CAAC,SAAS,EAAE,MAAM;UAC7C,IAAI,CAACC,sBAAsB,CAAC,CAAC;QAC/B,CAAC,CAAC;;QAEF;QACA,IAAI,CAACV,OAAO,CAACS,gBAAgB,CAAC,aAAa,EAAE,MAAM;UACjDE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;QAC1B,CAAC,CAAC;;QAEF;QACA,MAAM,IAAI,CAACb,OAAO,CAACG,QAAQ,CAAC,CAAC;QAC7BC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACvD,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D;IACF;EACF;EAEQJ,sBAAsBA,CAAA,EAAS;IACrC,IAAIK,OAAO,CAAC,kEAAkE,CAAC,EAAE;MAAA,IAAAC,aAAA;MAC/E,CAAAA,aAAA,OAAI,CAAChB,OAAO,cAAAgB,aAAA,uBAAZA,aAAA,CAAcC,kBAAkB,CAAC,CAAC;IACpC;EACF;EAEA,MAAaC,UAAUA,CAAA,EAAkB;IACvC,IAAI,eAAe,IAAIhB,SAAS,EAAE;MAChC,IAAI;QACF,MAAMiB,aAAa,GAAG,MAAMjB,SAAS,CAACkB,aAAa,CAACC,gBAAgB,CAAC,CAAC;QACtE,MAAMC,OAAO,CAACC,GAAG,CAACJ,aAAa,CAACK,GAAG,CAACC,YAAY,IAAIA,YAAY,CAACP,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/Ed,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC7C,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF;EACF;EAEA,MAAaY,eAAeA,CAAA,EAAkB;IAC5C,IAAI,IAAI,CAAC1B,OAAO,EAAE;MAChB,MAAM,IAAI,CAACA,OAAO,CAAC2B,MAAM,CAAC,CAAC;IAC7B;EACF;AACF;;AAEA;AACA,MAAMC,oBAAoB,GAAG,IAAI9B,oBAAoB,CAAC,CAAC;AAEvD,eAAe8B,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}