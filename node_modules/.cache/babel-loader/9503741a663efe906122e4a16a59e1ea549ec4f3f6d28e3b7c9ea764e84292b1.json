{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { queryKeys } from '../lib/queryClient';\n\n// Cache invalidation hook with smart invalidation strategies\nexport const useCacheInvalidation = () => {\n  _s();\n  const queryClient = useQueryClient();\n\n  // Invalidate all position-related queries\n  const invalidatePositions = useCallback(() => {\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.positions.all\n    });\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.statistics.all\n    });\n  }, [queryClient]);\n\n  // Invalidate specific position and related data\n  const invalidatePosition = useCallback(id => {\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.positions.detail(id)\n    });\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.positions.lists()\n    });\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.interviews.list(id)\n    });\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.statistics.all\n    });\n  }, [queryClient]);\n\n  // Invalidate all interview-related queries\n  const invalidateInterviews = useCallback(() => {\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.interviews.all\n    });\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.statistics.all\n    });\n  }, [queryClient]);\n\n  // Invalidate specific interview and related data\n  const invalidateInterview = useCallback((id, positionId) => {\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.interviews.detail(id)\n    });\n    if (positionId) {\n      queryClient.invalidateQueries({\n        queryKey: queryKeys.interviews.list(positionId)\n      });\n      queryClient.invalidateQueries({\n        queryKey: queryKeys.positions.detail(positionId)\n      });\n    }\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.interviews.upcoming()\n    });\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.interviews.today()\n    });\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.statistics.all\n    });\n  }, [queryClient]);\n\n  // Invalidate all statistics\n  const invalidateStatistics = useCallback(() => {\n    queryClient.invalidateQueries({\n      queryKey: queryKeys.statistics.all\n    });\n  }, [queryClient]);\n\n  // Smart invalidation based on mutation type\n  const invalidateByMutation = useCallback((type, resource, id, positionId) => {\n    switch (resource) {\n      case 'position':\n        if (type === 'create') {\n          // New position created - invalidate lists and statistics\n          queryClient.invalidateQueries({\n            queryKey: queryKeys.positions.lists()\n          });\n          queryClient.invalidateQueries({\n            queryKey: queryKeys.statistics.all\n          });\n        } else if (type === 'update' && id) {\n          // Position updated - invalidate specific position and lists\n          invalidatePosition(id);\n        } else if (type === 'delete') {\n          // Position deleted - invalidate lists and statistics\n          queryClient.invalidateQueries({\n            queryKey: queryKeys.positions.lists()\n          });\n          queryClient.invalidateQueries({\n            queryKey: queryKeys.statistics.all\n          });\n          // Remove specific position from cache\n          if (id) {\n            queryClient.removeQueries({\n              queryKey: queryKeys.positions.detail(id)\n            });\n          }\n        }\n        break;\n      case 'interview':\n        if (type === 'create') {\n          // New interview created - invalidate interview lists and position details\n          if (positionId) {\n            queryClient.invalidateQueries({\n              queryKey: queryKeys.interviews.list(positionId)\n            });\n            queryClient.invalidateQueries({\n              queryKey: queryKeys.positions.detail(positionId)\n            });\n          }\n          queryClient.invalidateQueries({\n            queryKey: queryKeys.interviews.upcoming()\n          });\n          queryClient.invalidateQueries({\n            queryKey: queryKeys.interviews.today()\n          });\n          queryClient.invalidateQueries({\n            queryKey: queryKeys.statistics.all\n          });\n        } else if (type === 'update' && id) {\n          // Interview updated - invalidate specific interview and related data\n          invalidateInterview(id, positionId);\n        } else if (type === 'delete') {\n          // Interview deleted - invalidate lists and statistics\n          if (positionId) {\n            queryClient.invalidateQueries({\n              queryKey: queryKeys.interviews.list(positionId)\n            });\n            queryClient.invalidateQueries({\n              queryKey: queryKeys.positions.detail(positionId)\n            });\n          }\n          queryClient.invalidateQueries({\n            queryKey: queryKeys.interviews.upcoming()\n          });\n          queryClient.invalidateQueries({\n            queryKey: queryKeys.interviews.today()\n          });\n          queryClient.invalidateQueries({\n            queryKey: queryKeys.statistics.all\n          });\n          // Remove specific interview from cache\n          if (id) {\n            queryClient.removeQueries({\n              queryKey: queryKeys.interviews.detail(id)\n            });\n          }\n        }\n        break;\n    }\n  }, [queryClient, invalidatePosition, invalidateInterview]);\n\n  // Selective invalidation based on data changes\n  const invalidateSelective = useCallback(changes => {\n    if (changes.positions) {\n      queryClient.invalidateQueries({\n        queryKey: queryKeys.positions.all\n      });\n    }\n    if (changes.interviews) {\n      queryClient.invalidateQueries({\n        queryKey: queryKeys.interviews.all\n      });\n    }\n    if (changes.statistics) {\n      queryClient.invalidateQueries({\n        queryKey: queryKeys.statistics.all\n      });\n    }\n    if (changes.specificPosition) {\n      invalidatePosition(changes.specificPosition);\n    }\n    if (changes.specificInterview) {\n      invalidateInterview(changes.specificInterview);\n    }\n  }, [queryClient, invalidatePosition, invalidateInterview]);\n\n  // Time-based invalidation for stale data\n  const invalidateStaleData = useCallback((maxAge = 10 * 60 * 1000) => {\n    // Invalidate queries older than maxAge\n    queryClient.invalidateQueries({\n      predicate: query => {\n        const lastUpdated = query.state.dataUpdatedAt;\n        return lastUpdated > 0 && Date.now() - lastUpdated > maxAge;\n      }\n    });\n  }, [queryClient]);\n\n  // Force refresh all active queries\n  const forceRefreshActive = useCallback(() => {\n    queryClient.refetchQueries({\n      type: 'active'\n    });\n  }, [queryClient]);\n\n  // Clear all cache (nuclear option)\n  const clearAllCache = useCallback(() => {\n    queryClient.clear();\n  }, [queryClient]);\n\n  // Remove specific queries from cache\n  const removeFromCache = useCallback((resource, id) => {\n    if (resource === 'position') {\n      queryClient.removeQueries({\n        queryKey: queryKeys.positions.detail(id)\n      });\n    } else if (resource === 'interview') {\n      queryClient.removeQueries({\n        queryKey: queryKeys.interviews.detail(id)\n      });\n    }\n  }, [queryClient]);\n\n  // Batch invalidation for multiple operations\n  const batchInvalidate = useCallback(operations => {\n    operations.forEach(({\n      type,\n      resource,\n      id,\n      positionId\n    }) => {\n      if (type === 'invalidate') {\n        switch (resource) {\n          case 'position':\n            if (id) {\n              invalidatePosition(id);\n            } else {\n              invalidatePositions();\n            }\n            break;\n          case 'interview':\n            if (id) {\n              invalidateInterview(id, positionId);\n            } else {\n              invalidateInterviews();\n            }\n            break;\n          case 'statistics':\n            invalidateStatistics();\n            break;\n        }\n      } else if (type === 'remove' && id) {\n        removeFromCache(resource, id);\n      }\n    });\n  }, [queryClient, invalidatePosition, invalidatePositions, invalidateInterview, invalidateInterviews, invalidateStatistics, removeFromCache]);\n  return {\n    invalidatePositions,\n    invalidatePosition,\n    invalidateInterviews,\n    invalidateInterview,\n    invalidateStatistics,\n    invalidateByMutation,\n    invalidateSelective,\n    invalidateStaleData,\n    forceRefreshActive,\n    clearAllCache,\n    removeFromCache,\n    batchInvalidate\n  };\n};\n\n// Background sync hook for keeping data fresh\n_s(useCacheInvalidation, \"RMwY++q5AKSYKhOMMFhhYQgo7I0=\", false, function () {\n  return [useQueryClient];\n});\nexport const useBackgroundSync = () => {\n  _s2();\n  const queryClient = useQueryClient();\n\n  // Start background sync for active queries\n  const startBackgroundSync = useCallback((interval = 5 * 60 * 1000) => {\n    const syncInterval = setInterval(() => {\n      // Refetch stale queries that are currently being observed\n      queryClient.refetchQueries({\n        type: 'active',\n        stale: true\n      });\n    }, interval);\n    return () => clearInterval(syncInterval);\n  }, [queryClient]);\n\n  // Sync specific data types\n  const syncPositions = useCallback(() => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.positions.all,\n      type: 'active'\n    });\n  }, [queryClient]);\n  const syncInterviews = useCallback(() => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.interviews.all,\n      type: 'active'\n    });\n  }, [queryClient]);\n  const syncStatistics = useCallback(() => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.statistics.all,\n      type: 'active'\n    });\n  }, [queryClient]);\n\n  // Sync critical data (today's interviews, recent positions)\n  const syncCriticalData = useCallback(() => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.interviews.today()\n    });\n    queryClient.refetchQueries({\n      queryKey: queryKeys.interviews.upcoming()\n    });\n    queryClient.refetchQueries({\n      queryKey: queryKeys.positions.recent()\n    });\n  }, [queryClient]);\n\n  // Smart sync based on user activity\n  const smartSync = useCallback(lastActivity => {\n    const timeSinceActivity = Date.now() - lastActivity.getTime();\n\n    // If user was inactive for more than 5 minutes, sync critical data\n    if (timeSinceActivity > 5 * 60 * 1000) {\n      syncCriticalData();\n    }\n\n    // If user was inactive for more than 15 minutes, sync all active queries\n    if (timeSinceActivity > 15 * 60 * 1000) {\n      queryClient.refetchQueries({\n        type: 'active',\n        stale: true\n      });\n    }\n  }, [queryClient, syncCriticalData]);\n\n  // Sync on network reconnection\n  const syncOnReconnect = useCallback(() => {\n    const handleOnline = () => {\n      // Refetch all active queries when coming back online\n      queryClient.refetchQueries({\n        type: 'active'\n      });\n    };\n    window.addEventListener('online', handleOnline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n    };\n  }, [queryClient]);\n\n  // Sync on visibility change (tab becomes active)\n  const syncOnVisibilityChange = useCallback(() => {\n    const handleVisibilityChange = () => {\n      if (!document.hidden) {\n        // Refetch stale data when tab becomes visible\n        queryClient.refetchQueries({\n          type: 'active',\n          stale: true\n        });\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [queryClient]);\n  return {\n    startBackgroundSync,\n    syncPositions,\n    syncInterviews,\n    syncStatistics,\n    syncCriticalData,\n    smartSync,\n    syncOnReconnect,\n    syncOnVisibilityChange\n  };\n};\n_s2(useBackgroundSync, \"6lD0j8iSsCFeUvjr632FIebZtGY=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"names":["useCallback","useQueryClient","queryKeys","useCacheInvalidation","_s","queryClient","invalidatePositions","invalidateQueries","queryKey","positions","all","statistics","invalidatePosition","id","detail","lists","interviews","list","invalidateInterviews","invalidateInterview","positionId","upcoming","today","invalidateStatistics","invalidateByMutation","type","resource","removeQueries","invalidateSelective","changes","specificPosition","specificInterview","invalidateStaleData","maxAge","predicate","query","lastUpdated","state","dataUpdatedAt","Date","now","forceRefreshActive","refetchQueries","clearAllCache","clear","removeFromCache","batchInvalidate","operations","forEach","useBackgroundSync","_s2","startBackgroundSync","interval","syncInterval","setInterval","stale","clearInterval","syncPositions","syncInterviews","syncStatistics","syncCriticalData","recent","smartSync","lastActivity","timeSinceActivity","getTime","syncOnReconnect","handleOnline","window","addEventListener","removeEventListener","syncOnVisibilityChange","handleVisibilityChange","document","hidden"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/hooks/useCacheInvalidation.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { queryKeys } from '../lib/queryClient';\n\n// Cache invalidation hook with smart invalidation strategies\nexport const useCacheInvalidation = () => {\n  const queryClient = useQueryClient();\n\n  // Invalidate all position-related queries\n  const invalidatePositions = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: queryKeys.positions.all });\n    queryClient.invalidateQueries({ queryKey: queryKeys.statistics.all });\n  }, [queryClient]);\n\n  // Invalidate specific position and related data\n  const invalidatePosition = useCallback((id: string) => {\n    queryClient.invalidateQueries({ queryKey: queryKeys.positions.detail(id) });\n    queryClient.invalidateQueries({ queryKey: queryKeys.positions.lists() });\n    queryClient.invalidateQueries({ queryKey: queryKeys.interviews.list(id) });\n    queryClient.invalidateQueries({ queryKey: queryKeys.statistics.all });\n  }, [queryClient]);\n\n  // Invalidate all interview-related queries\n  const invalidateInterviews = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: queryKeys.interviews.all });\n    queryClient.invalidateQueries({ queryKey: queryKeys.statistics.all });\n  }, [queryClient]);\n\n  // Invalidate specific interview and related data\n  const invalidateInterview = useCallback((id: string, positionId?: string) => {\n    queryClient.invalidateQueries({ queryKey: queryKeys.interviews.detail(id) });\n    \n    if (positionId) {\n      queryClient.invalidateQueries({ queryKey: queryKeys.interviews.list(positionId) });\n      queryClient.invalidateQueries({ queryKey: queryKeys.positions.detail(positionId) });\n    }\n    \n    queryClient.invalidateQueries({ queryKey: queryKeys.interviews.upcoming() });\n    queryClient.invalidateQueries({ queryKey: queryKeys.interviews.today() });\n    queryClient.invalidateQueries({ queryKey: queryKeys.statistics.all });\n  }, [queryClient]);\n\n  // Invalidate all statistics\n  const invalidateStatistics = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: queryKeys.statistics.all });\n  }, [queryClient]);\n\n  // Smart invalidation based on mutation type\n  const invalidateByMutation = useCallback((\n    type: 'create' | 'update' | 'delete',\n    resource: 'position' | 'interview',\n    id?: string,\n    positionId?: string\n  ) => {\n    switch (resource) {\n      case 'position':\n        if (type === 'create') {\n          // New position created - invalidate lists and statistics\n          queryClient.invalidateQueries({ queryKey: queryKeys.positions.lists() });\n          queryClient.invalidateQueries({ queryKey: queryKeys.statistics.all });\n        } else if (type === 'update' && id) {\n          // Position updated - invalidate specific position and lists\n          invalidatePosition(id);\n        } else if (type === 'delete') {\n          // Position deleted - invalidate lists and statistics\n          queryClient.invalidateQueries({ queryKey: queryKeys.positions.lists() });\n          queryClient.invalidateQueries({ queryKey: queryKeys.statistics.all });\n          // Remove specific position from cache\n          if (id) {\n            queryClient.removeQueries({ queryKey: queryKeys.positions.detail(id) });\n          }\n        }\n        break;\n\n      case 'interview':\n        if (type === 'create') {\n          // New interview created - invalidate interview lists and position details\n          if (positionId) {\n            queryClient.invalidateQueries({ queryKey: queryKeys.interviews.list(positionId) });\n            queryClient.invalidateQueries({ queryKey: queryKeys.positions.detail(positionId) });\n          }\n          queryClient.invalidateQueries({ queryKey: queryKeys.interviews.upcoming() });\n          queryClient.invalidateQueries({ queryKey: queryKeys.interviews.today() });\n          queryClient.invalidateQueries({ queryKey: queryKeys.statistics.all });\n        } else if (type === 'update' && id) {\n          // Interview updated - invalidate specific interview and related data\n          invalidateInterview(id, positionId);\n        } else if (type === 'delete') {\n          // Interview deleted - invalidate lists and statistics\n          if (positionId) {\n            queryClient.invalidateQueries({ queryKey: queryKeys.interviews.list(positionId) });\n            queryClient.invalidateQueries({ queryKey: queryKeys.positions.detail(positionId) });\n          }\n          queryClient.invalidateQueries({ queryKey: queryKeys.interviews.upcoming() });\n          queryClient.invalidateQueries({ queryKey: queryKeys.interviews.today() });\n          queryClient.invalidateQueries({ queryKey: queryKeys.statistics.all });\n          // Remove specific interview from cache\n          if (id) {\n            queryClient.removeQueries({ queryKey: queryKeys.interviews.detail(id) });\n          }\n        }\n        break;\n    }\n  }, [queryClient, invalidatePosition, invalidateInterview]);\n\n  // Selective invalidation based on data changes\n  const invalidateSelective = useCallback((changes: {\n    positions?: boolean;\n    interviews?: boolean;\n    statistics?: boolean;\n    specificPosition?: string;\n    specificInterview?: string;\n  }) => {\n    if (changes.positions) {\n      queryClient.invalidateQueries({ queryKey: queryKeys.positions.all });\n    }\n    \n    if (changes.interviews) {\n      queryClient.invalidateQueries({ queryKey: queryKeys.interviews.all });\n    }\n    \n    if (changes.statistics) {\n      queryClient.invalidateQueries({ queryKey: queryKeys.statistics.all });\n    }\n    \n    if (changes.specificPosition) {\n      invalidatePosition(changes.specificPosition);\n    }\n    \n    if (changes.specificInterview) {\n      invalidateInterview(changes.specificInterview);\n    }\n  }, [queryClient, invalidatePosition, invalidateInterview]);\n\n  // Time-based invalidation for stale data\n  const invalidateStaleData = useCallback((maxAge: number = 10 * 60 * 1000) => {\n    // Invalidate queries older than maxAge\n    queryClient.invalidateQueries({\n      predicate: (query) => {\n        const lastUpdated = query.state.dataUpdatedAt;\n        return lastUpdated > 0 && Date.now() - lastUpdated > maxAge;\n      },\n    });\n  }, [queryClient]);\n\n  // Force refresh all active queries\n  const forceRefreshActive = useCallback(() => {\n    queryClient.refetchQueries({\n      type: 'active',\n    });\n  }, [queryClient]);\n\n  // Clear all cache (nuclear option)\n  const clearAllCache = useCallback(() => {\n    queryClient.clear();\n  }, [queryClient]);\n\n  // Remove specific queries from cache\n  const removeFromCache = useCallback((\n    resource: 'position' | 'interview',\n    id: string\n  ) => {\n    if (resource === 'position') {\n      queryClient.removeQueries({ queryKey: queryKeys.positions.detail(id) });\n    } else if (resource === 'interview') {\n      queryClient.removeQueries({ queryKey: queryKeys.interviews.detail(id) });\n    }\n  }, [queryClient]);\n\n  // Batch invalidation for multiple operations\n  const batchInvalidate = useCallback((operations: Array<{\n    type: 'invalidate' | 'remove';\n    resource: 'position' | 'interview' | 'statistics';\n    id?: string;\n    positionId?: string;\n  }>) => {\n    operations.forEach(({ type, resource, id, positionId }) => {\n      if (type === 'invalidate') {\n        switch (resource) {\n          case 'position':\n            if (id) {\n              invalidatePosition(id);\n            } else {\n              invalidatePositions();\n            }\n            break;\n          case 'interview':\n            if (id) {\n              invalidateInterview(id, positionId);\n            } else {\n              invalidateInterviews();\n            }\n            break;\n          case 'statistics':\n            invalidateStatistics();\n            break;\n        }\n      } else if (type === 'remove' && id) {\n        removeFromCache(resource as 'position' | 'interview', id);\n      }\n    });\n  }, [\n    queryClient,\n    invalidatePosition,\n    invalidatePositions,\n    invalidateInterview,\n    invalidateInterviews,\n    invalidateStatistics,\n    removeFromCache,\n  ]);\n\n  return {\n    invalidatePositions,\n    invalidatePosition,\n    invalidateInterviews,\n    invalidateInterview,\n    invalidateStatistics,\n    invalidateByMutation,\n    invalidateSelective,\n    invalidateStaleData,\n    forceRefreshActive,\n    clearAllCache,\n    removeFromCache,\n    batchInvalidate,\n  };\n};\n\n// Background sync hook for keeping data fresh\nexport const useBackgroundSync = () => {\n  const queryClient = useQueryClient();\n\n  // Start background sync for active queries\n  const startBackgroundSync = useCallback((interval: number = 5 * 60 * 1000) => {\n    const syncInterval = setInterval(() => {\n      // Refetch stale queries that are currently being observed\n      queryClient.refetchQueries({\n        type: 'active',\n        stale: true,\n      });\n    }, interval);\n\n    return () => clearInterval(syncInterval);\n  }, [queryClient]);\n\n  // Sync specific data types\n  const syncPositions = useCallback(() => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.positions.all,\n      type: 'active',\n    });\n  }, [queryClient]);\n\n  const syncInterviews = useCallback(() => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.interviews.all,\n      type: 'active',\n    });\n  }, [queryClient]);\n\n  const syncStatistics = useCallback(() => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.statistics.all,\n      type: 'active',\n    });\n  }, [queryClient]);\n\n  // Sync critical data (today's interviews, recent positions)\n  const syncCriticalData = useCallback(() => {\n    queryClient.refetchQueries({\n      queryKey: queryKeys.interviews.today(),\n    });\n    \n    queryClient.refetchQueries({\n      queryKey: queryKeys.interviews.upcoming(),\n    });\n    \n    queryClient.refetchQueries({\n      queryKey: queryKeys.positions.recent(),\n    });\n  }, [queryClient]);\n\n  // Smart sync based on user activity\n  const smartSync = useCallback((lastActivity: Date) => {\n    const timeSinceActivity = Date.now() - lastActivity.getTime();\n    \n    // If user was inactive for more than 5 minutes, sync critical data\n    if (timeSinceActivity > 5 * 60 * 1000) {\n      syncCriticalData();\n    }\n    \n    // If user was inactive for more than 15 minutes, sync all active queries\n    if (timeSinceActivity > 15 * 60 * 1000) {\n      queryClient.refetchQueries({\n        type: 'active',\n        stale: true,\n      });\n    }\n  }, [queryClient, syncCriticalData]);\n\n  // Sync on network reconnection\n  const syncOnReconnect = useCallback(() => {\n    const handleOnline = () => {\n      // Refetch all active queries when coming back online\n      queryClient.refetchQueries({\n        type: 'active',\n      });\n    };\n\n    window.addEventListener('online', handleOnline);\n    \n    return () => {\n      window.removeEventListener('online', handleOnline);\n    };\n  }, [queryClient]);\n\n  // Sync on visibility change (tab becomes active)\n  const syncOnVisibilityChange = useCallback(() => {\n    const handleVisibilityChange = () => {\n      if (!document.hidden) {\n        // Refetch stale data when tab becomes visible\n        queryClient.refetchQueries({\n          type: 'active',\n          stale: true,\n        });\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [queryClient]);\n\n  return {\n    startBackgroundSync,\n    syncPositions,\n    syncInterviews,\n    syncStatistics,\n    syncCriticalData,\n    smartSync,\n    syncOnReconnect,\n    syncOnVisibilityChange,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}