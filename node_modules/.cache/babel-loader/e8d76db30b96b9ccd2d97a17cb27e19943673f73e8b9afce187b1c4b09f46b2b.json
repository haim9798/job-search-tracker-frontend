{"ast":null,"code":"import _objectWithoutProperties from\"/home/haim/github/job-search-tracker-api/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"confirmPassword\"];import{apiRequest}from'./httpClient';import{tokenManager}from'../utils/tokenManager';class AuthService{/**\n   * Login user with email and password\n   */async login(credentials){const formData=new FormData();formData.append('username',credentials.email);formData.append('password',credentials.password);const response=await apiRequest.post('/auth/login',formData,{headers:{'Content-Type':'application/x-www-form-urlencoded'}});// Store tokens and user data\ntokenManager.setTokens(response);return response;}/**\n   * Register new user\n   */async register(userData){const{confirmPassword}=userData,registrationData=_objectWithoutProperties(userData,_excluded);const response=await apiRequest.post('/auth/register',registrationData);return response;}/**\n   * Logout current user\n   */async logout(){try{// Call logout endpoint if it exists\nawait apiRequest.post('/auth/logout');}catch(error){// Continue with logout even if API call fails\nconsole.warn('Logout API call failed:',error);}finally{// Always clear local tokens\ntokenManager.clearTokens();}}/**\n   * Get current authenticated user\n   */async getCurrentUser(){const response=await apiRequest.get('/auth/me');// Update stored user data\ntokenManager.setUser(response);return response;}/**\n   * Refresh access token\n   */async refreshToken(){const refreshToken=tokenManager.getRefreshToken();if(!refreshToken){throw new Error('No refresh token available');}const response=await apiRequest.post('/auth/refresh',{refresh_token:refreshToken});// Update stored access token\ntokenManager.updateAccessToken(response.access_token);return response.access_token;}/**\n   * Check if user is currently authenticated\n   */isAuthenticated(){return tokenManager.isAuthenticated();}/**\n   * Get stored user data\n   */getStoredUser(){return tokenManager.getUser();}/**\n   * Verify token validity\n   */async verifyToken(){try{await this.getCurrentUser();return true;}catch(error){return false;}}/**\n   * Request password reset\n   */async requestPasswordReset(email){await apiRequest.post('/auth/password-reset-request',{email});}/**\n   * Reset password with token\n   */async resetPassword(token,newPassword){await apiRequest.post('/auth/password-reset',{token,new_password:newPassword});}/**\n   * Change password for authenticated user\n   */async changePassword(currentPassword,newPassword){await apiRequest.post('/auth/change-password',{current_password:currentPassword,new_password:newPassword});}}// Export singleton instance\nexport const authService=new AuthService();export default authService;","map":{"version":3,"names":["apiRequest","tokenManager","AuthService","login","credentials","formData","FormData","append","email","password","response","post","headers","setTokens","register","userData","confirmPassword","registrationData","_objectWithoutProperties","_excluded","logout","error","console","warn","clearTokens","getCurrentUser","get","setUser","refreshToken","getRefreshToken","Error","refresh_token","updateAccessToken","access_token","isAuthenticated","getStoredUser","getUser","verifyToken","requestPasswordReset","resetPassword","token","newPassword","new_password","changePassword","currentPassword","current_password","authService"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/services/authService.ts"],"sourcesContent":["import { apiRequest } from './httpClient';\nimport { tokenManager } from '../utils/tokenManager';\nimport {\n  User,\n  AuthResponse,\n  LoginCredentials,\n  RegisterData,\n  TokenRefreshResponse,\n} from '../types';\n\nclass AuthService {\n  /**\n   * Login user with email and password\n   */\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const formData = new FormData();\n    formData.append('username', credentials.email);\n    formData.append('password', credentials.password);\n\n    const response = await apiRequest.post<AuthResponse>('/auth/login', formData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    });\n\n    // Store tokens and user data\n    tokenManager.setTokens(response);\n\n    return response;\n  }\n\n  /**\n   * Register new user\n   */\n  async register(userData: RegisterData): Promise<User> {\n    const { confirmPassword, ...registrationData } = userData;\n    \n    const response = await apiRequest.post<User>('/auth/register', registrationData);\n    return response;\n  }\n\n  /**\n   * Logout current user\n   */\n  async logout(): Promise<void> {\n    try {\n      // Call logout endpoint if it exists\n      await apiRequest.post('/auth/logout');\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.warn('Logout API call failed:', error);\n    } finally {\n      // Always clear local tokens\n      tokenManager.clearTokens();\n    }\n  }\n\n  /**\n   * Get current authenticated user\n   */\n  async getCurrentUser(): Promise<User> {\n    const response = await apiRequest.get<User>('/auth/me');\n    \n    // Update stored user data\n    tokenManager.setUser(response);\n    \n    return response;\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken(): Promise<string> {\n    const refreshToken = tokenManager.getRefreshToken();\n    \n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    const response = await apiRequest.post<TokenRefreshResponse>('/auth/refresh', {\n      refresh_token: refreshToken,\n    });\n\n    // Update stored access token\n    tokenManager.updateAccessToken(response.access_token);\n\n    return response.access_token;\n  }\n\n  /**\n   * Check if user is currently authenticated\n   */\n  isAuthenticated(): boolean {\n    return tokenManager.isAuthenticated();\n  }\n\n  /**\n   * Get stored user data\n   */\n  getStoredUser(): User | null {\n    return tokenManager.getUser();\n  }\n\n  /**\n   * Verify token validity\n   */\n  async verifyToken(): Promise<boolean> {\n    try {\n      await this.getCurrentUser();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Request password reset\n   */\n  async requestPasswordReset(email: string): Promise<void> {\n    await apiRequest.post('/auth/password-reset-request', { email });\n  }\n\n  /**\n   * Reset password with token\n   */\n  async resetPassword(token: string, newPassword: string): Promise<void> {\n    await apiRequest.post('/auth/password-reset', {\n      token,\n      new_password: newPassword,\n    });\n  }\n\n  /**\n   * Change password for authenticated user\n   */\n  async changePassword(currentPassword: string, newPassword: string): Promise<void> {\n    await apiRequest.post('/auth/change-password', {\n      current_password: currentPassword,\n      new_password: newPassword,\n    });\n  }\n}\n\n// Export singleton instance\nexport const authService = new AuthService();\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}