{"ast":null,"code":"import { apiRequest } from './httpClient';\nimport { tokenManager } from '../utils/tokenManager';\nclass AuthService {\n  /**\n   * Login user with email and password\n   */\n  async login(credentials) {\n    const formData = new FormData();\n    formData.append('username', credentials.email);\n    formData.append('password', credentials.password);\n    const response = await apiRequest.post('/auth/login', formData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n\n    // Store tokens and user data\n    tokenManager.setTokens(response);\n    return response;\n  }\n\n  /**\n   * Register new user\n   */\n  async register(userData) {\n    const {\n      confirmPassword,\n      ...registrationData\n    } = userData;\n    const response = await apiRequest.post('/auth/register', registrationData);\n    return response;\n  }\n\n  /**\n   * Logout current user\n   */\n  async logout() {\n    try {\n      // Call logout endpoint if it exists\n      await apiRequest.post('/auth/logout');\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.warn('Logout API call failed:', error);\n    } finally {\n      // Always clear local tokens\n      tokenManager.clearTokens();\n    }\n  }\n\n  /**\n   * Get current authenticated user\n   */\n  async getCurrentUser() {\n    const response = await apiRequest.get('/auth/me');\n\n    // Update stored user data\n    tokenManager.setUser(response);\n    return response;\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken() {\n    const refreshToken = tokenManager.getRefreshToken();\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n    const response = await apiRequest.post('/auth/refresh', {\n      refresh_token: refreshToken\n    });\n\n    // Update stored access token\n    tokenManager.updateAccessToken(response.access_token);\n    return response.access_token;\n  }\n\n  /**\n   * Check if user is currently authenticated\n   */\n  isAuthenticated() {\n    return tokenManager.isAuthenticated();\n  }\n\n  /**\n   * Get stored user data\n   */\n  getStoredUser() {\n    return tokenManager.getUser();\n  }\n\n  /**\n   * Verify token validity\n   */\n  async verifyToken() {\n    try {\n      await this.getCurrentUser();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Request password reset\n   */\n  async requestPasswordReset(email) {\n    await apiRequest.post('/auth/password-reset-request', {\n      email\n    });\n  }\n\n  /**\n   * Reset password with token\n   */\n  async resetPassword(token, newPassword) {\n    await apiRequest.post('/auth/password-reset', {\n      token,\n      new_password: newPassword\n    });\n  }\n\n  /**\n   * Change password for authenticated user\n   */\n  async changePassword(currentPassword, newPassword) {\n    await apiRequest.post('/auth/change-password', {\n      current_password: currentPassword,\n      new_password: newPassword\n    });\n  }\n}\n\n// Export singleton instance\nexport const authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["apiRequest","tokenManager","AuthService","login","credentials","formData","FormData","append","email","password","response","post","headers","setTokens","register","userData","confirmPassword","registrationData","logout","error","console","warn","clearTokens","getCurrentUser","get","setUser","refreshToken","getRefreshToken","Error","refresh_token","updateAccessToken","access_token","isAuthenticated","getStoredUser","getUser","verifyToken","requestPasswordReset","resetPassword","token","newPassword","new_password","changePassword","currentPassword","current_password","authService"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/services/authService.ts"],"sourcesContent":["import { apiRequest } from './httpClient';\nimport { tokenManager } from '../utils/tokenManager';\nimport {\n  User,\n  AuthResponse,\n  LoginCredentials,\n  RegisterData,\n  TokenRefreshResponse,\n} from '../types';\n\nclass AuthService {\n  /**\n   * Login user with email and password\n   */\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const formData = new FormData();\n    formData.append('username', credentials.email);\n    formData.append('password', credentials.password);\n\n    const response = await apiRequest.post<AuthResponse>('/auth/login', formData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    });\n\n    // Store tokens and user data\n    tokenManager.setTokens(response);\n\n    return response;\n  }\n\n  /**\n   * Register new user\n   */\n  async register(userData: RegisterData): Promise<User> {\n    const { confirmPassword, ...registrationData } = userData;\n    \n    const response = await apiRequest.post<User>('/auth/register', registrationData);\n    return response;\n  }\n\n  /**\n   * Logout current user\n   */\n  async logout(): Promise<void> {\n    try {\n      // Call logout endpoint if it exists\n      await apiRequest.post('/auth/logout');\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.warn('Logout API call failed:', error);\n    } finally {\n      // Always clear local tokens\n      tokenManager.clearTokens();\n    }\n  }\n\n  /**\n   * Get current authenticated user\n   */\n  async getCurrentUser(): Promise<User> {\n    const response = await apiRequest.get<User>('/auth/me');\n    \n    // Update stored user data\n    tokenManager.setUser(response);\n    \n    return response;\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken(): Promise<string> {\n    const refreshToken = tokenManager.getRefreshToken();\n    \n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    const response = await apiRequest.post<TokenRefreshResponse>('/auth/refresh', {\n      refresh_token: refreshToken,\n    });\n\n    // Update stored access token\n    tokenManager.updateAccessToken(response.access_token);\n\n    return response.access_token;\n  }\n\n  /**\n   * Check if user is currently authenticated\n   */\n  isAuthenticated(): boolean {\n    return tokenManager.isAuthenticated();\n  }\n\n  /**\n   * Get stored user data\n   */\n  getStoredUser(): User | null {\n    return tokenManager.getUser();\n  }\n\n  /**\n   * Verify token validity\n   */\n  async verifyToken(): Promise<boolean> {\n    try {\n      await this.getCurrentUser();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Request password reset\n   */\n  async requestPasswordReset(email: string): Promise<void> {\n    await apiRequest.post('/auth/password-reset-request', { email });\n  }\n\n  /**\n   * Reset password with token\n   */\n  async resetPassword(token: string, newPassword: string): Promise<void> {\n    await apiRequest.post('/auth/password-reset', {\n      token,\n      new_password: newPassword,\n    });\n  }\n\n  /**\n   * Change password for authenticated user\n   */\n  async changePassword(currentPassword: string, newPassword: string): Promise<void> {\n    await apiRequest.post('/auth/change-password', {\n      current_password: currentPassword,\n      new_password: newPassword,\n    });\n  }\n}\n\n// Export singleton instance\nexport const authService = new AuthService();\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}