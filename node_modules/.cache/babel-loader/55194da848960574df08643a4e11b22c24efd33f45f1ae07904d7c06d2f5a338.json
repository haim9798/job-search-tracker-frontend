{"ast":null,"code":"/**\n * Performance Monitoring Configuration\n * Configures performance monitoring based on environment\n */\n\nimport { getConfig, getFeatureFlags } from '../config/environment';\nexport const getPerformanceConfig = () => {\n  const config = getConfig();\n  const featureFlags = getFeatureFlags();\n  const baseConfig = {\n    enableWebVitals: featureFlags.enablePerformanceMonitoring,\n    enableResourceTiming: featureFlags.enablePerformanceMonitoring,\n    enableUserTiming: featureFlags.enablePerformanceMonitoring,\n    enableLongTask: featureFlags.enablePerformanceMonitoring,\n    sampleRate: config.env === 'production' ? 0.1 : 1.0,\n    reportInterval: 30000,\n    // 30 seconds\n    maxRetries: 3\n  };\n\n  // Environment-specific overrides\n  switch (config.env) {\n    case 'development':\n      return {\n        ...baseConfig,\n        sampleRate: 1.0,\n        reportInterval: 10000 // 10 seconds for faster feedback\n      };\n    case 'staging':\n      return {\n        ...baseConfig,\n        sampleRate: 0.5,\n        reportInterval: 20000 // 20 seconds\n      };\n    case 'production':\n      return {\n        ...baseConfig,\n        sampleRate: 0.1,\n        reportInterval: 60000 // 1 minute\n      };\n    default:\n      return baseConfig;\n  }\n};\nexport const performanceConfig = getPerformanceConfig();","map":{"version":3,"names":["getConfig","getFeatureFlags","getPerformanceConfig","config","featureFlags","baseConfig","enableWebVitals","enablePerformanceMonitoring","enableResourceTiming","enableUserTiming","enableLongTask","sampleRate","env","reportInterval","maxRetries","performanceConfig"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/config/performance.ts"],"sourcesContent":["/**\n * Performance Monitoring Configuration\n * Configures performance monitoring based on environment\n */\n\nimport { getConfig, getFeatureFlags } from '../config/environment';\n\nexport interface PerformanceConfig {\n  enableWebVitals: boolean;\n  enableResourceTiming: boolean;\n  enableUserTiming: boolean;\n  enableLongTask: boolean;\n  sampleRate: number;\n  reportInterval: number;\n  maxRetries: number;\n}\n\nexport const getPerformanceConfig = (): PerformanceConfig => {\n  const config = getConfig();\n  const featureFlags = getFeatureFlags();\n\n  const baseConfig: PerformanceConfig = {\n    enableWebVitals: featureFlags.enablePerformanceMonitoring,\n    enableResourceTiming: featureFlags.enablePerformanceMonitoring,\n    enableUserTiming: featureFlags.enablePerformanceMonitoring,\n    enableLongTask: featureFlags.enablePerformanceMonitoring,\n    sampleRate: config.env === 'production' ? 0.1 : 1.0,\n    reportInterval: 30000, // 30 seconds\n    maxRetries: 3,\n  };\n\n  // Environment-specific overrides\n  switch (config.env) {\n    case 'development':\n      return {\n        ...baseConfig,\n        sampleRate: 1.0,\n        reportInterval: 10000, // 10 seconds for faster feedback\n      };\n    \n    case 'staging':\n      return {\n        ...baseConfig,\n        sampleRate: 0.5,\n        reportInterval: 20000, // 20 seconds\n      };\n    \n    case 'production':\n      return {\n        ...baseConfig,\n        sampleRate: 0.1,\n        reportInterval: 60000, // 1 minute\n      };\n    \n    default:\n      return baseConfig;\n  }\n};\n\nexport const performanceConfig = getPerformanceConfig();\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,EAAEC,eAAe,QAAQ,uBAAuB;AAYlE,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAyB;EAC3D,MAAMC,MAAM,GAAGH,SAAS,CAAC,CAAC;EAC1B,MAAMI,YAAY,GAAGH,eAAe,CAAC,CAAC;EAEtC,MAAMI,UAA6B,GAAG;IACpCC,eAAe,EAAEF,YAAY,CAACG,2BAA2B;IACzDC,oBAAoB,EAAEJ,YAAY,CAACG,2BAA2B;IAC9DE,gBAAgB,EAAEL,YAAY,CAACG,2BAA2B;IAC1DG,cAAc,EAAEN,YAAY,CAACG,2BAA2B;IACxDI,UAAU,EAAER,MAAM,CAACS,GAAG,KAAK,YAAY,GAAG,GAAG,GAAG,GAAG;IACnDC,cAAc,EAAE,KAAK;IAAE;IACvBC,UAAU,EAAE;EACd,CAAC;;EAED;EACA,QAAQX,MAAM,CAACS,GAAG;IAChB,KAAK,aAAa;MAChB,OAAO;QACL,GAAGP,UAAU;QACbM,UAAU,EAAE,GAAG;QACfE,cAAc,EAAE,KAAK,CAAE;MACzB,CAAC;IAEH,KAAK,SAAS;MACZ,OAAO;QACL,GAAGR,UAAU;QACbM,UAAU,EAAE,GAAG;QACfE,cAAc,EAAE,KAAK,CAAE;MACzB,CAAC;IAEH,KAAK,YAAY;MACf,OAAO;QACL,GAAGR,UAAU;QACbM,UAAU,EAAE,GAAG;QACfE,cAAc,EAAE,KAAK,CAAE;MACzB,CAAC;IAEH;MACE,OAAOR,UAAU;EACrB;AACF,CAAC;AAED,OAAO,MAAMU,iBAAiB,GAAGb,oBAAoB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}