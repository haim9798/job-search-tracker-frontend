{"ast":null,"code":"var _jsxFileName = \"/home/haim/github/job-search-tracker-api/frontend/src/components/ui/ScreenReaderAnnouncement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ScreenReaderAnnouncement = ({\n  message,\n  priority = 'polite'\n}) => {\n  _s();\n  const announcementRef = useRef(null);\n  useEffect(() => {\n    if (message && announcementRef.current) {\n      // Clear any existing announcements\n      announcementRef.current.textContent = '';\n\n      // Add the new message\n      setTimeout(() => {\n        if (announcementRef.current) {\n          announcementRef.current.textContent = message;\n        }\n      }, 100);\n    }\n  }, [message]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: announcementRef,\n    className: \"sr-only\",\n    \"aria-live\": priority,\n    \"aria-atomic\": \"true\",\n    role: \"status\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(ScreenReaderAnnouncement, \"6R64oubk8gfB1daBrWlR0jpNt58=\");\n_c = ScreenReaderAnnouncement;\nexport default ScreenReaderAnnouncement;\nvar _c;\n$RefreshReg$(_c, \"ScreenReaderAnnouncement\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ScreenReaderAnnouncement","message","priority","_s","announcementRef","current","textContent","setTimeout","ref","className","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/components/ui/ScreenReaderAnnouncement.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\ninterface ScreenReaderAnnouncementProps {\n  message: string;\n  priority?: 'polite' | 'assertive';\n}\n\nexport const ScreenReaderAnnouncement: React.FC<ScreenReaderAnnouncementProps> = ({\n  message,\n  priority = 'polite'\n}) => {\n  const announcementRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (message && announcementRef.current) {\n      // Clear any existing announcements\n      announcementRef.current.textContent = '';\n      \n      // Add the new message\n      setTimeout(() => {\n        if (announcementRef.current) {\n          announcementRef.current.textContent = message;\n        }\n      }, 100);\n    }\n  }, [message]);\n\n  return (\n    <div\n      ref={announcementRef}\n      className=\"sr-only\"\n      aria-live={priority}\n      aria-atomic=\"true\"\n      role=\"status\"\n    />\n  );\n};\n\nexport default ScreenReaderAnnouncement;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOjD,OAAO,MAAMC,wBAAiE,GAAGA,CAAC;EAChFC,OAAO;EACPC,QAAQ,GAAG;AACb,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,eAAe,GAAGP,MAAM,CAAiB,IAAI,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd,IAAIK,OAAO,IAAIG,eAAe,CAACC,OAAO,EAAE;MACtC;MACAD,eAAe,CAACC,OAAO,CAACC,WAAW,GAAG,EAAE;;MAExC;MACAC,UAAU,CAAC,MAAM;QACf,IAAIH,eAAe,CAACC,OAAO,EAAE;UAC3BD,eAAe,CAACC,OAAO,CAACC,WAAW,GAAGL,OAAO;QAC/C;MACF,CAAC,EAAE,GAAG,CAAC;IACT;EACF,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,oBACEF,OAAA;IACES,GAAG,EAAEJ,eAAgB;IACrBK,SAAS,EAAC,SAAS;IACnB,aAAWP,QAAS;IACpB,eAAY,MAAM;IAClBQ,IAAI,EAAC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEN,CAAC;AAACX,EAAA,CA7BWH,wBAAiE;AAAAe,EAAA,GAAjEf,wBAAiE;AA+B9E,eAAeA,wBAAwB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}