{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-hot-toast';\nimport { tokenManager } from '../utils/tokenManager';\nimport { OfflineQueue } from '../utils/offlineQueue';\nimport { PerformanceMonitor } from '../utils/performanceMonitor';\nimport { retryApiCall, defaultRetryConfig } from '../utils/retryMechanism';\n\n// Create axios instance with base configuration\nconst createHttpClient = () => {\n  const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const client = axios.create({\n    baseURL,\n    timeout: 10000,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  // Request interceptor for authentication and performance tracking\n  client.interceptors.request.use(config => {\n    var _config$method;\n    const authHeader = tokenManager.getAuthHeader();\n    if (authHeader) {\n      config.headers.Authorization = authHeader;\n    }\n\n    // Add performance tracking metadata\n    config.metadata = {\n      startTime: performance.now(),\n      performanceId: `${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()}_${config.url}`\n    };\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Response interceptor for error handling, token refresh, and performance tracking\n  client.interceptors.response.use(response => {\n    var _config$metadata, _config$metadata2;\n    // Track successful request performance\n    const config = response.config;\n    if ((_config$metadata = config.metadata) !== null && _config$metadata !== void 0 && _config$metadata.startTime && (_config$metadata2 = config.metadata) !== null && _config$metadata2 !== void 0 && _config$metadata2.performanceId) {\n      const duration = performance.now() - config.metadata.startTime;\n      PerformanceMonitor.addEntry({\n        name: config.metadata.performanceId,\n        startTime: config.metadata.startTime,\n        duration,\n        type: 'network',\n        metadata: {\n          url: config.url,\n          method: config.method,\n          status: response.status,\n          size: JSON.stringify(response.data).length\n        }\n      });\n    }\n    return response;\n  }, async error => {\n    var _originalRequest$meta, _originalRequest$meta2, _error$response2, _error$response3, _error$response4;\n    const originalRequest = error.config;\n\n    // Track failed request performance\n    if (originalRequest !== null && originalRequest !== void 0 && (_originalRequest$meta = originalRequest.metadata) !== null && _originalRequest$meta !== void 0 && _originalRequest$meta.startTime && originalRequest !== null && originalRequest !== void 0 && (_originalRequest$meta2 = originalRequest.metadata) !== null && _originalRequest$meta2 !== void 0 && _originalRequest$meta2.performanceId) {\n      var _error$response;\n      const duration = performance.now() - originalRequest.metadata.startTime;\n      PerformanceMonitor.addEntry({\n        name: originalRequest.metadata.performanceId,\n        startTime: originalRequest.metadata.startTime,\n        duration,\n        type: 'network',\n        metadata: {\n          url: originalRequest.url,\n          method: originalRequest.method,\n          status: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 0,\n          error: error.message\n        }\n      });\n    }\n\n    // Handle network errors - add to offline queue if appropriate\n    if (!error.response && !navigator.onLine) {\n      var _originalRequest$meth;\n      // Only queue mutations (POST, PUT, PATCH, DELETE)\n      const mutationMethods = ['post', 'put', 'patch', 'delete'];\n      if (originalRequest && mutationMethods.includes(((_originalRequest$meth = originalRequest.method) === null || _originalRequest$meth === void 0 ? void 0 : _originalRequest$meth.toLowerCase()) || '')) {\n        var _originalRequest$meth2, _originalRequest$meth3, _originalRequest$meth4, _originalRequest$meth5;\n        // Determine resource type and operation type\n        const url = originalRequest.url || '';\n        let resource = 'position';\n        let type = 'create';\n        if (url.includes('interview')) {\n          resource = 'interview';\n        }\n        if (((_originalRequest$meth2 = originalRequest.method) === null || _originalRequest$meth2 === void 0 ? void 0 : _originalRequest$meth2.toLowerCase()) === 'put' || ((_originalRequest$meth3 = originalRequest.method) === null || _originalRequest$meth3 === void 0 ? void 0 : _originalRequest$meth3.toLowerCase()) === 'patch') {\n          type = 'update';\n        } else if (((_originalRequest$meth4 = originalRequest.method) === null || _originalRequest$meth4 === void 0 ? void 0 : _originalRequest$meth4.toLowerCase()) === 'delete') {\n          type = 'delete';\n        }\n        OfflineQueue.addToQueue({\n          type,\n          resource,\n          data: originalRequest.data ? JSON.parse(originalRequest.data) : null,\n          url: `${originalRequest.baseURL}${originalRequest.url}`,\n          method: ((_originalRequest$meth5 = originalRequest.method) === null || _originalRequest$meth5 === void 0 ? void 0 : _originalRequest$meth5.toUpperCase()) || 'POST',\n          headers: originalRequest.headers\n        });\n        toast.error('You are offline. Request has been queued for when you reconnect.');\n\n        // Return a resolved promise with a placeholder response for optimistic updates\n        return Promise.resolve({\n          data: {\n            id: `offline-${Date.now()}`,\n            ...originalRequest.data\n          },\n          status: 202,\n          statusText: 'Queued',\n          headers: {},\n          config: originalRequest\n        });\n      }\n    }\n\n    // Handle 401 errors (unauthorized)\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        const refreshToken = tokenManager.getRefreshToken();\n        if (refreshToken) {\n          const response = await axios.post(`${baseURL}/auth/refresh`, {\n            refresh_token: refreshToken\n          });\n          const {\n            access_token,\n            expires_in\n          } = response.data;\n          tokenManager.updateAccessToken(access_token, expires_in);\n\n          // Retry the original request with new token\n          if (originalRequest.headers) {\n            originalRequest.headers.Authorization = `Bearer ${access_token}`;\n          }\n          return client(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh failed, clear tokens and redirect to login\n        tokenManager.clearTokens();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    // Transform error response to standardized format\n    const responseData = (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data;\n    const apiError = {\n      code: (responseData === null || responseData === void 0 ? void 0 : responseData.code) || 'UNKNOWN_ERROR',\n      message: (responseData === null || responseData === void 0 ? void 0 : responseData.message) || error.message || 'An unexpected error occurred',\n      field_errors: responseData === null || responseData === void 0 ? void 0 : responseData.field_errors,\n      timestamp: new Date().toISOString()\n    };\n\n    // Don't show toast for certain error codes\n    const silentErrors = ['VALIDATION_ERROR', 'NOT_FOUND'];\n    if (!silentErrors.includes(apiError.code) && ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) !== 401) {\n      toast.error(apiError.message);\n    }\n    return Promise.reject(apiError);\n  });\n  return client;\n};\n\n// Create and export the HTTP client instance\nexport const httpClient = createHttpClient();\n\n// Enhanced utility functions for common HTTP operations with performance tracking and retry\nexport const apiRequest = {\n  get: (url, config) => {\n    const endMeasurement = PerformanceMonitor.startMeasurement(`GET ${url}`, 'network');\n    return retryApiCall(() => httpClient.get(url, config), {\n      ...defaultRetryConfig,\n      onRetry: (attempt, error) => {\n        console.warn(`Retrying GET ${url} (attempt ${attempt}):`, error.message);\n      }\n    }).then(response => {\n      endMeasurement();\n      return response.data;\n    }).catch(error => {\n      endMeasurement();\n      throw error;\n    });\n  },\n  post: (url, data, config) => {\n    const endMeasurement = PerformanceMonitor.startMeasurement(`POST ${url}`, 'network');\n    return retryApiCall(() => httpClient.post(url, data, config), {\n      ...defaultRetryConfig,\n      // Be more conservative with POST retries\n      maxRetries: 2,\n      onRetry: (attempt, error) => {\n        console.warn(`Retrying POST ${url} (attempt ${attempt}):`, error.message);\n      }\n    }).then(response => {\n      endMeasurement();\n      return response.data;\n    }).catch(error => {\n      endMeasurement();\n      throw error;\n    });\n  },\n  put: (url, data, config) => {\n    const endMeasurement = PerformanceMonitor.startMeasurement(`PUT ${url}`, 'network');\n    return retryApiCall(() => httpClient.put(url, data, config), {\n      ...defaultRetryConfig,\n      maxRetries: 2,\n      onRetry: (attempt, error) => {\n        console.warn(`Retrying PUT ${url} (attempt ${attempt}):`, error.message);\n      }\n    }).then(response => {\n      endMeasurement();\n      return response.data;\n    }).catch(error => {\n      endMeasurement();\n      throw error;\n    });\n  },\n  patch: (url, data, config) => {\n    const endMeasurement = PerformanceMonitor.startMeasurement(`PATCH ${url}`, 'network');\n    return retryApiCall(() => httpClient.patch(url, data, config), {\n      ...defaultRetryConfig,\n      maxRetries: 2,\n      onRetry: (attempt, error) => {\n        console.warn(`Retrying PATCH ${url} (attempt ${attempt}):`, error.message);\n      }\n    }).then(response => {\n      endMeasurement();\n      return response.data;\n    }).catch(error => {\n      endMeasurement();\n      throw error;\n    });\n  },\n  delete: (url, config) => {\n    const endMeasurement = PerformanceMonitor.startMeasurement(`DELETE ${url}`, 'network');\n    return retryApiCall(() => httpClient.delete(url, config), {\n      ...defaultRetryConfig,\n      maxRetries: 2,\n      onRetry: (attempt, error) => {\n        console.warn(`Retrying DELETE ${url} (attempt ${attempt}):`, error.message);\n      }\n    }).then(response => {\n      endMeasurement();\n      return response.data;\n    }).catch(error => {\n      endMeasurement();\n      throw error;\n    });\n  }\n};\n\n// Re-export tokenManager for backward compatibility\nexport { tokenManager };\nexport default httpClient;","map":{"version":3,"names":["axios","toast","tokenManager","OfflineQueue","PerformanceMonitor","retryApiCall","defaultRetryConfig","createHttpClient","baseURL","process","env","REACT_APP_API_URL","client","create","timeout","headers","interceptors","request","use","config","_config$method","authHeader","getAuthHeader","Authorization","metadata","startTime","performance","now","performanceId","method","toUpperCase","url","error","Promise","reject","response","_config$metadata","_config$metadata2","duration","addEntry","name","type","status","size","JSON","stringify","data","length","_originalRequest$meta","_originalRequest$meta2","_error$response2","_error$response3","_error$response4","originalRequest","_error$response","message","navigator","onLine","_originalRequest$meth","mutationMethods","includes","toLowerCase","_originalRequest$meth2","_originalRequest$meth3","_originalRequest$meth4","_originalRequest$meth5","resource","addToQueue","parse","resolve","id","Date","statusText","_retry","refreshToken","getRefreshToken","post","refresh_token","access_token","expires_in","updateAccessToken","refreshError","clearTokens","window","location","href","responseData","apiError","code","field_errors","timestamp","toISOString","silentErrors","httpClient","apiRequest","get","endMeasurement","startMeasurement","onRetry","attempt","console","warn","then","catch","maxRetries","put","patch","delete"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/services/httpClient.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';\nimport { toast } from 'react-hot-toast';\nimport { ApiError } from '../types';\nimport { tokenManager } from '../utils/tokenManager';\nimport { OfflineQueue } from '../utils/offlineQueue';\nimport { PerformanceMonitor } from '../utils/performanceMonitor';\nimport { retryApiCall, defaultRetryConfig } from '../utils/retryMechanism';\n\n// Create axios instance with base configuration\nconst createHttpClient = (): AxiosInstance => {\n  const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  \n  const client = axios.create({\n    baseURL,\n    timeout: 10000,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  // Request interceptor for authentication and performance tracking\n  client.interceptors.request.use(\n    (config) => {\n      const authHeader = tokenManager.getAuthHeader();\n      if (authHeader) {\n        config.headers.Authorization = authHeader;\n      }\n      \n      // Add performance tracking metadata\n      config.metadata = {\n        startTime: performance.now(),\n        performanceId: `${config.method?.toUpperCase()}_${config.url}`,\n      };\n      \n      return config;\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n\n  // Response interceptor for error handling, token refresh, and performance tracking\n  client.interceptors.response.use(\n    (response: AxiosResponse) => {\n      // Track successful request performance\n      const config = response.config as any;\n      if (config.metadata?.startTime && config.metadata?.performanceId) {\n        const duration = performance.now() - config.metadata.startTime;\n        \n        PerformanceMonitor.addEntry({\n          name: config.metadata.performanceId,\n          startTime: config.metadata.startTime,\n          duration,\n          type: 'network',\n          metadata: {\n            url: config.url,\n            method: config.method,\n            status: response.status,\n            size: JSON.stringify(response.data).length,\n          },\n        });\n      }\n      \n      return response;\n    },\n    async (error: AxiosError) => {\n      const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean; metadata?: any };\n\n      // Track failed request performance\n      if (originalRequest?.metadata?.startTime && originalRequest?.metadata?.performanceId) {\n        const duration = performance.now() - originalRequest.metadata.startTime;\n        \n        PerformanceMonitor.addEntry({\n          name: originalRequest.metadata.performanceId,\n          startTime: originalRequest.metadata.startTime,\n          duration,\n          type: 'network',\n          metadata: {\n            url: originalRequest.url,\n            method: originalRequest.method,\n            status: error.response?.status || 0,\n            error: error.message,\n          },\n        });\n      }\n\n      // Handle network errors - add to offline queue if appropriate\n      if (!error.response && !navigator.onLine) {\n        // Only queue mutations (POST, PUT, PATCH, DELETE)\n        const mutationMethods = ['post', 'put', 'patch', 'delete'];\n        if (originalRequest && mutationMethods.includes(originalRequest.method?.toLowerCase() || '')) {\n          // Determine resource type and operation type\n          const url = originalRequest.url || '';\n          let resource: 'position' | 'interview' = 'position';\n          let type: 'create' | 'update' | 'delete' = 'create';\n          \n          if (url.includes('interview')) {\n            resource = 'interview';\n          }\n          \n          if (originalRequest.method?.toLowerCase() === 'put' || originalRequest.method?.toLowerCase() === 'patch') {\n            type = 'update';\n          } else if (originalRequest.method?.toLowerCase() === 'delete') {\n            type = 'delete';\n          }\n          \n          OfflineQueue.addToQueue({\n            type,\n            resource,\n            data: originalRequest.data ? JSON.parse(originalRequest.data) : null,\n            url: `${originalRequest.baseURL}${originalRequest.url}`,\n            method: originalRequest.method?.toUpperCase() || 'POST',\n            headers: originalRequest.headers as Record<string, string>,\n          });\n          \n          toast.error('You are offline. Request has been queued for when you reconnect.');\n          \n          // Return a resolved promise with a placeholder response for optimistic updates\n          return Promise.resolve({\n            data: { id: `offline-${Date.now()}`, ...originalRequest.data },\n            status: 202,\n            statusText: 'Queued',\n            headers: {},\n            config: originalRequest,\n          } as AxiosResponse);\n        }\n      }\n\n      // Handle 401 errors (unauthorized)\n      if (error.response?.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n\n        try {\n          const refreshToken = tokenManager.getRefreshToken();\n          if (refreshToken) {\n            const response = await axios.post(`${baseURL}/auth/refresh`, {\n              refresh_token: refreshToken,\n            });\n\n            const { access_token, expires_in } = response.data;\n            tokenManager.updateAccessToken(access_token, expires_in);\n\n            // Retry the original request with new token\n            if (originalRequest.headers) {\n              originalRequest.headers.Authorization = `Bearer ${access_token}`;\n            }\n            return client(originalRequest);\n          }\n        } catch (refreshError) {\n          // Refresh failed, clear tokens and redirect to login\n          tokenManager.clearTokens();\n          window.location.href = '/login';\n          return Promise.reject(refreshError);\n        }\n      }\n\n      // Transform error response to standardized format\n      const responseData = error.response?.data as any;\n      const apiError: ApiError = {\n        code: responseData?.code || 'UNKNOWN_ERROR',\n        message: responseData?.message || error.message || 'An unexpected error occurred',\n        field_errors: responseData?.field_errors,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Don't show toast for certain error codes\n      const silentErrors = ['VALIDATION_ERROR', 'NOT_FOUND'];\n      if (!silentErrors.includes(apiError.code) && error.response?.status !== 401) {\n        toast.error(apiError.message);\n      }\n\n      return Promise.reject(apiError);\n    }\n  );\n\n  return client;\n};\n\n// Create and export the HTTP client instance\nexport const httpClient = createHttpClient();\n\n// Enhanced utility functions for common HTTP operations with performance tracking and retry\nexport const apiRequest = {\n  get: <T>(url: string, config?: AxiosRequestConfig): Promise<T> => {\n    const endMeasurement = PerformanceMonitor.startMeasurement(`GET ${url}`, 'network');\n    \n    return retryApiCall(() => httpClient.get(url, config), {\n      ...defaultRetryConfig,\n      onRetry: (attempt, error) => {\n        console.warn(`Retrying GET ${url} (attempt ${attempt}):`, error.message);\n      },\n    })\n      .then((response) => {\n        endMeasurement();\n        return response.data;\n      })\n      .catch((error) => {\n        endMeasurement();\n        throw error;\n      });\n  },\n\n  post: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\n    const endMeasurement = PerformanceMonitor.startMeasurement(`POST ${url}`, 'network');\n    \n    return retryApiCall(() => httpClient.post(url, data, config), {\n      ...defaultRetryConfig,\n      // Be more conservative with POST retries\n      maxRetries: 2,\n      onRetry: (attempt, error) => {\n        console.warn(`Retrying POST ${url} (attempt ${attempt}):`, error.message);\n      },\n    })\n      .then((response) => {\n        endMeasurement();\n        return response.data;\n      })\n      .catch((error) => {\n        endMeasurement();\n        throw error;\n      });\n  },\n\n  put: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\n    const endMeasurement = PerformanceMonitor.startMeasurement(`PUT ${url}`, 'network');\n    \n    return retryApiCall(() => httpClient.put(url, data, config), {\n      ...defaultRetryConfig,\n      maxRetries: 2,\n      onRetry: (attempt, error) => {\n        console.warn(`Retrying PUT ${url} (attempt ${attempt}):`, error.message);\n      },\n    })\n      .then((response) => {\n        endMeasurement();\n        return response.data;\n      })\n      .catch((error) => {\n        endMeasurement();\n        throw error;\n      });\n  },\n\n  patch: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\n    const endMeasurement = PerformanceMonitor.startMeasurement(`PATCH ${url}`, 'network');\n    \n    return retryApiCall(() => httpClient.patch(url, data, config), {\n      ...defaultRetryConfig,\n      maxRetries: 2,\n      onRetry: (attempt, error) => {\n        console.warn(`Retrying PATCH ${url} (attempt ${attempt}):`, error.message);\n      },\n    })\n      .then((response) => {\n        endMeasurement();\n        return response.data;\n      })\n      .catch((error) => {\n        endMeasurement();\n        throw error;\n      });\n  },\n\n  delete: <T>(url: string, config?: AxiosRequestConfig): Promise<T> => {\n    const endMeasurement = PerformanceMonitor.startMeasurement(`DELETE ${url}`, 'network');\n    \n    return retryApiCall(() => httpClient.delete(url, config), {\n      ...defaultRetryConfig,\n      maxRetries: 2,\n      onRetry: (attempt, error) => {\n        console.warn(`Retrying DELETE ${url} (attempt ${attempt}):`, error.message);\n      },\n    })\n      .then((response) => {\n        endMeasurement();\n        return response.data;\n      })\n      .catch((error) => {\n        endMeasurement();\n        throw error;\n      });\n  },\n};\n\n// Re-export tokenManager for backward compatibility\nexport { tokenManager };\n\nexport default httpClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}