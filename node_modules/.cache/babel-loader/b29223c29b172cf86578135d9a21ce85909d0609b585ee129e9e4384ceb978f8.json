{"ast":null,"code":"import { apiRequest } from './httpClient';\nclass StatisticsService {\n  /**\n   * Get comprehensive position and interview statistics\n   */\n  async getOverview() {\n    return apiRequest.get('/statistics');\n  }\n\n  /**\n   * Get position statistics only\n   */\n  async getPositionStats() {\n    return apiRequest.get('/statistics/positions');\n  }\n\n  /**\n   * Get interview statistics only\n   */\n  async getInterviewStats() {\n    return apiRequest.get('/statistics/interviews');\n  }\n\n  /**\n   * Get company-wise statistics\n   */\n  async getCompanyStats() {\n    return apiRequest.get('/statistics/companies');\n  }\n\n  /**\n   * Get statistics for a specific date range\n   */\n  async getStatsByDateRange(dateFrom, dateTo) {\n    const params = new URLSearchParams({\n      date_from: dateFrom,\n      date_to: dateTo\n    });\n    return apiRequest.get(`/statistics?${params.toString()}`);\n  }\n\n  /**\n   * Get monthly statistics for the current year\n   */\n  async getMonthlyStats(year) {\n    const currentYear = year || new Date().getFullYear();\n    return apiRequest.get(`/statistics/monthly/${currentYear}`);\n  }\n\n  /**\n   * Get success rate statistics\n   */\n  async getSuccessRates() {\n    return apiRequest.get('/statistics/success-rates');\n  }\n\n  /**\n   * Get time-based statistics (how long processes take)\n   */\n  async getTimeStats() {\n    return apiRequest.get('/statistics/time-metrics');\n  }\n\n  /**\n   * Get interview outcome trends\n   */\n  async getInterviewTrends() {\n    return apiRequest.get('/statistics/interview-trends');\n  }\n\n  /**\n   * Get position status progression\n   */\n  async getStatusProgression() {\n    return apiRequest.get('/statistics/status-progression');\n  }\n\n  /**\n   * Get top performing companies (highest success rates)\n   */\n  async getTopCompanies(limit = 10) {\n    return apiRequest.get(`/statistics/top-companies?limit=${limit}`);\n  }\n\n  /**\n   * Get interview type effectiveness\n   */\n  async getInterviewTypeStats() {\n    return apiRequest.get('/statistics/interview-types');\n  }\n\n  /**\n   * Get weekly activity summary\n   */\n  async getWeeklyActivity() {\n    return apiRequest.get('/statistics/weekly-activity');\n  }\n\n  /**\n   * Get application source effectiveness (if tracking sources)\n   */\n  async getApplicationSources() {\n    return apiRequest.get('/statistics/application-sources');\n  }\n\n  /**\n   * Get salary range statistics\n   */\n  async getSalaryStats() {\n    return apiRequest.get('/statistics/salary-analysis');\n  }\n\n  /**\n   * Get location-based statistics\n   */\n  async getLocationStats() {\n    return apiRequest.get('/statistics/locations');\n  }\n\n  /**\n   * Get custom statistics with filters\n   */\n  async getCustomStats(filters) {\n    var _filters$companies, _filters$statuses, _filters$locations;\n    const params = new URLSearchParams();\n    if (filters.dateFrom) params.append('date_from', filters.dateFrom);\n    if (filters.dateTo) params.append('date_to', filters.dateTo);\n    if ((_filters$companies = filters.companies) !== null && _filters$companies !== void 0 && _filters$companies.length) {\n      filters.companies.forEach(company => params.append('companies', company));\n    }\n    if ((_filters$statuses = filters.statuses) !== null && _filters$statuses !== void 0 && _filters$statuses.length) {\n      filters.statuses.forEach(status => params.append('statuses', status));\n    }\n    if ((_filters$locations = filters.locations) !== null && _filters$locations !== void 0 && _filters$locations.length) {\n      filters.locations.forEach(location => params.append('locations', location));\n    }\n    const queryString = params.toString();\n    const url = queryString ? `/statistics/custom?${queryString}` : '/statistics/custom';\n    return apiRequest.get(url);\n  }\n\n  /**\n   * Export statistics data\n   */\n  async exportStats(format = 'json') {\n    const response = await apiRequest.get(`/statistics/export?format=${format}`, {\n      responseType: 'blob'\n    });\n    return response;\n  }\n\n  /**\n   * Get dashboard summary (key metrics for dashboard display)\n   */\n  async getDashboardSummary() {\n    return apiRequest.get('/statistics/dashboard');\n  }\n}\n\n// Export singleton instance\nexport const statisticsService = new StatisticsService();\nexport default statisticsService;","map":{"version":3,"names":["apiRequest","StatisticsService","getOverview","get","getPositionStats","getInterviewStats","getCompanyStats","getStatsByDateRange","dateFrom","dateTo","params","URLSearchParams","date_from","date_to","toString","getMonthlyStats","year","currentYear","Date","getFullYear","getSuccessRates","getTimeStats","getInterviewTrends","getStatusProgression","getTopCompanies","limit","getInterviewTypeStats","getWeeklyActivity","getApplicationSources","getSalaryStats","getLocationStats","getCustomStats","filters","_filters$companies","_filters$statuses","_filters$locations","append","companies","length","forEach","company","statuses","status","locations","location","queryString","url","exportStats","format","response","responseType","getDashboardSummary","statisticsService"],"sources":["/home/haim/github/job-search-tracker-api/frontend/src/services/statisticsService.ts"],"sourcesContent":["import { apiRequest } from './httpClient';\nimport { PositionStatistics } from '../types';\n\nclass StatisticsService {\n  /**\n   * Get comprehensive position and interview statistics\n   */\n  async getOverview(): Promise<PositionStatistics> {\n    return apiRequest.get<PositionStatistics>('/statistics');\n  }\n\n  /**\n   * Get position statistics only\n   */\n  async getPositionStats(): Promise<{\n    total_positions: number;\n    positions_by_status: Record<string, number>;\n  }> {\n    return apiRequest.get('/statistics/positions');\n  }\n\n  /**\n   * Get interview statistics only\n   */\n  async getInterviewStats(): Promise<{\n    total_interviews: number;\n    interviews_by_outcome: Record<string, number>;\n    interviews_by_type: Record<string, number>;\n  }> {\n    return apiRequest.get('/statistics/interviews');\n  }\n\n  /**\n   * Get company-wise statistics\n   */\n  async getCompanyStats(): Promise<Array<{\n    name: string;\n    position_count: number;\n    interview_count: number;\n  }>> {\n    return apiRequest.get('/statistics/companies');\n  }\n\n  /**\n   * Get statistics for a specific date range\n   */\n  async getStatsByDateRange(dateFrom: string, dateTo: string): Promise<PositionStatistics> {\n    const params = new URLSearchParams({\n      date_from: dateFrom,\n      date_to: dateTo,\n    });\n    \n    return apiRequest.get<PositionStatistics>(`/statistics?${params.toString()}`);\n  }\n\n  /**\n   * Get monthly statistics for the current year\n   */\n  async getMonthlyStats(year?: number): Promise<Array<{\n    month: string;\n    positions_applied: number;\n    interviews_conducted: number;\n    offers_received: number;\n  }>> {\n    const currentYear = year || new Date().getFullYear();\n    return apiRequest.get(`/statistics/monthly/${currentYear}`);\n  }\n\n  /**\n   * Get success rate statistics\n   */\n  async getSuccessRates(): Promise<{\n    application_to_interview_rate: number;\n    interview_to_offer_rate: number;\n    overall_success_rate: number;\n    average_interviews_per_position: number;\n  }> {\n    return apiRequest.get('/statistics/success-rates');\n  }\n\n  /**\n   * Get time-based statistics (how long processes take)\n   */\n  async getTimeStats(): Promise<{\n    average_days_to_first_interview: number;\n    average_days_to_offer: number;\n    average_interview_process_duration: number;\n  }> {\n    return apiRequest.get('/statistics/time-metrics');\n  }\n\n  /**\n   * Get interview outcome trends\n   */\n  async getInterviewTrends(): Promise<Array<{\n    date: string;\n    passed: number;\n    failed: number;\n    pending: number;\n    cancelled: number;\n  }>> {\n    return apiRequest.get('/statistics/interview-trends');\n  }\n\n  /**\n   * Get position status progression\n   */\n  async getStatusProgression(): Promise<Array<{\n    from_status: string;\n    to_status: string;\n    count: number;\n    average_days: number;\n  }>> {\n    return apiRequest.get('/statistics/status-progression');\n  }\n\n  /**\n   * Get top performing companies (highest success rates)\n   */\n  async getTopCompanies(limit: number = 10): Promise<Array<{\n    company: string;\n    applications: number;\n    interviews: number;\n    offers: number;\n    success_rate: number;\n  }>> {\n    return apiRequest.get(`/statistics/top-companies?limit=${limit}`);\n  }\n\n  /**\n   * Get interview type effectiveness\n   */\n  async getInterviewTypeStats(): Promise<Array<{\n    type: string;\n    total_conducted: number;\n    pass_rate: number;\n    average_duration: number;\n  }>> {\n    return apiRequest.get('/statistics/interview-types');\n  }\n\n  /**\n   * Get weekly activity summary\n   */\n  async getWeeklyActivity(): Promise<Array<{\n    week_start: string;\n    positions_applied: number;\n    interviews_scheduled: number;\n    interviews_completed: number;\n    offers_received: number;\n  }>> {\n    return apiRequest.get('/statistics/weekly-activity');\n  }\n\n  /**\n   * Get application source effectiveness (if tracking sources)\n   */\n  async getApplicationSources(): Promise<Array<{\n    source: string;\n    applications: number;\n    success_rate: number;\n  }>> {\n    return apiRequest.get('/statistics/application-sources');\n  }\n\n  /**\n   * Get salary range statistics\n   */\n  async getSalaryStats(): Promise<{\n    average_salary_applied: number;\n    average_salary_offered: number;\n    salary_ranges: Array<{\n      range: string;\n      count: number;\n      success_rate: number;\n    }>;\n  }> {\n    return apiRequest.get('/statistics/salary-analysis');\n  }\n\n  /**\n   * Get location-based statistics\n   */\n  async getLocationStats(): Promise<Array<{\n    location: string;\n    applications: number;\n    success_rate: number;\n    average_salary: number;\n  }>> {\n    return apiRequest.get('/statistics/locations');\n  }\n\n  /**\n   * Get custom statistics with filters\n   */\n  async getCustomStats(filters: {\n    dateFrom?: string;\n    dateTo?: string;\n    companies?: string[];\n    statuses?: string[];\n    locations?: string[];\n  }): Promise<PositionStatistics> {\n    const params = new URLSearchParams();\n    \n    if (filters.dateFrom) params.append('date_from', filters.dateFrom);\n    if (filters.dateTo) params.append('date_to', filters.dateTo);\n    if (filters.companies?.length) {\n      filters.companies.forEach(company => params.append('companies', company));\n    }\n    if (filters.statuses?.length) {\n      filters.statuses.forEach(status => params.append('statuses', status));\n    }\n    if (filters.locations?.length) {\n      filters.locations.forEach(location => params.append('locations', location));\n    }\n    \n    const queryString = params.toString();\n    const url = queryString ? `/statistics/custom?${queryString}` : '/statistics/custom';\n    \n    return apiRequest.get<PositionStatistics>(url);\n  }\n\n  /**\n   * Export statistics data\n   */\n  async exportStats(format: 'csv' | 'json' = 'json'): Promise<Blob> {\n    const response = await apiRequest.get(`/statistics/export?format=${format}`, {\n      responseType: 'blob',\n    });\n    return response;\n  }\n\n  /**\n   * Get dashboard summary (key metrics for dashboard display)\n   */\n  async getDashboardSummary(): Promise<{\n    total_positions: number;\n    active_applications: number;\n    upcoming_interviews: number;\n    recent_offers: number;\n    this_week_activity: {\n      applications: number;\n      interviews: number;\n    };\n    success_rates: {\n      interview_rate: number;\n      offer_rate: number;\n    };\n  }> {\n    return apiRequest.get('/statistics/dashboard');\n  }\n}\n\n// Export singleton instance\nexport const statisticsService = new StatisticsService();\nexport default statisticsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}